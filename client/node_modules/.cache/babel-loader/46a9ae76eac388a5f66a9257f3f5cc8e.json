{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n/**\n * Get many nodes height\n *\n * @param {Array} nodes\n * @return {number} nodes height\n */\n\n\nvar getNodesHeight = function getNodesHeight(nodes) {\n  var max = 0;\n  var min = Infinity;\n  if (R.isEmpty(nodes)) return 0;\n\n  for (var i = 0; i < nodes.length; i += 1) {\n    var node = nodes[i];\n    min = Math.min(min, node.box.top);\n    max = Math.max(max, node.box.top + node.box.height);\n  }\n\n  return max - min;\n};\n\nvar _default = getNodesHeight;\nexports.default = _default;","map":{"version":3,"sources":["D:/pelatihan/batch 27/Literature/client/node_modules/@react-pdf/layout/lib/node/getNodesHeight.js"],"names":["_interopRequireWildcard","require","exports","__esModule","default","R","getNodesHeight","nodes","max","min","Infinity","isEmpty","i","length","node","Math","box","top","height","_default"],"mappings":"AAAA;;AAEA,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAAD,CAArC;;AAEAC,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,CAAC,GAAGL,uBAAuB,CAACC,OAAO,CAAC,OAAD,CAAR,CAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIK,cAAc,GAAG,SAASA,cAAT,CAAwBC,KAAxB,EAA+B;AAClD,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGC,QAAV;AACA,MAAIL,CAAC,CAACM,OAAF,CAAUJ,KAAV,CAAJ,EAAsB,OAAO,CAAP;;AAEtB,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,EAAkCD,CAAC,IAAI,CAAvC,EAA0C;AACxC,QAAIE,IAAI,GAAGP,KAAK,CAACK,CAAD,CAAhB;AACAH,IAAAA,GAAG,GAAGM,IAAI,CAACN,GAAL,CAASA,GAAT,EAAcK,IAAI,CAACE,GAAL,CAASC,GAAvB,CAAN;AACAT,IAAAA,GAAG,GAAGO,IAAI,CAACP,GAAL,CAASA,GAAT,EAAcM,IAAI,CAACE,GAAL,CAASC,GAAT,GAAeH,IAAI,CAACE,GAAL,CAASE,MAAtC,CAAN;AACD;;AAED,SAAOV,GAAG,GAAGC,GAAb;AACD,CAZD;;AAcA,IAAIU,QAAQ,GAAGb,cAAf;AACAJ,OAAO,CAACE,OAAR,GAAkBe,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\n/**\n * Get many nodes height\n *\n * @param {Array} nodes\n * @return {number} nodes height\n */\nvar getNodesHeight = function getNodesHeight(nodes) {\n  var max = 0;\n  var min = Infinity;\n  if (R.isEmpty(nodes)) return 0;\n\n  for (var i = 0; i < nodes.length; i += 1) {\n    var node = nodes[i];\n    min = Math.min(min, node.box.top);\n    max = Math.max(max, node.box.top + node.box.height);\n  }\n\n  return max - min;\n};\n\nvar _default = getNodesHeight;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}