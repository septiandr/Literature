{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _fromFragments = _interopRequireDefault(require(\"../attributedString/fromFragments\"));\n/**\n * Default word hyphenation engine used when no one provided.\n * Does not perform word hyphenation at all\n *\n * @param  {String} word\n * @return {Array} same word\n */\n\n\nvar defaultHyphenationEngine = function defaultHyphenationEngine(word) {\n  return [word];\n};\n/**\n * Wrap words of attribute string\n *\n * @param  {Object} layout engines\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} attributed string including syllables\n */\n\n\nvar wrapWords = function wrapWords(engines, options, attributedString) {\n  if (engines === void 0) {\n    engines = {};\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var syllables = [];\n  var fragments = [];\n  var hyphenateWord = options.hyphenationCallback || engines.wordHyphenation && engines.wordHyphenation(options) || defaultHyphenationEngine;\n\n  for (var i = 0; i < attributedString.runs.length; i += 1) {\n    var string = '';\n    var run = attributedString.runs[i];\n    var words = attributedString.string.slice(run.start, run.end).split(/([ ]+)/g).filter(Boolean);\n\n    for (var j = 0; j < words.length; j += 1) {\n      var word = words[j];\n      var parts = hyphenateWord(word);\n      syllables.push.apply(syllables, parts);\n      string += parts.join('');\n    }\n\n    fragments.push({\n      string: string,\n      attributes: run.attributes\n    });\n  }\n\n  return (0, _extends2.default)({}, (0, _fromFragments.default)(fragments), {\n    syllables: syllables\n  });\n};\n\nvar _default = R.curryN(3, wrapWords);\n\nexports.default = _default;","map":{"version":3,"sources":["D:/pelatihan/batch 27/Literature/client/node_modules/@react-pdf/textkit/lib/layout/wrapWords.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","exports","__esModule","default","_extends2","R","_fromFragments","defaultHyphenationEngine","word","wrapWords","engines","options","attributedString","syllables","fragments","hyphenateWord","hyphenationCallback","wordHyphenation","i","runs","length","string","run","words","slice","start","end","split","filter","Boolean","j","parts","push","apply","join","attributes","_default","curryN"],"mappings":"AAAA;;AAEA,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAAD,CAArC;;AAEA,IAAIC,sBAAsB,GAAGD,OAAO,CAAC,8CAAD,CAApC;;AAEAE,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,SAAS,GAAGJ,sBAAsB,CAACD,OAAO,CAAC,gCAAD,CAAR,CAAtC;;AAEA,IAAIM,CAAC,GAAGP,uBAAuB,CAACC,OAAO,CAAC,OAAD,CAAR,CAA/B;;AAEA,IAAIO,cAAc,GAAGN,sBAAsB,CAACD,OAAO,CAAC,mCAAD,CAAR,CAA3C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIQ,wBAAwB,GAAG,SAASA,wBAAT,CAAkCC,IAAlC,EAAwC;AACrE,SAAO,CAACA,IAAD,CAAP;AACD,CAFD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBC,OAAnB,EAA4BC,OAA5B,EAAqCC,gBAArC,EAAuD;AACrE,MAAIF,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,MAAIC,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,MAAIE,SAAS,GAAG,EAAhB;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,aAAa,GAAGJ,OAAO,CAACK,mBAAR,IAA+BN,OAAO,CAACO,eAAR,IAA2BP,OAAO,CAACO,eAAR,CAAwBN,OAAxB,CAA1D,IAA8FJ,wBAAlH;;AAEA,OAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,gBAAgB,CAACO,IAAjB,CAAsBC,MAA1C,EAAkDF,CAAC,IAAI,CAAvD,EAA0D;AACxD,QAAIG,MAAM,GAAG,EAAb;AACA,QAAIC,GAAG,GAAGV,gBAAgB,CAACO,IAAjB,CAAsBD,CAAtB,CAAV;AACA,QAAIK,KAAK,GAAGX,gBAAgB,CAACS,MAAjB,CAAwBG,KAAxB,CAA8BF,GAAG,CAACG,KAAlC,EAAyCH,GAAG,CAACI,GAA7C,EAAkDC,KAAlD,CAAwD,SAAxD,EAAmEC,MAAnE,CAA0EC,OAA1E,CAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACH,MAA1B,EAAkCU,CAAC,IAAI,CAAvC,EAA0C;AACxC,UAAItB,IAAI,GAAGe,KAAK,CAACO,CAAD,CAAhB;AACA,UAAIC,KAAK,GAAGhB,aAAa,CAACP,IAAD,CAAzB;AACAK,MAAAA,SAAS,CAACmB,IAAV,CAAeC,KAAf,CAAqBpB,SAArB,EAAgCkB,KAAhC;AACAV,MAAAA,MAAM,IAAIU,KAAK,CAACG,IAAN,CAAW,EAAX,CAAV;AACD;;AAEDpB,IAAAA,SAAS,CAACkB,IAAV,CAAe;AACbX,MAAAA,MAAM,EAAEA,MADK;AAEbc,MAAAA,UAAU,EAAEb,GAAG,CAACa;AAFH,KAAf;AAID;;AAED,SAAO,CAAC,GAAG/B,SAAS,CAACD,OAAd,EAAuB,EAAvB,EAA2B,CAAC,GAAGG,cAAc,CAACH,OAAnB,EAA4BW,SAA5B,CAA3B,EAAmE;AACxED,IAAAA,SAAS,EAAEA;AAD6D,GAAnE,CAAP;AAGD,CAlCD;;AAoCA,IAAIuB,QAAQ,GAAG/B,CAAC,CAACgC,MAAF,CAAS,CAAT,EAAY5B,SAAZ,CAAf;;AAEAR,OAAO,CAACE,OAAR,GAAkBiC,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _fromFragments = _interopRequireDefault(require(\"../attributedString/fromFragments\"));\n\n/**\n * Default word hyphenation engine used when no one provided.\n * Does not perform word hyphenation at all\n *\n * @param  {String} word\n * @return {Array} same word\n */\nvar defaultHyphenationEngine = function defaultHyphenationEngine(word) {\n  return [word];\n};\n/**\n * Wrap words of attribute string\n *\n * @param  {Object} layout engines\n * @param  {Object}  layout options\n * @param  {Object}  attributed string\n * @return {Object} attributed string including syllables\n */\n\n\nvar wrapWords = function wrapWords(engines, options, attributedString) {\n  if (engines === void 0) {\n    engines = {};\n  }\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var syllables = [];\n  var fragments = [];\n  var hyphenateWord = options.hyphenationCallback || engines.wordHyphenation && engines.wordHyphenation(options) || defaultHyphenationEngine;\n\n  for (var i = 0; i < attributedString.runs.length; i += 1) {\n    var string = '';\n    var run = attributedString.runs[i];\n    var words = attributedString.string.slice(run.start, run.end).split(/([ ]+)/g).filter(Boolean);\n\n    for (var j = 0; j < words.length; j += 1) {\n      var word = words[j];\n      var parts = hyphenateWord(word);\n      syllables.push.apply(syllables, parts);\n      string += parts.join('');\n    }\n\n    fragments.push({\n      string: string,\n      attributes: run.attributes\n    });\n  }\n\n  return (0, _extends2.default)({}, (0, _fromFragments.default)(fragments), {\n    syllables: syllables\n  });\n};\n\nvar _default = R.curryN(3, wrapWords);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}