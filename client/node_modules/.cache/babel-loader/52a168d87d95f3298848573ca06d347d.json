{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _getMargin = _interopRequireDefault(require(\"../node/getMargin\"));\n\nvar _getPadding = _interopRequireDefault(require(\"../node/getPadding\"));\n\nvar _isHeightAuto = _interopRequireDefault(require(\"../page/isHeightAuto\"));\n/* eslint-disable no-param-reassign */\n\n\nvar SAFETY_HEIGHT = 10;\nvar getMax = R.reduce(R.max, -Infinity);\n/**\n * Helper object to predict canvas size\n * TODO: Implement remaining functions (as close as possible);\n */\n\nvar measureCtx = function measureCtx() {\n  var ctx = {};\n  var points = [];\n\n  var nil = function nil() {\n    return ctx;\n  };\n\n  var addPoint = function addPoint(x, y) {\n    return points.push([x, y]);\n  };\n\n  var moveTo = R.compose(nil, addPoint);\n\n  var rect = function rect(x, y, w, h) {\n    addPoint(x, y);\n    addPoint(x + w, y);\n    addPoint(x, y + h);\n    addPoint(x + w, y + h);\n    return ctx;\n  };\n\n  var ellipse = function ellipse(x, y, rx, ry) {\n    ry = ry || rx;\n    addPoint(x - rx, y - ry);\n    addPoint(x + rx, y - ry);\n    addPoint(x + rx, y + ry);\n    addPoint(x - rx, y + ry);\n    return ctx;\n  };\n\n  var polygon = function polygon() {\n    points.push.apply(points, arguments);\n    return nil();\n  }; // Change dimensions\n\n\n  ctx.rect = rect;\n  ctx.moveTo = moveTo;\n  ctx.lineTo = moveTo;\n  ctx.circle = ellipse;\n  ctx.polygon = polygon;\n  ctx.ellipse = ellipse;\n  ctx.roundedRect = rect; // To be implemented\n\n  ctx.text = nil;\n  ctx.path = nil;\n  ctx.lineWidth = nil;\n  ctx.bezierCurveTo = nil;\n  ctx.quadraticCurveTo = nil;\n  ctx.scale = nil;\n  ctx.rotate = nil;\n  ctx.translate = nil; // These don't change dimensions\n\n  ctx.dash = nil;\n  ctx.clip = nil;\n  ctx.save = nil;\n  ctx.fill = nil;\n  ctx.font = nil;\n  ctx.stroke = nil;\n  ctx.lineCap = nil;\n  ctx.opacity = nil;\n  ctx.restore = nil;\n  ctx.lineJoin = nil;\n  ctx.fontSize = nil;\n  ctx.fillColor = nil;\n  ctx.miterLimit = nil;\n  ctx.strokeColor = nil;\n  ctx.fillOpacity = nil;\n  ctx.strokeOpacity = nil;\n  ctx.linearGradient = nil;\n  ctx.radialGradient = nil;\n\n  ctx.getWidth = function () {\n    return R.compose(getMax, R.pluck(0))(points);\n  };\n\n  ctx.getHeight = function () {\n    return R.compose(getMax, R.pluck(1))(points);\n  };\n\n  return ctx;\n};\n/**\n * Yoga canvas measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @param {Number} width\n * @param {Number} widthMode\n * @param {Number} height\n * @param {Number} heightMode\n * @returns {Object} canvas width and height\n */\n\n\nvar measureCanvas = function measureCanvas(page, node) {\n  var imageMargin = (0, _getMargin.default)(node);\n  var pagePadding = (0, _getPadding.default)(page);\n  var pageArea = (0, _isHeightAuto.default)(page) ? Infinity : page.box.height - pagePadding.paddingTop - pagePadding.paddingBottom - imageMargin.marginTop - imageMargin.marginBottom - SAFETY_HEIGHT;\n  var ctx = measureCtx();\n  node.props.paint(ctx);\n  var width = ctx.getWidth();\n  var height = Math.min(pageArea, ctx.getHeight());\n  return {\n    height: height,\n    width: width\n  };\n};\n\nvar _default = R.curryN(6, measureCanvas);\n\nexports.default = _default;","map":{"version":3,"sources":["D:/pelatihan/batch 27/Literature/client/node_modules/@react-pdf/layout/lib/canvas/measureCanvas.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","default","R","_getMargin","_getPadding","_isHeightAuto","SAFETY_HEIGHT","getMax","reduce","max","Infinity","measureCtx","ctx","points","nil","addPoint","x","y","push","moveTo","compose","rect","w","h","ellipse","rx","ry","polygon","apply","arguments","lineTo","circle","roundedRect","text","path","lineWidth","bezierCurveTo","quadraticCurveTo","scale","rotate","translate","dash","clip","save","fill","font","stroke","lineCap","opacity","restore","lineJoin","fontSize","fillColor","miterLimit","strokeColor","fillOpacity","strokeOpacity","linearGradient","radialGradient","getWidth","pluck","getHeight","measureCanvas","page","node","imageMargin","pagePadding","pageArea","box","height","paddingTop","paddingBottom","marginTop","marginBottom","props","paint","width","Math","min","_default","curryN"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _getMargin = _interopRequireDefault(require(\"../node/getMargin\"));\n\nvar _getPadding = _interopRequireDefault(require(\"../node/getPadding\"));\n\nvar _isHeightAuto = _interopRequireDefault(require(\"../page/isHeightAuto\"));\n\n/* eslint-disable no-param-reassign */\nvar SAFETY_HEIGHT = 10;\nvar getMax = R.reduce(R.max, -Infinity);\n/**\n * Helper object to predict canvas size\n * TODO: Implement remaining functions (as close as possible);\n */\n\nvar measureCtx = function measureCtx() {\n  var ctx = {};\n  var points = [];\n\n  var nil = function nil() {\n    return ctx;\n  };\n\n  var addPoint = function addPoint(x, y) {\n    return points.push([x, y]);\n  };\n\n  var moveTo = R.compose(nil, addPoint);\n\n  var rect = function rect(x, y, w, h) {\n    addPoint(x, y);\n    addPoint(x + w, y);\n    addPoint(x, y + h);\n    addPoint(x + w, y + h);\n    return ctx;\n  };\n\n  var ellipse = function ellipse(x, y, rx, ry) {\n    ry = ry || rx;\n    addPoint(x - rx, y - ry);\n    addPoint(x + rx, y - ry);\n    addPoint(x + rx, y + ry);\n    addPoint(x - rx, y + ry);\n    return ctx;\n  };\n\n  var polygon = function polygon() {\n    points.push.apply(points, arguments);\n    return nil();\n  }; // Change dimensions\n\n\n  ctx.rect = rect;\n  ctx.moveTo = moveTo;\n  ctx.lineTo = moveTo;\n  ctx.circle = ellipse;\n  ctx.polygon = polygon;\n  ctx.ellipse = ellipse;\n  ctx.roundedRect = rect; // To be implemented\n\n  ctx.text = nil;\n  ctx.path = nil;\n  ctx.lineWidth = nil;\n  ctx.bezierCurveTo = nil;\n  ctx.quadraticCurveTo = nil;\n  ctx.scale = nil;\n  ctx.rotate = nil;\n  ctx.translate = nil; // These don't change dimensions\n\n  ctx.dash = nil;\n  ctx.clip = nil;\n  ctx.save = nil;\n  ctx.fill = nil;\n  ctx.font = nil;\n  ctx.stroke = nil;\n  ctx.lineCap = nil;\n  ctx.opacity = nil;\n  ctx.restore = nil;\n  ctx.lineJoin = nil;\n  ctx.fontSize = nil;\n  ctx.fillColor = nil;\n  ctx.miterLimit = nil;\n  ctx.strokeColor = nil;\n  ctx.fillOpacity = nil;\n  ctx.strokeOpacity = nil;\n  ctx.linearGradient = nil;\n  ctx.radialGradient = nil;\n\n  ctx.getWidth = function () {\n    return R.compose(getMax, R.pluck(0))(points);\n  };\n\n  ctx.getHeight = function () {\n    return R.compose(getMax, R.pluck(1))(points);\n  };\n\n  return ctx;\n};\n/**\n * Yoga canvas measure function\n *\n * @param {Object} page\n * @param {Object} node\n * @param {Number} width\n * @param {Number} widthMode\n * @param {Number} height\n * @param {Number} heightMode\n * @returns {Object} canvas width and height\n */\n\n\nvar measureCanvas = function measureCanvas(page, node) {\n  var imageMargin = (0, _getMargin.default)(node);\n  var pagePadding = (0, _getPadding.default)(page);\n  var pageArea = (0, _isHeightAuto.default)(page) ? Infinity : page.box.height - pagePadding.paddingTop - pagePadding.paddingBottom - imageMargin.marginTop - imageMargin.marginBottom - SAFETY_HEIGHT;\n  var ctx = measureCtx();\n  node.props.paint(ctx);\n  var width = ctx.getWidth();\n  var height = Math.min(pageArea, ctx.getHeight());\n  return {\n    height: height,\n    width: width\n  };\n};\n\nvar _default = R.curryN(6, measureCanvas);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}