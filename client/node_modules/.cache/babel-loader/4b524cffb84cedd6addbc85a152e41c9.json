{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _attributedString = _interopRequireDefault(require(\"@react-pdf/textkit/lib/attributedString\"));\n/**\n * Get lines width (if any)\n *\n * @param {Object} node\n * @returns {Number} lines width\n */\n\n\nvar linesWidth = function linesWidth(node) {\n  if (!node.lines) return -1;\n  return Math.max.apply(Math, node.lines.map(function (line) {\n    return _attributedString.default.advanceWidth(line);\n  }));\n};\n\nvar _default = linesWidth;\nexports.default = _default;","map":{"version":3,"sources":["D:/pelatihan/batch 27/Literature/client/node_modules/@react-pdf/layout/lib/text/linesWidth.js"],"names":["_interopRequireDefault","require","exports","__esModule","default","_attributedString","linesWidth","node","lines","Math","max","apply","map","line","advanceWidth","_default"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,iBAAiB,GAAGL,sBAAsB,CAACC,OAAO,CAAC,yCAAD,CAAR,CAA9C;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIK,UAAU,GAAG,SAASA,UAAT,CAAoBC,IAApB,EAA0B;AACzC,MAAI,CAACA,IAAI,CAACC,KAAV,EAAiB,OAAO,CAAC,CAAR;AACjB,SAAOC,IAAI,CAACC,GAAL,CAASC,KAAT,CAAeF,IAAf,EAAqBF,IAAI,CAACC,KAAL,CAAWI,GAAX,CAAe,UAAUC,IAAV,EAAgB;AACzD,WAAOR,iBAAiB,CAACD,OAAlB,CAA0BU,YAA1B,CAAuCD,IAAvC,CAAP;AACD,GAF2B,CAArB,CAAP;AAGD,CALD;;AAOA,IAAIE,QAAQ,GAAGT,UAAf;AACAJ,OAAO,CAACE,OAAR,GAAkBW,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _attributedString = _interopRequireDefault(require(\"@react-pdf/textkit/lib/attributedString\"));\n\n/**\n * Get lines width (if any)\n *\n * @param {Object} node\n * @returns {Number} lines width\n */\nvar linesWidth = function linesWidth(node) {\n  if (!node.lines) return -1;\n  return Math.max.apply(Math, node.lines.map(function (line) {\n    return _attributedString.default.advanceWidth(line);\n  }));\n};\n\nvar _default = linesWidth;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}