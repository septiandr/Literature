{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar IGNORABLE_CODEPOINTS = [8232, // LINE_SEPARATOR\n8233 // PARAGRAPH_SEPARATOR\n];\n\nvar buildSubsetForFont = function buildSubsetForFont(font) {\n  return IGNORABLE_CODEPOINTS.reduce(function (acc, codePoint) {\n    if (font && font.hasGlyphForCodePoint && font.hasGlyphForCodePoint(codePoint)) {\n      return acc;\n    }\n\n    return [].concat(acc, [String.fromCharCode(codePoint)]);\n  }, []);\n};\n\nvar ignoreChars = function ignoreChars(fragments) {\n  return fragments.map(function (fragment) {\n    var charSubset = buildSubsetForFont(fragment.attributes.font);\n    var subsetRegex = new RegExp(charSubset.join('|'));\n    return {\n      string: fragment.string.replace(subsetRegex, ''),\n      attributes: fragment.attributes\n    };\n  });\n};\n\nvar _default = ignoreChars;\nexports.default = _default;","map":{"version":3,"sources":["D:/pelatihan/batch 27/Literature/client/node_modules/@react-pdf/layout/lib/text/ignoreChars.js"],"names":["exports","__esModule","default","IGNORABLE_CODEPOINTS","buildSubsetForFont","font","reduce","acc","codePoint","hasGlyphForCodePoint","concat","String","fromCharCode","ignoreChars","fragments","map","fragment","charSubset","attributes","subsetRegex","RegExp","join","string","replace","_default"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;AACA,IAAIC,oBAAoB,GAAG,CAAC,IAAD,EAAO;AAClC,IAD2B,CACtB;AADsB,CAA3B;;AAIA,IAAIC,kBAAkB,GAAG,SAASA,kBAAT,CAA4BC,IAA5B,EAAkC;AACzD,SAAOF,oBAAoB,CAACG,MAArB,CAA4B,UAAUC,GAAV,EAAeC,SAAf,EAA0B;AAC3D,QAAIH,IAAI,IAAIA,IAAI,CAACI,oBAAb,IAAqCJ,IAAI,CAACI,oBAAL,CAA0BD,SAA1B,CAAzC,EAA+E;AAC7E,aAAOD,GAAP;AACD;;AAED,WAAO,GAAGG,MAAH,CAAUH,GAAV,EAAe,CAACI,MAAM,CAACC,YAAP,CAAoBJ,SAApB,CAAD,CAAf,CAAP;AACD,GANM,EAMJ,EANI,CAAP;AAOD,CARD;;AAUA,IAAIK,WAAW,GAAG,SAASA,WAAT,CAAqBC,SAArB,EAAgC;AAChD,SAAOA,SAAS,CAACC,GAAV,CAAc,UAAUC,QAAV,EAAoB;AACvC,QAAIC,UAAU,GAAGb,kBAAkB,CAACY,QAAQ,CAACE,UAAT,CAAoBb,IAArB,CAAnC;AACA,QAAIc,WAAW,GAAG,IAAIC,MAAJ,CAAWH,UAAU,CAACI,IAAX,CAAgB,GAAhB,CAAX,CAAlB;AACA,WAAO;AACLC,MAAAA,MAAM,EAAEN,QAAQ,CAACM,MAAT,CAAgBC,OAAhB,CAAwBJ,WAAxB,EAAqC,EAArC,CADH;AAELD,MAAAA,UAAU,EAAEF,QAAQ,CAACE;AAFhB,KAAP;AAID,GAPM,CAAP;AAQD,CATD;;AAWA,IAAIM,QAAQ,GAAGX,WAAf;AACAb,OAAO,CAACE,OAAR,GAAkBsB,QAAlB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\nvar IGNORABLE_CODEPOINTS = [8232, // LINE_SEPARATOR\n8233 // PARAGRAPH_SEPARATOR\n];\n\nvar buildSubsetForFont = function buildSubsetForFont(font) {\n  return IGNORABLE_CODEPOINTS.reduce(function (acc, codePoint) {\n    if (font && font.hasGlyphForCodePoint && font.hasGlyphForCodePoint(codePoint)) {\n      return acc;\n    }\n\n    return [].concat(acc, [String.fromCharCode(codePoint)]);\n  }, []);\n};\n\nvar ignoreChars = function ignoreChars(fragments) {\n  return fragments.map(function (fragment) {\n    var charSubset = buildSubsetForFont(fragment.attributes.font);\n    var subsetRegex = new RegExp(charSubset.join('|'));\n    return {\n      string: fragment.string.replace(subsetRegex, ''),\n      attributes: fragment.attributes\n    };\n  });\n};\n\nvar _default = ignoreChars;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}