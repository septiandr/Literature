{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n/**\n * Get string index at offset\n *\n * @param  {Object}  run\n * @param  {number}  offset\n * @return {number} string index at offset N\n */\n\n\nvar indexAtOffset = function indexAtOffset(offset, run) {\n  var counter = 0;\n  var index = 0;\n  var glyphs = R.propOr([], 'glyphs', run);\n  var positions = R.propOr([], 'positions', run);\n\n  for (var i = 0; i < positions.length; i += 1) {\n    var xAdvance = positions[i].xAdvance;\n    if (counter + xAdvance > offset) return index;\n    counter += xAdvance;\n    index += R.pathOr(0, [i, 'codePoints', 'length'], glyphs);\n  }\n\n  return index;\n};\n\nvar _default = R.curryN(2, indexAtOffset);\n\nexports.default = _default;","map":{"version":3,"sources":["D:/pelatihan/batch 27/Literature/client/node_modules/@react-pdf/textkit/lib/run/indexAtOffset.js"],"names":["_interopRequireWildcard","require","exports","__esModule","default","R","indexAtOffset","offset","run","counter","index","glyphs","propOr","positions","i","length","xAdvance","pathOr","_default","curryN"],"mappings":"AAAA;;AAEA,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAAD,CAArC;;AAEAC,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,CAAC,GAAGL,uBAAuB,CAACC,OAAO,CAAC,OAAD,CAAR,CAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIK,aAAa,GAAG,SAASA,aAAT,CAAuBC,MAAvB,EAA+BC,GAA/B,EAAoC;AACtD,MAAIC,OAAO,GAAG,CAAd;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,MAAM,GAAGN,CAAC,CAACO,MAAF,CAAS,EAAT,EAAa,QAAb,EAAuBJ,GAAvB,CAAb;AACA,MAAIK,SAAS,GAAGR,CAAC,CAACO,MAAF,CAAS,EAAT,EAAa,WAAb,EAA0BJ,GAA1B,CAAhB;;AAEA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,SAAS,CAACE,MAA9B,EAAsCD,CAAC,IAAI,CAA3C,EAA8C;AAC5C,QAAIE,QAAQ,GAAGH,SAAS,CAACC,CAAD,CAAT,CAAaE,QAA5B;AACA,QAAIP,OAAO,GAAGO,QAAV,GAAqBT,MAAzB,EAAiC,OAAOG,KAAP;AACjCD,IAAAA,OAAO,IAAIO,QAAX;AACAN,IAAAA,KAAK,IAAIL,CAAC,CAACY,MAAF,CAAS,CAAT,EAAY,CAACH,CAAD,EAAI,YAAJ,EAAkB,QAAlB,CAAZ,EAAyCH,MAAzC,CAAT;AACD;;AAED,SAAOD,KAAP;AACD,CAdD;;AAgBA,IAAIQ,QAAQ,GAAGb,CAAC,CAACc,MAAF,CAAS,CAAT,EAAYb,aAAZ,CAAf;;AAEAJ,OAAO,CAACE,OAAR,GAAkBc,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\n/**\n * Get string index at offset\n *\n * @param  {Object}  run\n * @param  {number}  offset\n * @return {number} string index at offset N\n */\nvar indexAtOffset = function indexAtOffset(offset, run) {\n  var counter = 0;\n  var index = 0;\n  var glyphs = R.propOr([], 'glyphs', run);\n  var positions = R.propOr([], 'positions', run);\n\n  for (var i = 0; i < positions.length; i += 1) {\n    var xAdvance = positions[i].xAdvance;\n    if (counter + xAdvance > offset) return index;\n    counter += xAdvance;\n    index += R.pathOr(0, [i, 'codePoints', 'length'], glyphs);\n  }\n\n  return index;\n};\n\nvar _default = R.curryN(2, indexAtOffset);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}