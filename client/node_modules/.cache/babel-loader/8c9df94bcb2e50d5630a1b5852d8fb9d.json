{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _standardFont = _interopRequireDefault(require(\"./standardFont\"));\n\nvar fontCache = {};\nvar IGNORED_CODE_POINTS = [173];\nvar getFontSize = R.pathOr(12, ['attributes', 'fontSize']);\n\nvar getOrCreateFont = function getOrCreateFont(name) {\n  if (fontCache[name]) return fontCache[name];\n  var font = new _standardFont.default(name);\n  fontCache[name] = font;\n  return font;\n};\n\nvar getFallbackFont = function getFallbackFont() {\n  return getOrCreateFont('Helvetica');\n};\n\nvar shouldFallbackToFont = function shouldFallbackToFont(codePoint, font) {\n  return !font || !IGNORED_CODE_POINTS.includes(codePoint) && !font.hasGlyphForCodePoint(codePoint) && getFallbackFont().hasGlyphForCodePoint(codePoint);\n};\n\nvar fontSubstitution = function fontSubstitution() {\n  return function (_ref) {\n    var string = _ref.string,\n        runs = _ref.runs;\n    var lastFont = null;\n    var lastFontSize = null;\n    var lastIndex = 0;\n    var index = 0;\n    var res = [];\n\n    for (var i = 0; i < runs.length; i += 1) {\n      var run = runs[i];\n      var defaultFont = typeof run.attributes.font === 'string' ? getOrCreateFont(run.attributes.font) : run.attributes.font;\n\n      if (string.length === 0) {\n        res.push({\n          start: 0,\n          end: 0,\n          attributes: {\n            font: defaultFont\n          }\n        });\n        break;\n      }\n\n      var chars = string.slice(run.start, run.end);\n\n      for (var j = 0; j < chars.length; j += 1) {\n        var char = chars[j];\n        var codePoint = char.codePointAt();\n        var shouldFallback = shouldFallbackToFont(codePoint, defaultFont); // If the default font does not have a glyph and the fallback font does, we use it\n\n        var font = shouldFallback ? getFallbackFont() : defaultFont;\n        var fontSize = getFontSize(run); // If anything that would impact res has changed, update it\n\n        if (font !== lastFont || fontSize !== lastFontSize || font.unitsPerEm !== lastFont.unitsPerEm) {\n          if (lastFont) {\n            res.push({\n              start: lastIndex,\n              end: index,\n              attributes: {\n                font: lastFont,\n                scale: lastFontSize / lastFont.unitsPerEm\n              }\n            });\n          }\n\n          lastFont = font;\n          lastFontSize = fontSize;\n          lastIndex = index;\n        }\n\n        index += char.length;\n      }\n    }\n\n    if (lastIndex < string.length) {\n      var _fontSize = getFontSize(R.last(runs));\n\n      res.push({\n        start: lastIndex,\n        end: string.length,\n        attributes: {\n          font: lastFont,\n          scale: _fontSize / lastFont.unitsPerEm\n        }\n      });\n    }\n\n    return {\n      string: string,\n      runs: res\n    };\n  };\n};\n\nvar _default = fontSubstitution;\nexports.default = _default;","map":{"version":3,"sources":["D:/pelatihan/batch 27/Literature/client/node_modules/@react-pdf/layout/lib/text/fontSubstitution.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","default","R","_standardFont","fontCache","IGNORED_CODE_POINTS","getFontSize","pathOr","getOrCreateFont","name","font","getFallbackFont","shouldFallbackToFont","codePoint","includes","hasGlyphForCodePoint","fontSubstitution","_ref","string","runs","lastFont","lastFontSize","lastIndex","index","res","i","length","run","defaultFont","attributes","push","start","end","chars","slice","j","char","codePointAt","shouldFallback","fontSize","unitsPerEm","scale","_fontSize","last","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _standardFont = _interopRequireDefault(require(\"./standardFont\"));\n\nvar fontCache = {};\nvar IGNORED_CODE_POINTS = [173];\nvar getFontSize = R.pathOr(12, ['attributes', 'fontSize']);\n\nvar getOrCreateFont = function getOrCreateFont(name) {\n  if (fontCache[name]) return fontCache[name];\n  var font = new _standardFont.default(name);\n  fontCache[name] = font;\n  return font;\n};\n\nvar getFallbackFont = function getFallbackFont() {\n  return getOrCreateFont('Helvetica');\n};\n\nvar shouldFallbackToFont = function shouldFallbackToFont(codePoint, font) {\n  return !font || !IGNORED_CODE_POINTS.includes(codePoint) && !font.hasGlyphForCodePoint(codePoint) && getFallbackFont().hasGlyphForCodePoint(codePoint);\n};\n\nvar fontSubstitution = function fontSubstitution() {\n  return function (_ref) {\n    var string = _ref.string,\n        runs = _ref.runs;\n    var lastFont = null;\n    var lastFontSize = null;\n    var lastIndex = 0;\n    var index = 0;\n    var res = [];\n\n    for (var i = 0; i < runs.length; i += 1) {\n      var run = runs[i];\n      var defaultFont = typeof run.attributes.font === 'string' ? getOrCreateFont(run.attributes.font) : run.attributes.font;\n\n      if (string.length === 0) {\n        res.push({\n          start: 0,\n          end: 0,\n          attributes: {\n            font: defaultFont\n          }\n        });\n        break;\n      }\n\n      var chars = string.slice(run.start, run.end);\n\n      for (var j = 0; j < chars.length; j += 1) {\n        var char = chars[j];\n        var codePoint = char.codePointAt();\n        var shouldFallback = shouldFallbackToFont(codePoint, defaultFont); // If the default font does not have a glyph and the fallback font does, we use it\n\n        var font = shouldFallback ? getFallbackFont() : defaultFont;\n        var fontSize = getFontSize(run); // If anything that would impact res has changed, update it\n\n        if (font !== lastFont || fontSize !== lastFontSize || font.unitsPerEm !== lastFont.unitsPerEm) {\n          if (lastFont) {\n            res.push({\n              start: lastIndex,\n              end: index,\n              attributes: {\n                font: lastFont,\n                scale: lastFontSize / lastFont.unitsPerEm\n              }\n            });\n          }\n\n          lastFont = font;\n          lastFontSize = fontSize;\n          lastIndex = index;\n        }\n\n        index += char.length;\n      }\n    }\n\n    if (lastIndex < string.length) {\n      var _fontSize = getFontSize(R.last(runs));\n\n      res.push({\n        start: lastIndex,\n        end: string.length,\n        attributes: {\n          font: lastFont,\n          scale: _fontSize / lastFont.unitsPerEm\n        }\n      });\n    }\n\n    return {\n      string: string,\n      runs: res\n    };\n  };\n};\n\nvar _default = fontSubstitution;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}