{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _append = _interopRequireDefault(require(\"../attributedString/append\"));\n\nvar _trim = _interopRequireDefault(require(\"../attributedString/trim\"));\n\nvar ELLIPSIS_UNICODE = 8230;\nvar ELLIPSIS_STRING = String.fromCharCode(ELLIPSIS_UNICODE);\n/**\n * Get ellipsis codepoint. This may be different in standard and embedded fonts\n *\n * @param  {number}  font\n * @return {Object} ellipsis codepoint\n */\n\nvar getEllipsisCodePoint = function getEllipsisCodePoint(font) {\n  if (!font.encode) return ELLIPSIS_UNICODE;\n\n  var _font$encode = font.encode(ELLIPSIS_STRING),\n      codePoints = _font$encode[0];\n\n  return parseInt(codePoints[0], 16);\n};\n/**\n * Trucante block with ellipsis\n *\n * @param  {number}  lines quantity\n * @param  {Object}  paragraph block\n * @return {Object} sliced paragraph block\n */\n\n\nvar truncate = function truncate(block) {\n  var runs = R.propOr([], 'runs', R.last(block));\n  var font = R.path(['attributes', 'font'], R.last(runs));\n\n  if (font) {\n    var codePoint = getEllipsisCodePoint(font);\n    var glyph = font.glyphForCodePoint(codePoint);\n    return R.adjust(-1, R.compose((0, _append.default)(glyph), _trim.default))(block);\n  }\n\n  return block;\n};\n\nvar _default = truncate;\nexports.default = _default;","map":{"version":3,"sources":["D:/pelatihan/batch 27/Literature/client/node_modules/@react-pdf/textkit/lib/block/truncate.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","default","R","_append","_trim","ELLIPSIS_UNICODE","ELLIPSIS_STRING","String","fromCharCode","getEllipsisCodePoint","font","encode","_font$encode","codePoints","parseInt","truncate","block","runs","propOr","last","path","codePoint","glyph","glyphForCodePoint","adjust","compose","_default"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,+CAAD,CAArC;;AAEAE,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,CAAC,GAAGJ,uBAAuB,CAACD,OAAO,CAAC,OAAD,CAAR,CAA/B;;AAEA,IAAIM,OAAO,GAAGP,sBAAsB,CAACC,OAAO,CAAC,4BAAD,CAAR,CAApC;;AAEA,IAAIO,KAAK,GAAGR,sBAAsB,CAACC,OAAO,CAAC,0BAAD,CAAR,CAAlC;;AAEA,IAAIQ,gBAAgB,GAAG,IAAvB;AACA,IAAIC,eAAe,GAAGC,MAAM,CAACC,YAAP,CAAoBH,gBAApB,CAAtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAII,oBAAoB,GAAG,SAASA,oBAAT,CAA8BC,IAA9B,EAAoC;AAC7D,MAAI,CAACA,IAAI,CAACC,MAAV,EAAkB,OAAON,gBAAP;;AAElB,MAAIO,YAAY,GAAGF,IAAI,CAACC,MAAL,CAAYL,eAAZ,CAAnB;AAAA,MACIO,UAAU,GAAGD,YAAY,CAAC,CAAD,CAD7B;;AAGA,SAAOE,QAAQ,CAACD,UAAU,CAAC,CAAD,CAAX,EAAgB,EAAhB,CAAf;AACD,CAPD;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIE,QAAQ,GAAG,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;AACtC,MAAIC,IAAI,GAAGf,CAAC,CAACgB,MAAF,CAAS,EAAT,EAAa,MAAb,EAAqBhB,CAAC,CAACiB,IAAF,CAAOH,KAAP,CAArB,CAAX;AACA,MAAIN,IAAI,GAAGR,CAAC,CAACkB,IAAF,CAAO,CAAC,YAAD,EAAe,MAAf,CAAP,EAA+BlB,CAAC,CAACiB,IAAF,CAAOF,IAAP,CAA/B,CAAX;;AAEA,MAAIP,IAAJ,EAAU;AACR,QAAIW,SAAS,GAAGZ,oBAAoB,CAACC,IAAD,CAApC;AACA,QAAIY,KAAK,GAAGZ,IAAI,CAACa,iBAAL,CAAuBF,SAAvB,CAAZ;AACA,WAAOnB,CAAC,CAACsB,MAAF,CAAS,CAAC,CAAV,EAAatB,CAAC,CAACuB,OAAF,CAAU,CAAC,GAAGtB,OAAO,CAACF,OAAZ,EAAqBqB,KAArB,CAAV,EAAuClB,KAAK,CAACH,OAA7C,CAAb,EAAoEe,KAApE,CAAP;AACD;;AAED,SAAOA,KAAP;AACD,CAXD;;AAaA,IAAIU,QAAQ,GAAGX,QAAf;AACAhB,OAAO,CAACE,OAAR,GAAkByB,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _append = _interopRequireDefault(require(\"../attributedString/append\"));\n\nvar _trim = _interopRequireDefault(require(\"../attributedString/trim\"));\n\nvar ELLIPSIS_UNICODE = 8230;\nvar ELLIPSIS_STRING = String.fromCharCode(ELLIPSIS_UNICODE);\n/**\n * Get ellipsis codepoint. This may be different in standard and embedded fonts\n *\n * @param  {number}  font\n * @return {Object} ellipsis codepoint\n */\n\nvar getEllipsisCodePoint = function getEllipsisCodePoint(font) {\n  if (!font.encode) return ELLIPSIS_UNICODE;\n\n  var _font$encode = font.encode(ELLIPSIS_STRING),\n      codePoints = _font$encode[0];\n\n  return parseInt(codePoints[0], 16);\n};\n/**\n * Trucante block with ellipsis\n *\n * @param  {number}  lines quantity\n * @param  {Object}  paragraph block\n * @return {Object} sliced paragraph block\n */\n\n\nvar truncate = function truncate(block) {\n  var runs = R.propOr([], 'runs', R.last(block));\n  var font = R.path(['attributes', 'font'], R.last(runs));\n\n  if (font) {\n    var codePoint = getEllipsisCodePoint(font);\n    var glyph = font.glyphForCodePoint(codePoint);\n    return R.adjust(-1, R.compose((0, _append.default)(glyph), _trim.default))(block);\n  }\n\n  return block;\n};\n\nvar _default = truncate;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}