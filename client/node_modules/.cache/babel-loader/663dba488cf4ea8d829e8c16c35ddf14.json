{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar parse = function parse(transformString) {\n  var transforms = transformString.trim().split(/\\) |\\)/); // Handle \"initial\", \"inherit\", \"unset\".\n\n  if (transforms.length === 1) {\n    return [[transforms[0], true]];\n  }\n\n  var parsed = [];\n\n  for (var i = 0; i < transforms.length; i += 1) {\n    var transform = transforms[i];\n\n    if (transform) {\n      var _transform$split = transform.split('('),\n          name = _transform$split[0],\n          rawValue = _transform$split[1];\n\n      var splitChar = rawValue.indexOf(',') >= 0 ? ',' : ' ';\n      var value = rawValue.split(splitChar).map(function (val) {\n        return val.trim();\n      });\n      parsed.push({\n        operation: name,\n        value: value\n      });\n    }\n  }\n\n  return parsed;\n};\n\nvar normalizeTransformOperation = function normalizeTransformOperation(_ref) {\n  var operation = _ref.operation,\n      value = _ref.value;\n\n  switch (operation) {\n    case 'scale':\n      {\n        var _value$map = value.map(function (num) {\n          return Number.parseFloat(num);\n        }),\n            scaleX = _value$map[0],\n            _value$map$ = _value$map[1],\n            scaleY = _value$map$ === void 0 ? scaleX : _value$map$;\n\n        return {\n          operation: 'scale',\n          value: [scaleX, scaleY]\n        };\n      }\n\n    case 'scaleX':\n      {\n        return {\n          operation: 'scale',\n          value: [Number.parseFloat(value), 1]\n        };\n      }\n\n    case 'scaleY':\n      {\n        return {\n          operation: 'scale',\n          value: [1, Number.parseFloat(value)]\n        };\n      }\n\n    case 'rotate':\n      {\n        var unitsRegexp = /(-?\\d*\\.?\\d*)(\\w*)?/i;\n\n        var _unitsRegexp$exec = unitsRegexp.exec(value),\n            angle = _unitsRegexp$exec[1],\n            unit = _unitsRegexp$exec[2];\n\n        var number = Number.parseFloat(angle);\n        return {\n          operation: 'rotate',\n          value: [unit === 'rad' ? number * 180 / Math.PI : number]\n        };\n      }\n\n    case 'translate':\n      {\n        return {\n          operation: 'translate',\n          value: value.map(function (num) {\n            return Number.parseFloat(num);\n          })\n        };\n      }\n\n    case 'translateX':\n      {\n        return {\n          operation: 'translate',\n          value: [Number.parseFloat(value), 0]\n        };\n      }\n\n    case 'translateY':\n      {\n        return {\n          operation: 'translate',\n          value: [0, Number.parseFloat(value)]\n        };\n      }\n\n    default:\n      {\n        return {\n          operation: operation,\n          value: value.map(function (num) {\n            return Number.parseFloat(num);\n          })\n        };\n      }\n  }\n};\n\nvar normalize = function normalize(operations) {\n  return operations.map(function (operation) {\n    return normalizeTransformOperation(operation);\n  });\n};\n\nvar processTransform = function processTransform(value) {\n  if (typeof value !== 'string') return value;\n  return normalize(parse(value));\n};\n\nvar _default = processTransform;\nexports.default = _default;","map":{"version":3,"sources":["D:/pelatihan/batch 27/Literature/client/node_modules/@react-pdf/stylesheet/lib/transform/transform.js"],"names":["exports","__esModule","default","parse","transformString","transforms","trim","split","length","parsed","i","transform","_transform$split","name","rawValue","splitChar","indexOf","value","map","val","push","operation","normalizeTransformOperation","_ref","_value$map","num","Number","parseFloat","scaleX","_value$map$","scaleY","unitsRegexp","_unitsRegexp$exec","exec","angle","unit","number","Math","PI","normalize","operations","processTransform","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar parse = function parse(transformString) {\n  var transforms = transformString.trim().split(/\\) |\\)/); // Handle \"initial\", \"inherit\", \"unset\".\n\n  if (transforms.length === 1) {\n    return [[transforms[0], true]];\n  }\n\n  var parsed = [];\n\n  for (var i = 0; i < transforms.length; i += 1) {\n    var transform = transforms[i];\n\n    if (transform) {\n      var _transform$split = transform.split('('),\n          name = _transform$split[0],\n          rawValue = _transform$split[1];\n\n      var splitChar = rawValue.indexOf(',') >= 0 ? ',' : ' ';\n      var value = rawValue.split(splitChar).map(function (val) {\n        return val.trim();\n      });\n      parsed.push({\n        operation: name,\n        value: value\n      });\n    }\n  }\n\n  return parsed;\n};\n\nvar normalizeTransformOperation = function normalizeTransformOperation(_ref) {\n  var operation = _ref.operation,\n      value = _ref.value;\n\n  switch (operation) {\n    case 'scale':\n      {\n        var _value$map = value.map(function (num) {\n          return Number.parseFloat(num);\n        }),\n            scaleX = _value$map[0],\n            _value$map$ = _value$map[1],\n            scaleY = _value$map$ === void 0 ? scaleX : _value$map$;\n\n        return {\n          operation: 'scale',\n          value: [scaleX, scaleY]\n        };\n      }\n\n    case 'scaleX':\n      {\n        return {\n          operation: 'scale',\n          value: [Number.parseFloat(value), 1]\n        };\n      }\n\n    case 'scaleY':\n      {\n        return {\n          operation: 'scale',\n          value: [1, Number.parseFloat(value)]\n        };\n      }\n\n    case 'rotate':\n      {\n        var unitsRegexp = /(-?\\d*\\.?\\d*)(\\w*)?/i;\n\n        var _unitsRegexp$exec = unitsRegexp.exec(value),\n            angle = _unitsRegexp$exec[1],\n            unit = _unitsRegexp$exec[2];\n\n        var number = Number.parseFloat(angle);\n        return {\n          operation: 'rotate',\n          value: [unit === 'rad' ? number * 180 / Math.PI : number]\n        };\n      }\n\n    case 'translate':\n      {\n        return {\n          operation: 'translate',\n          value: value.map(function (num) {\n            return Number.parseFloat(num);\n          })\n        };\n      }\n\n    case 'translateX':\n      {\n        return {\n          operation: 'translate',\n          value: [Number.parseFloat(value), 0]\n        };\n      }\n\n    case 'translateY':\n      {\n        return {\n          operation: 'translate',\n          value: [0, Number.parseFloat(value)]\n        };\n      }\n\n    default:\n      {\n        return {\n          operation: operation,\n          value: value.map(function (num) {\n            return Number.parseFloat(num);\n          })\n        };\n      }\n  }\n};\n\nvar normalize = function normalize(operations) {\n  return operations.map(function (operation) {\n    return normalizeTransformOperation(operation);\n  });\n};\n\nvar processTransform = function processTransform(value) {\n  if (typeof value !== 'string') return value;\n  return normalize(parse(value));\n};\n\nvar _default = processTransform;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}