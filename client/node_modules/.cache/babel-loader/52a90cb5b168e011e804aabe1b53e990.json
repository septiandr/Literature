{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar isType = R.propEq('type');\nvar isLink = isType(P.Link);\nvar isText = isType(P.Text);\nvar isTextInstance = isType(P.TextInstance);\n/**\n * Checks if node has render prop\n *\n * @param {Object} node\n * @returns {Boolean} has render prop?\n */\n\nvar hasRenderProp = R.hasPath(['props', 'render']);\n/**\n * Checks if node is text type (Text or TextInstance)\n *\n * @param {Object} node\n * @returns {Boolean} are all children text instances?\n */\n\nvar isTextType = R.either(isText, isTextInstance);\n/**\n * Checks if is tet link that needs to be wrapped in Text\n *\n * @param {Object} node\n * @returns {Boolean} are all children text instances?\n */\n\nvar isTextLink = function isTextLink(node) {\n  var children = node.children || []; // Text string inside a Link\n\n  if (children.every(isTextInstance)) return true; // Text node inside a Link\n\n  if (children.every(isText)) return false;\n  return children.every(isTextType);\n};\n/**\n * Wraps node children inside Text node\n *\n * @param {Object} node\n * @returns {Boolean} node with intermediate Text child\n */\n\n\nvar wrapText = function wrapText(node) {\n  var textElement = {\n    type: P.Text,\n    props: {},\n    style: {},\n    box: {},\n    children: node.children\n  };\n  return R.assoc('children', [textElement], node);\n};\n\nvar transformLink = function transformLink(node) {\n  if (!isLink(node)) return node; // If has render prop substitute the instance by a Text, that will\n  // ultimately render the inline Link via the textkit PDF renderer.\n\n  if (hasRenderProp(node)) return R.assoc('type', P.Text, node); // If is a text link (either contains Text or TextInstalce), wrap it\n  // inside a Text element so styles are applied correctly\n\n  if (isTextLink(node)) return wrapText(node);\n  return node;\n};\n/**\n * Transforms Link layout to correctly render text and dynamic rendered links\n *\n * @param {Object} node\n * @returns {Object} node with link substitution\n */\n\n\nvar resolveLinkSubstitution = function resolveLinkSubstitution(node) {\n  var resolveChild = R.compose(transformLink, resolveLinkSubstitution);\n  return R.evolve({\n    children: R.map(resolveChild)\n  })(node);\n};\n\nvar _default = resolveLinkSubstitution;\nexports.default = _default;","map":{"version":3,"sources":["D:/pelatihan/batch 27/Literature/client/node_modules/@react-pdf/layout/lib/steps/resolveLinkSubstitution.js"],"names":["_interopRequireWildcard","require","exports","__esModule","default","R","P","isType","propEq","isLink","Link","isText","Text","isTextInstance","TextInstance","hasRenderProp","hasPath","isTextType","either","isTextLink","node","children","every","wrapText","textElement","type","props","style","box","assoc","transformLink","resolveLinkSubstitution","resolveChild","compose","evolve","map","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar P = _interopRequireWildcard(require(\"@react-pdf/primitives\"));\n\nvar isType = R.propEq('type');\nvar isLink = isType(P.Link);\nvar isText = isType(P.Text);\nvar isTextInstance = isType(P.TextInstance);\n/**\n * Checks if node has render prop\n *\n * @param {Object} node\n * @returns {Boolean} has render prop?\n */\n\nvar hasRenderProp = R.hasPath(['props', 'render']);\n/**\n * Checks if node is text type (Text or TextInstance)\n *\n * @param {Object} node\n * @returns {Boolean} are all children text instances?\n */\n\nvar isTextType = R.either(isText, isTextInstance);\n/**\n * Checks if is tet link that needs to be wrapped in Text\n *\n * @param {Object} node\n * @returns {Boolean} are all children text instances?\n */\n\nvar isTextLink = function isTextLink(node) {\n  var children = node.children || []; // Text string inside a Link\n\n  if (children.every(isTextInstance)) return true; // Text node inside a Link\n\n  if (children.every(isText)) return false;\n  return children.every(isTextType);\n};\n/**\n * Wraps node children inside Text node\n *\n * @param {Object} node\n * @returns {Boolean} node with intermediate Text child\n */\n\n\nvar wrapText = function wrapText(node) {\n  var textElement = {\n    type: P.Text,\n    props: {},\n    style: {},\n    box: {},\n    children: node.children\n  };\n  return R.assoc('children', [textElement], node);\n};\n\nvar transformLink = function transformLink(node) {\n  if (!isLink(node)) return node; // If has render prop substitute the instance by a Text, that will\n  // ultimately render the inline Link via the textkit PDF renderer.\n\n  if (hasRenderProp(node)) return R.assoc('type', P.Text, node); // If is a text link (either contains Text or TextInstalce), wrap it\n  // inside a Text element so styles are applied correctly\n\n  if (isTextLink(node)) return wrapText(node);\n  return node;\n};\n/**\n * Transforms Link layout to correctly render text and dynamic rendered links\n *\n * @param {Object} node\n * @returns {Object} node with link substitution\n */\n\n\nvar resolveLinkSubstitution = function resolveLinkSubstitution(node) {\n  var resolveChild = R.compose(transformLink, resolveLinkSubstitution);\n  return R.evolve({\n    children: R.map(resolveChild)\n  })(node);\n};\n\nvar _default = resolveLinkSubstitution;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}