{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _matchPercent = _interopRequireDefault(require(\"../utils/matchPercent\"));\n/**\n *\n * @param {Object} container width and height\n * @param {String | Number} value border radius value\n * @returns {Number} fixed border radius value\n */\n\n\nvar resolveRadius = function resolveRadius(container) {\n  return function (value) {\n    var match = (0, _matchPercent.default)(value);\n    return match ? match.percent * Math.min(container.width, container.height) : value;\n  };\n};\n/**\n * Transforms percent border radius into fixed values\n *\n * @param {Object} node\n * @returns {Object} node\n */\n\n\nvar resolvePercentRadius = function resolvePercentRadius(node) {\n  return R.evolve({\n    children: R.map(resolvePercentRadius),\n    style: R.evolve({\n      borderTopLeftRadius: resolveRadius(node.box),\n      borderTopRightRadius: resolveRadius(node.box),\n      borderBottomRightRadius: resolveRadius(node.box),\n      borderBottomLeftRadius: resolveRadius(node.box)\n    })\n  })(node);\n};\n\nvar _default = resolvePercentRadius;\nexports.default = _default;","map":{"version":3,"sources":["D:/pelatihan/batch 27/Literature/client/node_modules/@react-pdf/layout/lib/steps/resolvePercentRadius.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","default","R","_matchPercent","resolveRadius","container","value","match","percent","Math","min","width","height","resolvePercentRadius","node","evolve","children","map","style","borderTopLeftRadius","box","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","_default"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,+CAAD,CAArC;;AAEAE,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,CAAC,GAAGJ,uBAAuB,CAACD,OAAO,CAAC,OAAD,CAAR,CAA/B;;AAEA,IAAIM,aAAa,GAAGP,sBAAsB,CAACC,OAAO,CAAC,uBAAD,CAAR,CAA1C;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIO,aAAa,GAAG,SAASA,aAAT,CAAuBC,SAAvB,EAAkC;AACpD,SAAO,UAAUC,KAAV,EAAiB;AACtB,QAAIC,KAAK,GAAG,CAAC,GAAGJ,aAAa,CAACF,OAAlB,EAA2BK,KAA3B,CAAZ;AACA,WAAOC,KAAK,GAAGA,KAAK,CAACC,OAAN,GAAgBC,IAAI,CAACC,GAAL,CAASL,SAAS,CAACM,KAAnB,EAA0BN,SAAS,CAACO,MAApC,CAAnB,GAAiEN,KAA7E;AACD,GAHD;AAID,CALD;AAMA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIO,oBAAoB,GAAG,SAASA,oBAAT,CAA8BC,IAA9B,EAAoC;AAC7D,SAAOZ,CAAC,CAACa,MAAF,CAAS;AACdC,IAAAA,QAAQ,EAAEd,CAAC,CAACe,GAAF,CAAMJ,oBAAN,CADI;AAEdK,IAAAA,KAAK,EAAEhB,CAAC,CAACa,MAAF,CAAS;AACdI,MAAAA,mBAAmB,EAAEf,aAAa,CAACU,IAAI,CAACM,GAAN,CADpB;AAEdC,MAAAA,oBAAoB,EAAEjB,aAAa,CAACU,IAAI,CAACM,GAAN,CAFrB;AAGdE,MAAAA,uBAAuB,EAAElB,aAAa,CAACU,IAAI,CAACM,GAAN,CAHxB;AAIdG,MAAAA,sBAAsB,EAAEnB,aAAa,CAACU,IAAI,CAACM,GAAN;AAJvB,KAAT;AAFO,GAAT,EAQJN,IARI,CAAP;AASD,CAVD;;AAYA,IAAIU,QAAQ,GAAGX,oBAAf;AACAd,OAAO,CAACE,OAAR,GAAkBuB,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _matchPercent = _interopRequireDefault(require(\"../utils/matchPercent\"));\n\n/**\n *\n * @param {Object} container width and height\n * @param {String | Number} value border radius value\n * @returns {Number} fixed border radius value\n */\nvar resolveRadius = function resolveRadius(container) {\n  return function (value) {\n    var match = (0, _matchPercent.default)(value);\n    return match ? match.percent * Math.min(container.width, container.height) : value;\n  };\n};\n/**\n * Transforms percent border radius into fixed values\n *\n * @param {Object} node\n * @returns {Object} node\n */\n\n\nvar resolvePercentRadius = function resolvePercentRadius(node) {\n  return R.evolve({\n    children: R.map(resolvePercentRadius),\n    style: R.evolve({\n      borderTopLeftRadius: resolveRadius(node.box),\n      borderTopRightRadius: resolveRadius(node.box),\n      borderBottomRightRadius: resolveRadius(node.box),\n      borderBottomLeftRadius: resolveRadius(node.box)\n    })\n  })(node);\n};\n\nvar _default = resolvePercentRadius;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}