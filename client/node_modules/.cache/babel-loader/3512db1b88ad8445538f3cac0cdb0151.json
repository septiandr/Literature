{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _yoga = _interopRequireDefault(require(\"@react-pdf/yoga\"));\n\nvar isRow = R.equals('row');\nvar isRowReverse = R.equals('row-reverse');\nvar isColumnReverse = R.equals('column-reverse');\n/**\n * Set flex direction attribute to node's Yoga instance\n *\n * @param {String} flex direction value\n * @param {Object} node instance\n * @return {Object} node instance\n */\n\nvar setFlexDirection = function setFlexDirection(value) {\n  return R.tap(function (node) {\n    var yogaNode = node._yogaNode;\n\n    if (yogaNode) {\n      var yogaValue = R.cond([[isRow, R.always(_yoga.default.FLEX_DIRECTION_ROW)], [isRowReverse, R.always(_yoga.default.FLEX_DIRECTION_ROW_REVERSE)], [isColumnReverse, R.always(_yoga.default.FLEX_DIRECTION_COLUMN_REVERSE)], [R.T, R.always(_yoga.default.FLEX_DIRECTION_COLUMN)]])(value);\n      yogaNode.setFlexDirection(yogaValue);\n    }\n  });\n};\n\nvar _default = setFlexDirection;\nexports.default = _default;","map":{"version":3,"sources":["D:/pelatihan/batch 27/Literature/client/node_modules/@react-pdf/layout/lib/node/setFlexDirection.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","default","R","_yoga","isRow","equals","isRowReverse","isColumnReverse","setFlexDirection","value","tap","node","yogaNode","_yogaNode","yogaValue","cond","always","FLEX_DIRECTION_ROW","FLEX_DIRECTION_ROW_REVERSE","FLEX_DIRECTION_COLUMN_REVERSE","T","FLEX_DIRECTION_COLUMN","_default"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,+CAAD,CAArC;;AAEAE,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,CAAC,GAAGJ,uBAAuB,CAACD,OAAO,CAAC,OAAD,CAAR,CAA/B;;AAEA,IAAIM,KAAK,GAAGP,sBAAsB,CAACC,OAAO,CAAC,iBAAD,CAAR,CAAlC;;AAEA,IAAIO,KAAK,GAAGF,CAAC,CAACG,MAAF,CAAS,KAAT,CAAZ;AACA,IAAIC,YAAY,GAAGJ,CAAC,CAACG,MAAF,CAAS,aAAT,CAAnB;AACA,IAAIE,eAAe,GAAGL,CAAC,CAACG,MAAF,CAAS,gBAAT,CAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIG,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,KAA1B,EAAiC;AACtD,SAAOP,CAAC,CAACQ,GAAF,CAAM,UAAUC,IAAV,EAAgB;AAC3B,QAAIC,QAAQ,GAAGD,IAAI,CAACE,SAApB;;AAEA,QAAID,QAAJ,EAAc;AACZ,UAAIE,SAAS,GAAGZ,CAAC,CAACa,IAAF,CAAO,CAAC,CAACX,KAAD,EAAQF,CAAC,CAACc,MAAF,CAASb,KAAK,CAACF,OAAN,CAAcgB,kBAAvB,CAAR,CAAD,EAAsD,CAACX,YAAD,EAAeJ,CAAC,CAACc,MAAF,CAASb,KAAK,CAACF,OAAN,CAAciB,0BAAvB,CAAf,CAAtD,EAA0H,CAACX,eAAD,EAAkBL,CAAC,CAACc,MAAF,CAASb,KAAK,CAACF,OAAN,CAAckB,6BAAvB,CAAlB,CAA1H,EAAoM,CAACjB,CAAC,CAACkB,CAAH,EAAMlB,CAAC,CAACc,MAAF,CAASb,KAAK,CAACF,OAAN,CAAcoB,qBAAvB,CAAN,CAApM,CAAP,EAAkQZ,KAAlQ,CAAhB;AACAG,MAAAA,QAAQ,CAACJ,gBAAT,CAA0BM,SAA1B;AACD;AACF,GAPM,CAAP;AAQD,CATD;;AAWA,IAAIQ,QAAQ,GAAGd,gBAAf;AACAT,OAAO,CAACE,OAAR,GAAkBqB,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _yoga = _interopRequireDefault(require(\"@react-pdf/yoga\"));\n\nvar isRow = R.equals('row');\nvar isRowReverse = R.equals('row-reverse');\nvar isColumnReverse = R.equals('column-reverse');\n/**\n * Set flex direction attribute to node's Yoga instance\n *\n * @param {String} flex direction value\n * @param {Object} node instance\n * @return {Object} node instance\n */\n\nvar setFlexDirection = function setFlexDirection(value) {\n  return R.tap(function (node) {\n    var yogaNode = node._yogaNode;\n\n    if (yogaNode) {\n      var yogaValue = R.cond([[isRow, R.always(_yoga.default.FLEX_DIRECTION_ROW)], [isRowReverse, R.always(_yoga.default.FLEX_DIRECTION_ROW_REVERSE)], [isColumnReverse, R.always(_yoga.default.FLEX_DIRECTION_COLUMN_REVERSE)], [R.T, R.always(_yoga.default.FLEX_DIRECTION_COLUMN)]])(value);\n      yogaNode.setFlexDirection(yogaValue);\n    }\n  });\n};\n\nvar _default = setFlexDirection;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}