{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\")); // Ref: https://www.w3.org/TR/css-backgrounds-3/#borders\n// This constant is used to approximate a symmetrical arc using a cubic Bezier curve.\n\n\nvar KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\n\nvar clipBorderTop = function clipBorderTop(ctx, layout, style, rtr, rtl) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderTopWidth = style.borderTopWidth,\n      borderRightWidth = style.borderRightWidth,\n      borderLeftWidth = style.borderLeftWidth; // Clip outer top border edge\n\n  ctx.moveTo(left + rtl, top);\n  ctx.lineTo(left + width - rtr, top); // Ellipse coefficients outer top right cap\n\n  var c0 = rtr * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + width - c0, top, left + width, top + c0, left + width, top + rtr); // Move down in case the margin exceedes the radius\n\n  var topRightYCoord = top + Math.max(borderTopWidth, rtr);\n  ctx.lineTo(left + width, topRightYCoord); // Clip inner top right cap\n\n  ctx.lineTo(left + width - borderRightWidth, topRightYCoord); // Ellipse coefficients inner top right cap\n\n  var innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);\n  var innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);\n  var c1 = innerTopRightRadiusX * (1.0 - KAPPA);\n  var c2 = innerTopRightRadiusY * (1.0 - KAPPA); // Clip inner top right cap\n\n  ctx.bezierCurveTo(left + width - borderRightWidth, top + borderTopWidth + c2, left + width - borderRightWidth - c1, top + borderTopWidth, left + width - borderRightWidth - innerTopRightRadiusX, top + borderTopWidth); // Clip inner top border edge\n\n  ctx.lineTo(left + Math.max(rtl, borderLeftWidth), top + borderTopWidth); // Ellipse coefficients inner top left cap\n\n  var innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);\n  var innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);\n  var c3 = innerTopLeftRadiusX * (1.0 - KAPPA);\n  var c4 = innerTopLeftRadiusY * (1.0 - KAPPA);\n  var topLeftYCoord = top + Math.max(borderTopWidth, rtl); // Clip inner top left cap\n\n  ctx.bezierCurveTo(left + borderLeftWidth + c3, top + borderTopWidth, left + borderLeftWidth, top + borderTopWidth + c4, left + borderLeftWidth, topLeftYCoord);\n  ctx.lineTo(left, topLeftYCoord); // Move down in case the margin exceedes the radius\n\n  ctx.lineTo(left, top + rtl); // Ellipse coefficients outer top left cap\n\n  var c5 = rtl * (1.0 - KAPPA); // Clip outer top left cap\n\n  ctx.bezierCurveTo(left, top + c5, left + c5, top, left + rtl, top);\n  ctx.closePath();\n  ctx.clip(); // Clip border top cap joins\n\n  if (borderRightWidth) {\n    var trSlope = -borderTopWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderLeftWidth) {\n    var _trSlope = -borderTopWidth / borderLeftWidth;\n\n    ctx.moveTo(left + width / 2, _trSlope * (-width / 2) + top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left + width, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nvar fillBorderTop = function fillBorderTop(ctx, layout, style, rtr, rtl) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width;\n  var borderTopColor = style.borderTopColor,\n      borderTopWidth = style.borderTopWidth,\n      borderTopStyle = style.borderTopStyle,\n      borderRightWidth = style.borderRightWidth,\n      borderLeftWidth = style.borderLeftWidth;\n  var c0 = rtl * (1.0 - KAPPA);\n  var c1 = rtr * (1.0 - KAPPA);\n  ctx.moveTo(left, top + Math.max(rtl, borderTopWidth));\n  ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top);\n  ctx.lineTo(left + width - rtr, top);\n  ctx.bezierCurveTo(left + width - c1, top, left + width, top + c1, left + width, top + rtr);\n  ctx.strokeColor(borderTopColor);\n  ctx.lineWidth(Math.max(borderRightWidth, borderTopWidth, borderLeftWidth) * 2);\n\n  if (borderTopStyle === 'dashed') {\n    ctx.dash(borderTopWidth * 2, {\n      space: borderTopWidth * 1.2\n    });\n  } else if (borderTopStyle === 'dotted') {\n    ctx.dash(borderTopWidth, {\n      space: borderTopWidth * 1.2\n    });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nvar clipBorderRight = function clipBorderRight(ctx, layout, style, rtr, rbr) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderTopWidth = style.borderTopWidth,\n      borderRightWidth = style.borderRightWidth,\n      borderBottomWidth = style.borderBottomWidth; // Clip outer right border edge\n\n  ctx.moveTo(left + width, top + rtr);\n  ctx.lineTo(left + width, top + height - rbr); // Ellipse coefficients outer bottom right cap\n\n  var c0 = rbr * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + width, top + height - c0, left + width - c0, top + height, left + width - rbr, top + height); // Move left in case the margin exceedes the radius\n\n  var topBottomXCoord = left + width - Math.max(borderRightWidth, rbr);\n  ctx.lineTo(topBottomXCoord, top + height); // Clip inner bottom right cap\n\n  ctx.lineTo(topBottomXCoord, top + height - borderBottomWidth); // Ellipse coefficients inner bottom right cap\n\n  var innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);\n  var innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);\n  var c1 = innerBottomRightRadiusX * (1.0 - KAPPA);\n  var c2 = innerBottomRightRadiusY * (1.0 - KAPPA); // Clip inner top right cap\n\n  ctx.bezierCurveTo(left + width - borderRightWidth - c1, top + height - borderBottomWidth, left + width - borderRightWidth, top + height - borderBottomWidth - c2, left + width - borderRightWidth, top + height - Math.max(rbr, borderBottomWidth)); // Clip inner right border edge\n\n  ctx.lineTo(left + width - borderRightWidth, top + Math.max(rtr, borderTopWidth)); // Ellipse coefficients inner top right cap\n\n  var innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);\n  var innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);\n  var c3 = innerTopRightRadiusX * (1.0 - KAPPA);\n  var c4 = innerTopRightRadiusY * (1.0 - KAPPA);\n  var topRightXCoord = left + width - Math.max(rtr, borderRightWidth); // Clip inner top left cap\n\n  ctx.bezierCurveTo(left + width - borderRightWidth, top + borderTopWidth + c4, left + width - borderRightWidth - c3, top + borderTopWidth, topRightXCoord, top + borderTopWidth);\n  ctx.lineTo(topRightXCoord, top); // Move right in case the margin exceedes the radius\n\n  ctx.lineTo(left + width - rtr, top); // Ellipse coefficients outer top right cap\n\n  var c5 = rtr * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + width - c5, top, left + width, top + c5, left + width, top + rtr);\n  ctx.closePath();\n  ctx.clip(); // Clip border right cap joins\n\n  if (borderTopWidth) {\n    var trSlope = -borderTopWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderBottomWidth) {\n    var brSlope = borderBottomWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nvar fillBorderRight = function fillBorderRight(ctx, layout, style, rtr, rbr) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderRightColor = style.borderRightColor,\n      borderRightStyle = style.borderRightStyle,\n      borderRightWidth = style.borderRightWidth,\n      borderTopWidth = style.borderTopWidth,\n      borderBottomWidth = style.borderBottomWidth;\n  var c0 = rbr * (1.0 - KAPPA);\n  var c1 = rtr * (1.0 - KAPPA);\n  ctx.moveTo(left + width - rtr, top);\n  ctx.bezierCurveTo(left + width - c1, top, left + width, top + c1, left + width, top + rtr);\n  ctx.lineTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(left + width, top + height - c0, left + width - c0, top + height, left + width - rbr, top + height);\n  ctx.strokeColor(borderRightColor);\n  ctx.lineWidth(Math.max(borderRightWidth, borderTopWidth, borderBottomWidth) * 2);\n\n  if (borderRightStyle === 'dashed') {\n    ctx.dash(borderRightWidth * 2, {\n      space: borderRightWidth * 1.2\n    });\n  } else if (borderRightStyle === 'dotted') {\n    ctx.dash(borderRightWidth, {\n      space: borderRightWidth * 1.2\n    });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nvar clipBorderBottom = function clipBorderBottom(ctx, layout, style, rbl, rbr) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderBottomWidth = style.borderBottomWidth,\n      borderRightWidth = style.borderRightWidth,\n      borderLeftWidth = style.borderLeftWidth; // Clip outer top border edge\n\n  ctx.moveTo(left + width - rbr, top + height);\n  ctx.lineTo(left + rbl, top + height); // Ellipse coefficients outer top right cap\n\n  var c0 = rbl * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl); // Move up in case the margin exceedes the radius\n\n  var bottomLeftYCoord = top + height - Math.max(borderBottomWidth, rbl);\n  ctx.lineTo(left, bottomLeftYCoord); // Clip inner bottom left cap\n\n  ctx.lineTo(left + borderLeftWidth, bottomLeftYCoord); // Ellipse coefficients inner top right cap\n\n  var innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);\n  var innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);\n  var c1 = innerBottomLeftRadiusX * (1.0 - KAPPA);\n  var c2 = innerBottomLeftRadiusY * (1.0 - KAPPA); // Clip inner bottom left cap\n\n  ctx.bezierCurveTo(left + borderLeftWidth, top + height - borderBottomWidth - c2, left + borderLeftWidth + c1, top + height - borderBottomWidth, left + borderLeftWidth + innerBottomLeftRadiusX, top + height - borderBottomWidth); // Clip inner bottom border edge\n\n  ctx.lineTo(left + width - Math.max(rbr, borderRightWidth), top + height - borderBottomWidth); // Ellipse coefficients inner top left cap\n\n  var innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);\n  var innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);\n  var c3 = innerBottomRightRadiusX * (1.0 - KAPPA);\n  var c4 = innerBottomRightRadiusY * (1.0 - KAPPA);\n  var bottomRightYCoord = top + height - Math.max(borderBottomWidth, rbr); // Clip inner top left cap\n\n  ctx.bezierCurveTo(left + width - borderRightWidth - c3, top + height - borderBottomWidth, left + width - borderRightWidth, top + height - borderBottomWidth - c4, left + width - borderRightWidth, bottomRightYCoord);\n  ctx.lineTo(left + width, bottomRightYCoord); // Move down in case the margin exceedes the radius\n\n  ctx.lineTo(left + width, top + height - rbr); // Ellipse coefficients outer top left cap\n\n  var c5 = rbr * (1.0 - KAPPA); // Clip outer top left cap\n\n  ctx.bezierCurveTo(left + width, top + height - c5, left + width - c5, top + height, left + width - rbr, top + height);\n  ctx.closePath();\n  ctx.clip(); // Clip border bottom cap joins\n\n  if (borderRightWidth) {\n    var brSlope = borderBottomWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderLeftWidth) {\n    var trSlope = -borderBottomWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left + width, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nvar fillBorderBottom = function fillBorderBottom(ctx, layout, style, rbl, rbr) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderBottomColor = style.borderBottomColor,\n      borderBottomStyle = style.borderBottomStyle,\n      borderBottomWidth = style.borderBottomWidth,\n      borderRightWidth = style.borderRightWidth,\n      borderLeftWidth = style.borderLeftWidth;\n  var c0 = rbl * (1.0 - KAPPA);\n  var c1 = rbr * (1.0 - KAPPA);\n  ctx.moveTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(left + width, top + height - c1, left + width - c1, top + height, left + width - rbr, top + height);\n  ctx.lineTo(left + rbl, top + height);\n  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);\n  ctx.strokeColor(borderBottomColor);\n  ctx.lineWidth(Math.max(borderBottomWidth, borderRightWidth, borderLeftWidth) * 2);\n\n  if (borderBottomStyle === 'dashed') {\n    ctx.dash(borderBottomWidth * 2, {\n      space: borderBottomWidth * 1.2\n    });\n  } else if (borderBottomStyle === 'dotted') {\n    ctx.dash(borderBottomWidth, {\n      space: borderBottomWidth * 1.2\n    });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nvar clipBorderLeft = function clipBorderLeft(ctx, layout, style, rbl, rtl) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderTopWidth = style.borderTopWidth,\n      borderLeftWidth = style.borderLeftWidth,\n      borderBottomWidth = style.borderBottomWidth; // Clip outer left border edge\n\n  ctx.moveTo(left, top + height - rbl);\n  ctx.lineTo(left, top + rtl); // Ellipse coefficients outer top left cap\n\n  var c0 = rtl * (1.0 - KAPPA); // Clip outer top left cap\n\n  ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top); // Move right in case the margin exceedes the radius\n\n  var topLeftCoordX = left + Math.max(borderLeftWidth, rtl);\n  ctx.lineTo(topLeftCoordX, top); // Clip inner top left cap\n\n  ctx.lineTo(topLeftCoordX, top + borderTopWidth); // Ellipse coefficients inner top left cap\n\n  var innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);\n  var innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);\n  var c1 = innerTopLeftRadiusX * (1.0 - KAPPA);\n  var c2 = innerTopLeftRadiusY * (1.0 - KAPPA); // Clip inner top right cap\n\n  ctx.bezierCurveTo(left + borderLeftWidth + c1, top + borderTopWidth, left + borderLeftWidth, top + borderTopWidth + c2, left + borderLeftWidth, top + Math.max(rtl, borderTopWidth)); // Clip inner left border edge\n\n  ctx.lineTo(left + borderLeftWidth, top + height - Math.max(rbl, borderBottomWidth)); // Ellipse coefficients inner bottom left cap\n\n  var innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);\n  var innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);\n  var c3 = innerBottomLeftRadiusX * (1.0 - KAPPA);\n  var c4 = innerBottomLeftRadiusY * (1.0 - KAPPA);\n  var bottomLeftXCoord = left + Math.max(rbl, borderLeftWidth); // Clip inner top left cap\n\n  ctx.bezierCurveTo(left + borderLeftWidth, top + height - borderBottomWidth - c4, left + borderLeftWidth + c3, top + height - borderBottomWidth, bottomLeftXCoord, top + height - borderBottomWidth);\n  ctx.lineTo(bottomLeftXCoord, top + height); // Move left in case the margin exceedes the radius\n\n  ctx.lineTo(left + rbl, top + height); // Ellipse coefficients outer top right cap\n\n  var c5 = rbl * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + c5, top + height, left, top + height - c5, left, top + height - rbl);\n  ctx.closePath();\n  ctx.clip(); // Clip border right cap joins\n\n  if (borderBottomWidth) {\n    var trSlope = -borderBottomWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left + width, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderBottomWidth) {\n    var _trSlope2 = -borderTopWidth / borderLeftWidth;\n\n    ctx.moveTo(left + width / 2, _trSlope2 * (-width / 2) + top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nvar fillBorderLeft = function fillBorderLeft(ctx, layout, style, rbl, rtl) {\n  var top = layout.top,\n      left = layout.left,\n      height = layout.height;\n  var borderLeftColor = style.borderLeftColor,\n      borderLeftStyle = style.borderLeftStyle,\n      borderLeftWidth = style.borderLeftWidth,\n      borderTopWidth = style.borderTopWidth,\n      borderBottomWidth = style.borderBottomWidth;\n  var c0 = rbl * (1.0 - KAPPA);\n  var c1 = rtl * (1.0 - KAPPA);\n  ctx.moveTo(left + rbl, top + height);\n  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);\n  ctx.lineTo(left, top + rtl);\n  ctx.bezierCurveTo(left, top + c1, left + c1, top, left + rtl, top);\n  ctx.strokeColor(borderLeftColor);\n  ctx.lineWidth(Math.max(borderLeftWidth, borderTopWidth, borderBottomWidth) * 2);\n\n  if (borderLeftStyle === 'dashed') {\n    ctx.dash(borderLeftWidth * 2, {\n      space: borderLeftWidth * 1.2\n    });\n  } else if (borderLeftStyle === 'dotted') {\n    ctx.dash(borderLeftWidth, {\n      space: borderLeftWidth * 1.2\n    });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nvar shouldRenderBorders = function shouldRenderBorders(node) {\n  return node.box && (node.box.borderTopWidth || node.box.borderRightWidth || node.box.borderBottomWidth || node.box.borderLeftWidth);\n};\n\nvar renderBorders = function renderBorders(ctx, node) {\n  if (!shouldRenderBorders(node)) return node;\n  var _node$box = node.box,\n      width = _node$box.width,\n      height = _node$box.height,\n      borderTopWidth = _node$box.borderTopWidth,\n      borderLeftWidth = _node$box.borderLeftWidth,\n      borderRightWidth = _node$box.borderRightWidth,\n      borderBottomWidth = _node$box.borderBottomWidth;\n  var _node$style = node.style,\n      opacity = _node$style.opacity,\n      _node$style$borderTop = _node$style.borderTopLeftRadius,\n      borderTopLeftRadius = _node$style$borderTop === void 0 ? 0 : _node$style$borderTop,\n      _node$style$borderTop2 = _node$style.borderTopRightRadius,\n      borderTopRightRadius = _node$style$borderTop2 === void 0 ? 0 : _node$style$borderTop2,\n      _node$style$borderBot = _node$style.borderBottomLeftRadius,\n      borderBottomLeftRadius = _node$style$borderBot === void 0 ? 0 : _node$style$borderBot,\n      _node$style$borderBot2 = _node$style.borderBottomRightRadius,\n      borderBottomRightRadius = _node$style$borderBot2 === void 0 ? 0 : _node$style$borderBot2,\n      _node$style$borderTop3 = _node$style.borderTopColor,\n      borderTopColor = _node$style$borderTop3 === void 0 ? 'black' : _node$style$borderTop3,\n      _node$style$borderTop4 = _node$style.borderTopStyle,\n      borderTopStyle = _node$style$borderTop4 === void 0 ? 'solid' : _node$style$borderTop4,\n      _node$style$borderLef = _node$style.borderLeftColor,\n      borderLeftColor = _node$style$borderLef === void 0 ? 'black' : _node$style$borderLef,\n      _node$style$borderLef2 = _node$style.borderLeftStyle,\n      borderLeftStyle = _node$style$borderLef2 === void 0 ? 'solid' : _node$style$borderLef2,\n      _node$style$borderRig = _node$style.borderRightColor,\n      borderRightColor = _node$style$borderRig === void 0 ? 'black' : _node$style$borderRig,\n      _node$style$borderRig2 = _node$style.borderRightStyle,\n      borderRightStyle = _node$style$borderRig2 === void 0 ? 'solid' : _node$style$borderRig2,\n      _node$style$borderBot3 = _node$style.borderBottomColor,\n      borderBottomColor = _node$style$borderBot3 === void 0 ? 'black' : _node$style$borderBot3,\n      _node$style$borderBot4 = _node$style.borderBottomStyle,\n      borderBottomStyle = _node$style$borderBot4 === void 0 ? 'solid' : _node$style$borderBot4;\n  var style = {\n    borderTopColor: borderTopColor,\n    borderTopWidth: borderTopWidth,\n    borderTopStyle: borderTopStyle,\n    borderLeftColor: borderLeftColor,\n    borderLeftWidth: borderLeftWidth,\n    borderLeftStyle: borderLeftStyle,\n    borderRightColor: borderRightColor,\n    borderRightWidth: borderRightWidth,\n    borderRightStyle: borderRightStyle,\n    borderBottomColor: borderBottomColor,\n    borderBottomWidth: borderBottomWidth,\n    borderBottomStyle: borderBottomStyle,\n    borderTopLeftRadius: borderTopLeftRadius,\n    borderTopRightRadius: borderTopRightRadius,\n    borderBottomLeftRadius: borderBottomLeftRadius,\n    borderBottomRightRadius: borderBottomRightRadius\n  };\n  var rtr = Math.min(borderTopRightRadius, 0.5 * width, 0.5 * height);\n  var rtl = Math.min(borderTopLeftRadius, 0.5 * width, 0.5 * height);\n  var rbr = Math.min(borderBottomRightRadius, 0.5 * width, 0.5 * height);\n  var rbl = Math.min(borderBottomLeftRadius, 0.5 * width, 0.5 * height);\n  ctx.save();\n  ctx.strokeOpacity(opacity);\n\n  if (borderTopWidth) {\n    ctx.save();\n    clipBorderTop(ctx, node.box, style, rtr, rtl);\n    fillBorderTop(ctx, node.box, style, rtr, rtl);\n    ctx.restore();\n  }\n\n  if (borderRightWidth) {\n    ctx.save();\n    clipBorderRight(ctx, node.box, style, rtr, rbr);\n    fillBorderRight(ctx, node.box, style, rtr, rbr);\n    ctx.restore();\n  }\n\n  if (borderBottomWidth) {\n    ctx.save();\n    clipBorderBottom(ctx, node.box, style, rbl, rbr);\n    fillBorderBottom(ctx, node.box, style, rbl, rbr);\n    ctx.restore();\n  }\n\n  if (borderLeftWidth) {\n    ctx.save();\n    clipBorderLeft(ctx, node.box, style, rbl, rtl);\n    fillBorderLeft(ctx, node.box, style, rbl, rtl);\n    ctx.restore();\n  }\n\n  ctx.restore();\n  return node;\n};\n\nvar _default = R.curryN(2, renderBorders);\n\nexports.default = _default;","map":{"version":3,"sources":["D:/pelatihan/batch 27/Literature/client/node_modules/@react-pdf/render/lib/primitives/renderBorders.js"],"names":["_interopRequireWildcard","require","exports","__esModule","default","R","KAPPA","Math","sqrt","clipBorderTop","ctx","layout","style","rtr","rtl","top","left","width","height","borderTopWidth","borderRightWidth","borderLeftWidth","moveTo","lineTo","c0","bezierCurveTo","topRightYCoord","max","innerTopRightRadiusX","innerTopRightRadiusY","c1","c2","innerTopLeftRadiusX","innerTopLeftRadiusY","c3","c4","topLeftYCoord","c5","closePath","clip","trSlope","_trSlope","fillBorderTop","borderTopColor","borderTopStyle","strokeColor","lineWidth","dash","space","stroke","undash","clipBorderRight","rbr","borderBottomWidth","topBottomXCoord","innerBottomRightRadiusX","innerBottomRightRadiusY","topRightXCoord","brSlope","fillBorderRight","borderRightColor","borderRightStyle","clipBorderBottom","rbl","bottomLeftYCoord","innerBottomLeftRadiusX","innerBottomLeftRadiusY","bottomRightYCoord","fillBorderBottom","borderBottomColor","borderBottomStyle","clipBorderLeft","topLeftCoordX","bottomLeftXCoord","_trSlope2","fillBorderLeft","borderLeftColor","borderLeftStyle","shouldRenderBorders","node","box","renderBorders","_node$box","_node$style","opacity","_node$style$borderTop","borderTopLeftRadius","_node$style$borderTop2","borderTopRightRadius","_node$style$borderBot","borderBottomLeftRadius","_node$style$borderBot2","borderBottomRightRadius","_node$style$borderTop3","_node$style$borderTop4","_node$style$borderLef","_node$style$borderLef2","_node$style$borderRig","_node$style$borderRig2","_node$style$borderBot3","_node$style$borderBot4","min","save","strokeOpacity","restore","_default","curryN"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\n// Ref: https://www.w3.org/TR/css-backgrounds-3/#borders\n// This constant is used to approximate a symmetrical arc using a cubic Bezier curve.\nvar KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\n\nvar clipBorderTop = function clipBorderTop(ctx, layout, style, rtr, rtl) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderTopWidth = style.borderTopWidth,\n      borderRightWidth = style.borderRightWidth,\n      borderLeftWidth = style.borderLeftWidth; // Clip outer top border edge\n\n  ctx.moveTo(left + rtl, top);\n  ctx.lineTo(left + width - rtr, top); // Ellipse coefficients outer top right cap\n\n  var c0 = rtr * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + width - c0, top, left + width, top + c0, left + width, top + rtr); // Move down in case the margin exceedes the radius\n\n  var topRightYCoord = top + Math.max(borderTopWidth, rtr);\n  ctx.lineTo(left + width, topRightYCoord); // Clip inner top right cap\n\n  ctx.lineTo(left + width - borderRightWidth, topRightYCoord); // Ellipse coefficients inner top right cap\n\n  var innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);\n  var innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);\n  var c1 = innerTopRightRadiusX * (1.0 - KAPPA);\n  var c2 = innerTopRightRadiusY * (1.0 - KAPPA); // Clip inner top right cap\n\n  ctx.bezierCurveTo(left + width - borderRightWidth, top + borderTopWidth + c2, left + width - borderRightWidth - c1, top + borderTopWidth, left + width - borderRightWidth - innerTopRightRadiusX, top + borderTopWidth); // Clip inner top border edge\n\n  ctx.lineTo(left + Math.max(rtl, borderLeftWidth), top + borderTopWidth); // Ellipse coefficients inner top left cap\n\n  var innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);\n  var innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);\n  var c3 = innerTopLeftRadiusX * (1.0 - KAPPA);\n  var c4 = innerTopLeftRadiusY * (1.0 - KAPPA);\n  var topLeftYCoord = top + Math.max(borderTopWidth, rtl); // Clip inner top left cap\n\n  ctx.bezierCurveTo(left + borderLeftWidth + c3, top + borderTopWidth, left + borderLeftWidth, top + borderTopWidth + c4, left + borderLeftWidth, topLeftYCoord);\n  ctx.lineTo(left, topLeftYCoord); // Move down in case the margin exceedes the radius\n\n  ctx.lineTo(left, top + rtl); // Ellipse coefficients outer top left cap\n\n  var c5 = rtl * (1.0 - KAPPA); // Clip outer top left cap\n\n  ctx.bezierCurveTo(left, top + c5, left + c5, top, left + rtl, top);\n  ctx.closePath();\n  ctx.clip(); // Clip border top cap joins\n\n  if (borderRightWidth) {\n    var trSlope = -borderTopWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderLeftWidth) {\n    var _trSlope = -borderTopWidth / borderLeftWidth;\n\n    ctx.moveTo(left + width / 2, _trSlope * (-width / 2) + top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left + width, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nvar fillBorderTop = function fillBorderTop(ctx, layout, style, rtr, rtl) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width;\n  var borderTopColor = style.borderTopColor,\n      borderTopWidth = style.borderTopWidth,\n      borderTopStyle = style.borderTopStyle,\n      borderRightWidth = style.borderRightWidth,\n      borderLeftWidth = style.borderLeftWidth;\n  var c0 = rtl * (1.0 - KAPPA);\n  var c1 = rtr * (1.0 - KAPPA);\n  ctx.moveTo(left, top + Math.max(rtl, borderTopWidth));\n  ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top);\n  ctx.lineTo(left + width - rtr, top);\n  ctx.bezierCurveTo(left + width - c1, top, left + width, top + c1, left + width, top + rtr);\n  ctx.strokeColor(borderTopColor);\n  ctx.lineWidth(Math.max(borderRightWidth, borderTopWidth, borderLeftWidth) * 2);\n\n  if (borderTopStyle === 'dashed') {\n    ctx.dash(borderTopWidth * 2, {\n      space: borderTopWidth * 1.2\n    });\n  } else if (borderTopStyle === 'dotted') {\n    ctx.dash(borderTopWidth, {\n      space: borderTopWidth * 1.2\n    });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nvar clipBorderRight = function clipBorderRight(ctx, layout, style, rtr, rbr) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderTopWidth = style.borderTopWidth,\n      borderRightWidth = style.borderRightWidth,\n      borderBottomWidth = style.borderBottomWidth; // Clip outer right border edge\n\n  ctx.moveTo(left + width, top + rtr);\n  ctx.lineTo(left + width, top + height - rbr); // Ellipse coefficients outer bottom right cap\n\n  var c0 = rbr * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + width, top + height - c0, left + width - c0, top + height, left + width - rbr, top + height); // Move left in case the margin exceedes the radius\n\n  var topBottomXCoord = left + width - Math.max(borderRightWidth, rbr);\n  ctx.lineTo(topBottomXCoord, top + height); // Clip inner bottom right cap\n\n  ctx.lineTo(topBottomXCoord, top + height - borderBottomWidth); // Ellipse coefficients inner bottom right cap\n\n  var innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);\n  var innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);\n  var c1 = innerBottomRightRadiusX * (1.0 - KAPPA);\n  var c2 = innerBottomRightRadiusY * (1.0 - KAPPA); // Clip inner top right cap\n\n  ctx.bezierCurveTo(left + width - borderRightWidth - c1, top + height - borderBottomWidth, left + width - borderRightWidth, top + height - borderBottomWidth - c2, left + width - borderRightWidth, top + height - Math.max(rbr, borderBottomWidth)); // Clip inner right border edge\n\n  ctx.lineTo(left + width - borderRightWidth, top + Math.max(rtr, borderTopWidth)); // Ellipse coefficients inner top right cap\n\n  var innerTopRightRadiusX = Math.max(rtr - borderRightWidth, 0);\n  var innerTopRightRadiusY = Math.max(rtr - borderTopWidth, 0);\n  var c3 = innerTopRightRadiusX * (1.0 - KAPPA);\n  var c4 = innerTopRightRadiusY * (1.0 - KAPPA);\n  var topRightXCoord = left + width - Math.max(rtr, borderRightWidth); // Clip inner top left cap\n\n  ctx.bezierCurveTo(left + width - borderRightWidth, top + borderTopWidth + c4, left + width - borderRightWidth - c3, top + borderTopWidth, topRightXCoord, top + borderTopWidth);\n  ctx.lineTo(topRightXCoord, top); // Move right in case the margin exceedes the radius\n\n  ctx.lineTo(left + width - rtr, top); // Ellipse coefficients outer top right cap\n\n  var c5 = rtr * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + width - c5, top, left + width, top + c5, left + width, top + rtr);\n  ctx.closePath();\n  ctx.clip(); // Clip border right cap joins\n\n  if (borderTopWidth) {\n    var trSlope = -borderTopWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, trSlope * (-width / 2) + top);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderBottomWidth) {\n    var brSlope = borderBottomWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left + width, top);\n    ctx.lineTo(left, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nvar fillBorderRight = function fillBorderRight(ctx, layout, style, rtr, rbr) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderRightColor = style.borderRightColor,\n      borderRightStyle = style.borderRightStyle,\n      borderRightWidth = style.borderRightWidth,\n      borderTopWidth = style.borderTopWidth,\n      borderBottomWidth = style.borderBottomWidth;\n  var c0 = rbr * (1.0 - KAPPA);\n  var c1 = rtr * (1.0 - KAPPA);\n  ctx.moveTo(left + width - rtr, top);\n  ctx.bezierCurveTo(left + width - c1, top, left + width, top + c1, left + width, top + rtr);\n  ctx.lineTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(left + width, top + height - c0, left + width - c0, top + height, left + width - rbr, top + height);\n  ctx.strokeColor(borderRightColor);\n  ctx.lineWidth(Math.max(borderRightWidth, borderTopWidth, borderBottomWidth) * 2);\n\n  if (borderRightStyle === 'dashed') {\n    ctx.dash(borderRightWidth * 2, {\n      space: borderRightWidth * 1.2\n    });\n  } else if (borderRightStyle === 'dotted') {\n    ctx.dash(borderRightWidth, {\n      space: borderRightWidth * 1.2\n    });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nvar clipBorderBottom = function clipBorderBottom(ctx, layout, style, rbl, rbr) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderBottomWidth = style.borderBottomWidth,\n      borderRightWidth = style.borderRightWidth,\n      borderLeftWidth = style.borderLeftWidth; // Clip outer top border edge\n\n  ctx.moveTo(left + width - rbr, top + height);\n  ctx.lineTo(left + rbl, top + height); // Ellipse coefficients outer top right cap\n\n  var c0 = rbl * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl); // Move up in case the margin exceedes the radius\n\n  var bottomLeftYCoord = top + height - Math.max(borderBottomWidth, rbl);\n  ctx.lineTo(left, bottomLeftYCoord); // Clip inner bottom left cap\n\n  ctx.lineTo(left + borderLeftWidth, bottomLeftYCoord); // Ellipse coefficients inner top right cap\n\n  var innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);\n  var innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);\n  var c1 = innerBottomLeftRadiusX * (1.0 - KAPPA);\n  var c2 = innerBottomLeftRadiusY * (1.0 - KAPPA); // Clip inner bottom left cap\n\n  ctx.bezierCurveTo(left + borderLeftWidth, top + height - borderBottomWidth - c2, left + borderLeftWidth + c1, top + height - borderBottomWidth, left + borderLeftWidth + innerBottomLeftRadiusX, top + height - borderBottomWidth); // Clip inner bottom border edge\n\n  ctx.lineTo(left + width - Math.max(rbr, borderRightWidth), top + height - borderBottomWidth); // Ellipse coefficients inner top left cap\n\n  var innerBottomRightRadiusX = Math.max(rbr - borderRightWidth, 0);\n  var innerBottomRightRadiusY = Math.max(rbr - borderBottomWidth, 0);\n  var c3 = innerBottomRightRadiusX * (1.0 - KAPPA);\n  var c4 = innerBottomRightRadiusY * (1.0 - KAPPA);\n  var bottomRightYCoord = top + height - Math.max(borderBottomWidth, rbr); // Clip inner top left cap\n\n  ctx.bezierCurveTo(left + width - borderRightWidth - c3, top + height - borderBottomWidth, left + width - borderRightWidth, top + height - borderBottomWidth - c4, left + width - borderRightWidth, bottomRightYCoord);\n  ctx.lineTo(left + width, bottomRightYCoord); // Move down in case the margin exceedes the radius\n\n  ctx.lineTo(left + width, top + height - rbr); // Ellipse coefficients outer top left cap\n\n  var c5 = rbr * (1.0 - KAPPA); // Clip outer top left cap\n\n  ctx.bezierCurveTo(left + width, top + height - c5, left + width - c5, top + height, left + width - rbr, top + height);\n  ctx.closePath();\n  ctx.clip(); // Clip border bottom cap joins\n\n  if (borderRightWidth) {\n    var brSlope = borderBottomWidth / borderRightWidth;\n    ctx.moveTo(left + width / 2, brSlope * (-width / 2) + top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderLeftWidth) {\n    var trSlope = -borderBottomWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.lineTo(left + width, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nvar fillBorderBottom = function fillBorderBottom(ctx, layout, style, rbl, rbr) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderBottomColor = style.borderBottomColor,\n      borderBottomStyle = style.borderBottomStyle,\n      borderBottomWidth = style.borderBottomWidth,\n      borderRightWidth = style.borderRightWidth,\n      borderLeftWidth = style.borderLeftWidth;\n  var c0 = rbl * (1.0 - KAPPA);\n  var c1 = rbr * (1.0 - KAPPA);\n  ctx.moveTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(left + width, top + height - c1, left + width - c1, top + height, left + width - rbr, top + height);\n  ctx.lineTo(left + rbl, top + height);\n  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);\n  ctx.strokeColor(borderBottomColor);\n  ctx.lineWidth(Math.max(borderBottomWidth, borderRightWidth, borderLeftWidth) * 2);\n\n  if (borderBottomStyle === 'dashed') {\n    ctx.dash(borderBottomWidth * 2, {\n      space: borderBottomWidth * 1.2\n    });\n  } else if (borderBottomStyle === 'dotted') {\n    ctx.dash(borderBottomWidth, {\n      space: borderBottomWidth * 1.2\n    });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nvar clipBorderLeft = function clipBorderLeft(ctx, layout, style, rbl, rtl) {\n  var top = layout.top,\n      left = layout.left,\n      width = layout.width,\n      height = layout.height;\n  var borderTopWidth = style.borderTopWidth,\n      borderLeftWidth = style.borderLeftWidth,\n      borderBottomWidth = style.borderBottomWidth; // Clip outer left border edge\n\n  ctx.moveTo(left, top + height - rbl);\n  ctx.lineTo(left, top + rtl); // Ellipse coefficients outer top left cap\n\n  var c0 = rtl * (1.0 - KAPPA); // Clip outer top left cap\n\n  ctx.bezierCurveTo(left, top + c0, left + c0, top, left + rtl, top); // Move right in case the margin exceedes the radius\n\n  var topLeftCoordX = left + Math.max(borderLeftWidth, rtl);\n  ctx.lineTo(topLeftCoordX, top); // Clip inner top left cap\n\n  ctx.lineTo(topLeftCoordX, top + borderTopWidth); // Ellipse coefficients inner top left cap\n\n  var innerTopLeftRadiusX = Math.max(rtl - borderLeftWidth, 0);\n  var innerTopLeftRadiusY = Math.max(rtl - borderTopWidth, 0);\n  var c1 = innerTopLeftRadiusX * (1.0 - KAPPA);\n  var c2 = innerTopLeftRadiusY * (1.0 - KAPPA); // Clip inner top right cap\n\n  ctx.bezierCurveTo(left + borderLeftWidth + c1, top + borderTopWidth, left + borderLeftWidth, top + borderTopWidth + c2, left + borderLeftWidth, top + Math.max(rtl, borderTopWidth)); // Clip inner left border edge\n\n  ctx.lineTo(left + borderLeftWidth, top + height - Math.max(rbl, borderBottomWidth)); // Ellipse coefficients inner bottom left cap\n\n  var innerBottomLeftRadiusX = Math.max(rbl - borderLeftWidth, 0);\n  var innerBottomLeftRadiusY = Math.max(rbl - borderBottomWidth, 0);\n  var c3 = innerBottomLeftRadiusX * (1.0 - KAPPA);\n  var c4 = innerBottomLeftRadiusY * (1.0 - KAPPA);\n  var bottomLeftXCoord = left + Math.max(rbl, borderLeftWidth); // Clip inner top left cap\n\n  ctx.bezierCurveTo(left + borderLeftWidth, top + height - borderBottomWidth - c4, left + borderLeftWidth + c3, top + height - borderBottomWidth, bottomLeftXCoord, top + height - borderBottomWidth);\n  ctx.lineTo(bottomLeftXCoord, top + height); // Move left in case the margin exceedes the radius\n\n  ctx.lineTo(left + rbl, top + height); // Ellipse coefficients outer top right cap\n\n  var c5 = rbl * (1.0 - KAPPA); // Clip outer top right cap\n\n  ctx.bezierCurveTo(left + c5, top + height, left, top + height - c5, left, top + height - rbl);\n  ctx.closePath();\n  ctx.clip(); // Clip border right cap joins\n\n  if (borderBottomWidth) {\n    var trSlope = -borderBottomWidth / borderLeftWidth;\n    ctx.moveTo(left + width / 2, trSlope * (width / 2) + top + height);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left + width, top);\n    ctx.closePath();\n    ctx.clip();\n  }\n\n  if (borderBottomWidth) {\n    var _trSlope2 = -borderTopWidth / borderLeftWidth;\n\n    ctx.moveTo(left + width / 2, _trSlope2 * (-width / 2) + top);\n    ctx.lineTo(left, top);\n    ctx.lineTo(left, top + height);\n    ctx.lineTo(left + width, top + height);\n    ctx.closePath();\n    ctx.clip();\n  }\n};\n\nvar fillBorderLeft = function fillBorderLeft(ctx, layout, style, rbl, rtl) {\n  var top = layout.top,\n      left = layout.left,\n      height = layout.height;\n  var borderLeftColor = style.borderLeftColor,\n      borderLeftStyle = style.borderLeftStyle,\n      borderLeftWidth = style.borderLeftWidth,\n      borderTopWidth = style.borderTopWidth,\n      borderBottomWidth = style.borderBottomWidth;\n  var c0 = rbl * (1.0 - KAPPA);\n  var c1 = rtl * (1.0 - KAPPA);\n  ctx.moveTo(left + rbl, top + height);\n  ctx.bezierCurveTo(left + c0, top + height, left, top + height - c0, left, top + height - rbl);\n  ctx.lineTo(left, top + rtl);\n  ctx.bezierCurveTo(left, top + c1, left + c1, top, left + rtl, top);\n  ctx.strokeColor(borderLeftColor);\n  ctx.lineWidth(Math.max(borderLeftWidth, borderTopWidth, borderBottomWidth) * 2);\n\n  if (borderLeftStyle === 'dashed') {\n    ctx.dash(borderLeftWidth * 2, {\n      space: borderLeftWidth * 1.2\n    });\n  } else if (borderLeftStyle === 'dotted') {\n    ctx.dash(borderLeftWidth, {\n      space: borderLeftWidth * 1.2\n    });\n  }\n\n  ctx.stroke();\n  ctx.undash();\n};\n\nvar shouldRenderBorders = function shouldRenderBorders(node) {\n  return node.box && (node.box.borderTopWidth || node.box.borderRightWidth || node.box.borderBottomWidth || node.box.borderLeftWidth);\n};\n\nvar renderBorders = function renderBorders(ctx, node) {\n  if (!shouldRenderBorders(node)) return node;\n  var _node$box = node.box,\n      width = _node$box.width,\n      height = _node$box.height,\n      borderTopWidth = _node$box.borderTopWidth,\n      borderLeftWidth = _node$box.borderLeftWidth,\n      borderRightWidth = _node$box.borderRightWidth,\n      borderBottomWidth = _node$box.borderBottomWidth;\n  var _node$style = node.style,\n      opacity = _node$style.opacity,\n      _node$style$borderTop = _node$style.borderTopLeftRadius,\n      borderTopLeftRadius = _node$style$borderTop === void 0 ? 0 : _node$style$borderTop,\n      _node$style$borderTop2 = _node$style.borderTopRightRadius,\n      borderTopRightRadius = _node$style$borderTop2 === void 0 ? 0 : _node$style$borderTop2,\n      _node$style$borderBot = _node$style.borderBottomLeftRadius,\n      borderBottomLeftRadius = _node$style$borderBot === void 0 ? 0 : _node$style$borderBot,\n      _node$style$borderBot2 = _node$style.borderBottomRightRadius,\n      borderBottomRightRadius = _node$style$borderBot2 === void 0 ? 0 : _node$style$borderBot2,\n      _node$style$borderTop3 = _node$style.borderTopColor,\n      borderTopColor = _node$style$borderTop3 === void 0 ? 'black' : _node$style$borderTop3,\n      _node$style$borderTop4 = _node$style.borderTopStyle,\n      borderTopStyle = _node$style$borderTop4 === void 0 ? 'solid' : _node$style$borderTop4,\n      _node$style$borderLef = _node$style.borderLeftColor,\n      borderLeftColor = _node$style$borderLef === void 0 ? 'black' : _node$style$borderLef,\n      _node$style$borderLef2 = _node$style.borderLeftStyle,\n      borderLeftStyle = _node$style$borderLef2 === void 0 ? 'solid' : _node$style$borderLef2,\n      _node$style$borderRig = _node$style.borderRightColor,\n      borderRightColor = _node$style$borderRig === void 0 ? 'black' : _node$style$borderRig,\n      _node$style$borderRig2 = _node$style.borderRightStyle,\n      borderRightStyle = _node$style$borderRig2 === void 0 ? 'solid' : _node$style$borderRig2,\n      _node$style$borderBot3 = _node$style.borderBottomColor,\n      borderBottomColor = _node$style$borderBot3 === void 0 ? 'black' : _node$style$borderBot3,\n      _node$style$borderBot4 = _node$style.borderBottomStyle,\n      borderBottomStyle = _node$style$borderBot4 === void 0 ? 'solid' : _node$style$borderBot4;\n  var style = {\n    borderTopColor: borderTopColor,\n    borderTopWidth: borderTopWidth,\n    borderTopStyle: borderTopStyle,\n    borderLeftColor: borderLeftColor,\n    borderLeftWidth: borderLeftWidth,\n    borderLeftStyle: borderLeftStyle,\n    borderRightColor: borderRightColor,\n    borderRightWidth: borderRightWidth,\n    borderRightStyle: borderRightStyle,\n    borderBottomColor: borderBottomColor,\n    borderBottomWidth: borderBottomWidth,\n    borderBottomStyle: borderBottomStyle,\n    borderTopLeftRadius: borderTopLeftRadius,\n    borderTopRightRadius: borderTopRightRadius,\n    borderBottomLeftRadius: borderBottomLeftRadius,\n    borderBottomRightRadius: borderBottomRightRadius\n  };\n  var rtr = Math.min(borderTopRightRadius, 0.5 * width, 0.5 * height);\n  var rtl = Math.min(borderTopLeftRadius, 0.5 * width, 0.5 * height);\n  var rbr = Math.min(borderBottomRightRadius, 0.5 * width, 0.5 * height);\n  var rbl = Math.min(borderBottomLeftRadius, 0.5 * width, 0.5 * height);\n  ctx.save();\n  ctx.strokeOpacity(opacity);\n\n  if (borderTopWidth) {\n    ctx.save();\n    clipBorderTop(ctx, node.box, style, rtr, rtl);\n    fillBorderTop(ctx, node.box, style, rtr, rtl);\n    ctx.restore();\n  }\n\n  if (borderRightWidth) {\n    ctx.save();\n    clipBorderRight(ctx, node.box, style, rtr, rbr);\n    fillBorderRight(ctx, node.box, style, rtr, rbr);\n    ctx.restore();\n  }\n\n  if (borderBottomWidth) {\n    ctx.save();\n    clipBorderBottom(ctx, node.box, style, rbl, rbr);\n    fillBorderBottom(ctx, node.box, style, rbl, rbr);\n    ctx.restore();\n  }\n\n  if (borderLeftWidth) {\n    ctx.save();\n    clipBorderLeft(ctx, node.box, style, rbl, rtl);\n    fillBorderLeft(ctx, node.box, style, rbl, rtl);\n    ctx.restore();\n  }\n\n  ctx.restore();\n  return node;\n};\n\nvar _default = R.curryN(2, renderBorders);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}