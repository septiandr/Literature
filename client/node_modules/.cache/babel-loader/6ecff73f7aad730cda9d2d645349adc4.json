{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\")); // This constant is used to approximate a symmetrical arc using a cubic\n// Bezier curve.\n\n\nvar KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\n\nvar clipNode = function clipNode(ctx, node) {\n  if (!node.style) return node;\n  var _node$box = node.box,\n      top = _node$box.top,\n      left = _node$box.left,\n      width = _node$box.width,\n      height = _node$box.height;\n  var _node$style = node.style,\n      _node$style$borderTop = _node$style.borderTopLeftRadius,\n      borderTopLeftRadius = _node$style$borderTop === void 0 ? 0 : _node$style$borderTop,\n      _node$style$borderTop2 = _node$style.borderTopRightRadius,\n      borderTopRightRadius = _node$style$borderTop2 === void 0 ? 0 : _node$style$borderTop2,\n      _node$style$borderBot = _node$style.borderBottomRightRadius,\n      borderBottomRightRadius = _node$style$borderBot === void 0 ? 0 : _node$style$borderBot,\n      _node$style$borderBot2 = _node$style.borderBottomLeftRadius,\n      borderBottomLeftRadius = _node$style$borderBot2 === void 0 ? 0 : _node$style$borderBot2; // Border top\n\n  var rtr = Math.min(borderTopRightRadius, 0.5 * width, 0.5 * height);\n  var ctr = rtr * (1.0 - KAPPA);\n  ctx.moveTo(left + rtr, top);\n  ctx.lineTo(left + width - rtr, top);\n  ctx.bezierCurveTo(left + width - ctr, top, left + width, top + ctr, left + width, top + rtr); // Border right\n\n  var rbr = Math.min(borderBottomRightRadius, 0.5 * width, 0.5 * height);\n  var cbr = rbr * (1.0 - KAPPA);\n  ctx.lineTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(left + width, top + height - cbr, left + width - cbr, top + height, left + width - rbr, top + height); // Border bottom\n\n  var rbl = Math.min(borderBottomLeftRadius, 0.5 * width, 0.5 * height);\n  var cbl = rbl * (1.0 - KAPPA);\n  ctx.lineTo(left + rbl, top + height);\n  ctx.bezierCurveTo(left + cbl, top + height, left, top + height - cbl, left, top + height - rbl); // Border left\n\n  var rtl = Math.min(borderTopLeftRadius, 0.5 * width, 0.5 * height);\n  var ctl = rtl * (1.0 - KAPPA);\n  ctx.lineTo(left, top + rtl);\n  ctx.bezierCurveTo(left, top + ctl, left + ctl, top, left + rtl, top);\n  ctx.closePath();\n  ctx.clip();\n  return node;\n};\n\nvar _default = R.curryN(2, clipNode);\n\nexports.default = _default;","map":{"version":3,"sources":["D:/pelatihan/batch 27/Literature/client/node_modules/@react-pdf/render/lib/operations/clipNode.js"],"names":["_interopRequireWildcard","require","exports","__esModule","default","R","KAPPA","Math","sqrt","clipNode","ctx","node","style","_node$box","box","top","left","width","height","_node$style","_node$style$borderTop","borderTopLeftRadius","_node$style$borderTop2","borderTopRightRadius","_node$style$borderBot","borderBottomRightRadius","_node$style$borderBot2","borderBottomLeftRadius","rtr","min","ctr","moveTo","lineTo","bezierCurveTo","rbr","cbr","rbl","cbl","rtl","ctl","closePath","clip","_default","curryN"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\n// This constant is used to approximate a symmetrical arc using a cubic\n// Bezier curve.\nvar KAPPA = 4.0 * ((Math.sqrt(2) - 1.0) / 3.0);\n\nvar clipNode = function clipNode(ctx, node) {\n  if (!node.style) return node;\n  var _node$box = node.box,\n      top = _node$box.top,\n      left = _node$box.left,\n      width = _node$box.width,\n      height = _node$box.height;\n  var _node$style = node.style,\n      _node$style$borderTop = _node$style.borderTopLeftRadius,\n      borderTopLeftRadius = _node$style$borderTop === void 0 ? 0 : _node$style$borderTop,\n      _node$style$borderTop2 = _node$style.borderTopRightRadius,\n      borderTopRightRadius = _node$style$borderTop2 === void 0 ? 0 : _node$style$borderTop2,\n      _node$style$borderBot = _node$style.borderBottomRightRadius,\n      borderBottomRightRadius = _node$style$borderBot === void 0 ? 0 : _node$style$borderBot,\n      _node$style$borderBot2 = _node$style.borderBottomLeftRadius,\n      borderBottomLeftRadius = _node$style$borderBot2 === void 0 ? 0 : _node$style$borderBot2; // Border top\n\n  var rtr = Math.min(borderTopRightRadius, 0.5 * width, 0.5 * height);\n  var ctr = rtr * (1.0 - KAPPA);\n  ctx.moveTo(left + rtr, top);\n  ctx.lineTo(left + width - rtr, top);\n  ctx.bezierCurveTo(left + width - ctr, top, left + width, top + ctr, left + width, top + rtr); // Border right\n\n  var rbr = Math.min(borderBottomRightRadius, 0.5 * width, 0.5 * height);\n  var cbr = rbr * (1.0 - KAPPA);\n  ctx.lineTo(left + width, top + height - rbr);\n  ctx.bezierCurveTo(left + width, top + height - cbr, left + width - cbr, top + height, left + width - rbr, top + height); // Border bottom\n\n  var rbl = Math.min(borderBottomLeftRadius, 0.5 * width, 0.5 * height);\n  var cbl = rbl * (1.0 - KAPPA);\n  ctx.lineTo(left + rbl, top + height);\n  ctx.bezierCurveTo(left + cbl, top + height, left, top + height - cbl, left, top + height - rbl); // Border left\n\n  var rtl = Math.min(borderTopLeftRadius, 0.5 * width, 0.5 * height);\n  var ctl = rtl * (1.0 - KAPPA);\n  ctx.lineTo(left, top + rtl);\n  ctx.bezierCurveTo(left, top + ctl, left + ctl, top, left + rtl, top);\n  ctx.closePath();\n  ctx.clip();\n  return node;\n};\n\nvar _default = R.curryN(2, clipNode);\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}