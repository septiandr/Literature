{"ast":null,"code":"/**\n * @licstart The following is the entire license notice for the\n * Javascript code in this page\n *\n * Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @licend The above is the entire license notice for the\n * Javascript code in this page\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(\"pdfjs-dist/build/pdf\", [], factory);else if (typeof exports === 'object') exports[\"pdfjs-dist/build/pdf\"] = factory();else root[\"pdfjs-dist/build/pdf\"] = root.pdfjsLib = factory();\n})(this, function () {\n  return (\n    /******/\n    (() => {\n      // webpackBootstrap\n\n      /******/\n      \"use strict\";\n      /******/\n\n      var __webpack_modules__ = [\n        /* 0 */\n      ,\n      /* 1 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.addLinkAttributes = addLinkAttributes;\n        exports.deprecated = deprecated;\n        exports.getFilenameFromUrl = getFilenameFromUrl;\n        exports.getPdfFilenameFromUrl = getPdfFilenameFromUrl;\n        exports.getXfaPageViewport = getXfaPageViewport;\n        exports.isDataScheme = isDataScheme;\n        exports.isPdfFile = isPdfFile;\n        exports.isValidFetchUrl = isValidFetchUrl;\n        exports.loadScript = loadScript;\n        exports.StatTimer = exports.RenderingCancelledException = exports.PDFDateString = exports.PageViewport = exports.LinkTarget = exports.DOMSVGFactory = exports.DOMStandardFontDataFactory = exports.DOMCMapReaderFactory = exports.DOMCanvasFactory = exports.DEFAULT_LINK_REL = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _base_factory = __w_pdfjs_require__(5);\n\n        const DEFAULT_LINK_REL = \"noopener noreferrer nofollow\";\n        exports.DEFAULT_LINK_REL = DEFAULT_LINK_REL;\n        const SVG_NS = \"http://www.w3.org/2000/svg\";\n\n        class DOMCanvasFactory extends _base_factory.BaseCanvasFactory {\n          constructor() {\n            let {\n              ownerDocument = globalThis.document\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            super();\n            this._document = ownerDocument;\n          }\n\n          _createCanvas(width, height) {\n            const canvas = this._document.createElement(\"canvas\");\n\n            canvas.width = width;\n            canvas.height = height;\n            return canvas;\n          }\n\n        }\n\n        exports.DOMCanvasFactory = DOMCanvasFactory;\n\n        async function fetchData(url) {\n          let asTypedArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n          if (isValidFetchUrl(url, document.baseURI)) {\n            const response = await fetch(url);\n\n            if (!response.ok) {\n              throw new Error(response.statusText);\n            }\n\n            return asTypedArray ? new Uint8Array(await response.arrayBuffer()) : (0, _util.stringToBytes)(await response.text());\n          }\n\n          return new Promise((resolve, reject) => {\n            const request = new XMLHttpRequest();\n            request.open(\"GET\", url, true);\n\n            if (asTypedArray) {\n              request.responseType = \"arraybuffer\";\n            }\n\n            request.onreadystatechange = () => {\n              if (request.readyState !== XMLHttpRequest.DONE) {\n                return;\n              }\n\n              if (request.status === 200 || request.status === 0) {\n                let data;\n\n                if (asTypedArray && request.response) {\n                  data = new Uint8Array(request.response);\n                } else if (!asTypedArray && request.responseText) {\n                  data = (0, _util.stringToBytes)(request.responseText);\n                }\n\n                if (data) {\n                  resolve(data);\n                  return;\n                }\n              }\n\n              reject(new Error(request.statusText));\n            };\n\n            request.send(null);\n          });\n        }\n\n        class DOMCMapReaderFactory extends _base_factory.BaseCMapReaderFactory {\n          _fetchData(url, compressionType) {\n            return fetchData(url, this.isCompressed).then(data => {\n              return {\n                cMapData: data,\n                compressionType\n              };\n            });\n          }\n\n        }\n\n        exports.DOMCMapReaderFactory = DOMCMapReaderFactory;\n\n        class DOMStandardFontDataFactory extends _base_factory.BaseStandardFontDataFactory {\n          _fetchData(url) {\n            return fetchData(url, true);\n          }\n\n        }\n\n        exports.DOMStandardFontDataFactory = DOMStandardFontDataFactory;\n\n        class DOMSVGFactory extends _base_factory.BaseSVGFactory {\n          _createSVG(type) {\n            return document.createElementNS(SVG_NS, type);\n          }\n\n        }\n\n        exports.DOMSVGFactory = DOMSVGFactory;\n\n        class PageViewport {\n          constructor(_ref) {\n            let {\n              viewBox,\n              scale,\n              rotation,\n              offsetX = 0,\n              offsetY = 0,\n              dontFlip = false\n            } = _ref;\n            this.viewBox = viewBox;\n            this.scale = scale;\n            this.rotation = rotation;\n            this.offsetX = offsetX;\n            this.offsetY = offsetY;\n            const centerX = (viewBox[2] + viewBox[0]) / 2;\n            const centerY = (viewBox[3] + viewBox[1]) / 2;\n            let rotateA, rotateB, rotateC, rotateD;\n            rotation %= 360;\n\n            if (rotation < 0) {\n              rotation += 360;\n            }\n\n            switch (rotation) {\n              case 180:\n                rotateA = -1;\n                rotateB = 0;\n                rotateC = 0;\n                rotateD = 1;\n                break;\n\n              case 90:\n                rotateA = 0;\n                rotateB = 1;\n                rotateC = 1;\n                rotateD = 0;\n                break;\n\n              case 270:\n                rotateA = 0;\n                rotateB = -1;\n                rotateC = -1;\n                rotateD = 0;\n                break;\n\n              case 0:\n                rotateA = 1;\n                rotateB = 0;\n                rotateC = 0;\n                rotateD = -1;\n                break;\n\n              default:\n                throw new Error(\"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\");\n            }\n\n            if (dontFlip) {\n              rotateC = -rotateC;\n              rotateD = -rotateD;\n            }\n\n            let offsetCanvasX, offsetCanvasY;\n            let width, height;\n\n            if (rotateA === 0) {\n              offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n              offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n              width = Math.abs(viewBox[3] - viewBox[1]) * scale;\n              height = Math.abs(viewBox[2] - viewBox[0]) * scale;\n            } else {\n              offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n              offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n              width = Math.abs(viewBox[2] - viewBox[0]) * scale;\n              height = Math.abs(viewBox[3] - viewBox[1]) * scale;\n            }\n\n            this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];\n            this.width = width;\n            this.height = height;\n          }\n\n          clone() {\n            let {\n              scale = this.scale,\n              rotation = this.rotation,\n              offsetX = this.offsetX,\n              offsetY = this.offsetY,\n              dontFlip = false\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            return new PageViewport({\n              viewBox: this.viewBox.slice(),\n              scale,\n              rotation,\n              offsetX,\n              offsetY,\n              dontFlip\n            });\n          }\n\n          convertToViewportPoint(x, y) {\n            return _util.Util.applyTransform([x, y], this.transform);\n          }\n\n          convertToViewportRectangle(rect) {\n            const topLeft = _util.Util.applyTransform([rect[0], rect[1]], this.transform);\n\n            const bottomRight = _util.Util.applyTransform([rect[2], rect[3]], this.transform);\n\n            return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n          }\n\n          convertToPdfPoint(x, y) {\n            return _util.Util.applyInverseTransform([x, y], this.transform);\n          }\n\n        }\n\n        exports.PageViewport = PageViewport;\n\n        class RenderingCancelledException extends _util.BaseException {\n          constructor(msg, type) {\n            super(msg);\n            this.type = type;\n          }\n\n        }\n\n        exports.RenderingCancelledException = RenderingCancelledException;\n        const LinkTarget = {\n          NONE: 0,\n          SELF: 1,\n          BLANK: 2,\n          PARENT: 3,\n          TOP: 4\n        };\n        exports.LinkTarget = LinkTarget;\n\n        function addLinkAttributes(link) {\n          let {\n            url,\n            target,\n            rel,\n            enabled = true\n          } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          (0, _util.assert)(url && typeof url === \"string\", 'addLinkAttributes: A valid \"url\" parameter must provided.');\n          const urlNullRemoved = (0, _util.removeNullCharacters)(url);\n\n          if (enabled) {\n            link.href = link.title = urlNullRemoved;\n          } else {\n            link.href = \"\";\n            link.title = `Disabled: ${urlNullRemoved}`;\n\n            link.onclick = () => {\n              return false;\n            };\n          }\n\n          let targetStr = \"\";\n\n          switch (target) {\n            case LinkTarget.NONE:\n              break;\n\n            case LinkTarget.SELF:\n              targetStr = \"_self\";\n              break;\n\n            case LinkTarget.BLANK:\n              targetStr = \"_blank\";\n              break;\n\n            case LinkTarget.PARENT:\n              targetStr = \"_parent\";\n              break;\n\n            case LinkTarget.TOP:\n              targetStr = \"_top\";\n              break;\n          }\n\n          link.target = targetStr;\n          link.rel = typeof rel === \"string\" ? rel : DEFAULT_LINK_REL;\n        }\n\n        function isDataScheme(url) {\n          const ii = url.length;\n          let i = 0;\n\n          while (i < ii && url[i].trim() === \"\") {\n            i++;\n          }\n\n          return url.substring(i, i + 5).toLowerCase() === \"data:\";\n        }\n\n        function isPdfFile(filename) {\n          return typeof filename === \"string\" && /\\.pdf$/i.test(filename);\n        }\n\n        function getFilenameFromUrl(url) {\n          const anchor = url.indexOf(\"#\");\n          const query = url.indexOf(\"?\");\n          const end = Math.min(anchor > 0 ? anchor : url.length, query > 0 ? query : url.length);\n          return url.substring(url.lastIndexOf(\"/\", end) + 1, end);\n        }\n\n        function getPdfFilenameFromUrl(url) {\n          let defaultFilename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"document.pdf\";\n\n          if (typeof url !== \"string\") {\n            return defaultFilename;\n          }\n\n          if (isDataScheme(url)) {\n            (0, _util.warn)('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');\n            return defaultFilename;\n          }\n\n          const reURI = /^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n          const reFilename = /[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n          const splitURI = reURI.exec(url);\n          let suggestedFilename = reFilename.exec(splitURI[1]) || reFilename.exec(splitURI[2]) || reFilename.exec(splitURI[3]);\n\n          if (suggestedFilename) {\n            suggestedFilename = suggestedFilename[0];\n\n            if (suggestedFilename.includes(\"%\")) {\n              try {\n                suggestedFilename = reFilename.exec(decodeURIComponent(suggestedFilename))[0];\n              } catch (ex) {}\n            }\n          }\n\n          return suggestedFilename || defaultFilename;\n        }\n\n        class StatTimer {\n          constructor() {\n            this.started = Object.create(null);\n            this.times = [];\n          }\n\n          time(name) {\n            if (name in this.started) {\n              (0, _util.warn)(`Timer is already running for ${name}`);\n            }\n\n            this.started[name] = Date.now();\n          }\n\n          timeEnd(name) {\n            if (!(name in this.started)) {\n              (0, _util.warn)(`Timer has not been started for ${name}`);\n            }\n\n            this.times.push({\n              name,\n              start: this.started[name],\n              end: Date.now()\n            });\n            delete this.started[name];\n          }\n\n          toString() {\n            const outBuf = [];\n            let longest = 0;\n\n            for (const time of this.times) {\n              const name = time.name;\n\n              if (name.length > longest) {\n                longest = name.length;\n              }\n            }\n\n            for (const time of this.times) {\n              const duration = time.end - time.start;\n              outBuf.push(`${time.name.padEnd(longest)} ${duration}ms\\n`);\n            }\n\n            return outBuf.join(\"\");\n          }\n\n        }\n\n        exports.StatTimer = StatTimer;\n\n        function isValidFetchUrl(url, baseUrl) {\n          try {\n            const {\n              protocol\n            } = baseUrl ? new URL(url, baseUrl) : new URL(url);\n            return protocol === \"http:\" || protocol === \"https:\";\n          } catch (ex) {\n            return false;\n          }\n        }\n\n        function loadScript(src) {\n          let removeScriptElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          return new Promise((resolve, reject) => {\n            const script = document.createElement(\"script\");\n            script.src = src;\n\n            script.onload = function (evt) {\n              if (removeScriptElement) {\n                script.remove();\n              }\n\n              resolve(evt);\n            };\n\n            script.onerror = function () {\n              reject(new Error(`Cannot load script at: ${script.src}`));\n            };\n\n            (document.head || document.documentElement).appendChild(script);\n          });\n        }\n\n        function deprecated(details) {\n          console.log(\"Deprecated API usage: \" + details);\n        }\n\n        let pdfDateStringRegex;\n\n        class PDFDateString {\n          static toDateObject(input) {\n            if (!input || !(0, _util.isString)(input)) {\n              return null;\n            }\n\n            if (!pdfDateStringRegex) {\n              pdfDateStringRegex = new RegExp(\"^D:\" + \"(\\\\d{4})\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"([Z|+|-])?\" + \"(\\\\d{2})?\" + \"'?\" + \"(\\\\d{2})?\" + \"'?\");\n            }\n\n            const matches = pdfDateStringRegex.exec(input);\n\n            if (!matches) {\n              return null;\n            }\n\n            const year = parseInt(matches[1], 10);\n            let month = parseInt(matches[2], 10);\n            month = month >= 1 && month <= 12 ? month - 1 : 0;\n            let day = parseInt(matches[3], 10);\n            day = day >= 1 && day <= 31 ? day : 1;\n            let hour = parseInt(matches[4], 10);\n            hour = hour >= 0 && hour <= 23 ? hour : 0;\n            let minute = parseInt(matches[5], 10);\n            minute = minute >= 0 && minute <= 59 ? minute : 0;\n            let second = parseInt(matches[6], 10);\n            second = second >= 0 && second <= 59 ? second : 0;\n            const universalTimeRelation = matches[7] || \"Z\";\n            let offsetHour = parseInt(matches[8], 10);\n            offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n            let offsetMinute = parseInt(matches[9], 10) || 0;\n            offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n\n            if (universalTimeRelation === \"-\") {\n              hour += offsetHour;\n              minute += offsetMinute;\n            } else if (universalTimeRelation === \"+\") {\n              hour -= offsetHour;\n              minute -= offsetMinute;\n            }\n\n            return new Date(Date.UTC(year, month, day, hour, minute, second));\n          }\n\n        }\n\n        exports.PDFDateString = PDFDateString;\n\n        function getXfaPageViewport(xfaPage, _ref2) {\n          let {\n            scale = 1,\n            rotation = 0\n          } = _ref2;\n          const {\n            width,\n            height\n          } = xfaPage.attributes.style;\n          const viewBox = [0, 0, parseInt(width), parseInt(height)];\n          return new PageViewport({\n            viewBox,\n            scale,\n            rotation\n          });\n        }\n        /***/\n\n      },\n      /* 2 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.arrayByteLength = arrayByteLength;\n        exports.arraysToBytes = arraysToBytes;\n        exports.assert = assert;\n        exports.bytesToString = bytesToString;\n        exports.createObjectURL = createObjectURL;\n        exports.createPromiseCapability = createPromiseCapability;\n        exports.createValidAbsoluteUrl = createValidAbsoluteUrl;\n        exports.escapeString = escapeString;\n        exports.getModificationDate = getModificationDate;\n        exports.getVerbosityLevel = getVerbosityLevel;\n        exports.info = info;\n        exports.isArrayBuffer = isArrayBuffer;\n        exports.isArrayEqual = isArrayEqual;\n        exports.isAscii = isAscii;\n        exports.isBool = isBool;\n        exports.isNum = isNum;\n        exports.isSameOrigin = isSameOrigin;\n        exports.isString = isString;\n        exports.objectFromMap = objectFromMap;\n        exports.objectSize = objectSize;\n        exports.removeNullCharacters = removeNullCharacters;\n        exports.setVerbosityLevel = setVerbosityLevel;\n        exports.shadow = shadow;\n        exports.string32 = string32;\n        exports.stringToBytes = stringToBytes;\n        exports.stringToPDFString = stringToPDFString;\n        exports.stringToUTF16BEString = stringToUTF16BEString;\n        exports.stringToUTF8String = stringToUTF8String;\n        exports.unreachable = unreachable;\n        exports.utf8StringToString = utf8StringToString;\n        exports.warn = warn;\n        exports.VerbosityLevel = exports.Util = exports.UNSUPPORTED_FEATURES = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.TextRenderingMode = exports.StreamType = exports.PermissionFlag = exports.PasswordResponses = exports.PasswordException = exports.PageActionEventType = exports.OPS = exports.MissingPDFException = exports.IsLittleEndianCached = exports.IsEvalSupportedCached = exports.InvalidPDFException = exports.ImageKind = exports.IDENTITY_MATRIX = exports.FormatError = exports.FontType = exports.FONT_IDENTITY_MATRIX = exports.DocumentActionEventType = exports.CMapCompressionType = exports.BaseException = exports.AnnotationType = exports.AnnotationStateModelType = exports.AnnotationReviewState = exports.AnnotationReplyType = exports.AnnotationMarkedState = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationBorderStyleType = exports.AnnotationActionEventType = exports.AbortException = void 0;\n\n        __w_pdfjs_require__(3);\n\n        const IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\n        exports.IDENTITY_MATRIX = IDENTITY_MATRIX;\n        const FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n        exports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;\n        const PermissionFlag = {\n          PRINT: 0x04,\n          MODIFY_CONTENTS: 0x08,\n          COPY: 0x10,\n          MODIFY_ANNOTATIONS: 0x20,\n          FILL_INTERACTIVE_FORMS: 0x100,\n          COPY_FOR_ACCESSIBILITY: 0x200,\n          ASSEMBLE: 0x400,\n          PRINT_HIGH_QUALITY: 0x800\n        };\n        exports.PermissionFlag = PermissionFlag;\n        const TextRenderingMode = {\n          FILL: 0,\n          STROKE: 1,\n          FILL_STROKE: 2,\n          INVISIBLE: 3,\n          FILL_ADD_TO_PATH: 4,\n          STROKE_ADD_TO_PATH: 5,\n          FILL_STROKE_ADD_TO_PATH: 6,\n          ADD_TO_PATH: 7,\n          FILL_STROKE_MASK: 3,\n          ADD_TO_PATH_FLAG: 4\n        };\n        exports.TextRenderingMode = TextRenderingMode;\n        const ImageKind = {\n          GRAYSCALE_1BPP: 1,\n          RGB_24BPP: 2,\n          RGBA_32BPP: 3\n        };\n        exports.ImageKind = ImageKind;\n        const AnnotationType = {\n          TEXT: 1,\n          LINK: 2,\n          FREETEXT: 3,\n          LINE: 4,\n          SQUARE: 5,\n          CIRCLE: 6,\n          POLYGON: 7,\n          POLYLINE: 8,\n          HIGHLIGHT: 9,\n          UNDERLINE: 10,\n          SQUIGGLY: 11,\n          STRIKEOUT: 12,\n          STAMP: 13,\n          CARET: 14,\n          INK: 15,\n          POPUP: 16,\n          FILEATTACHMENT: 17,\n          SOUND: 18,\n          MOVIE: 19,\n          WIDGET: 20,\n          SCREEN: 21,\n          PRINTERMARK: 22,\n          TRAPNET: 23,\n          WATERMARK: 24,\n          THREED: 25,\n          REDACT: 26\n        };\n        exports.AnnotationType = AnnotationType;\n        const AnnotationStateModelType = {\n          MARKED: \"Marked\",\n          REVIEW: \"Review\"\n        };\n        exports.AnnotationStateModelType = AnnotationStateModelType;\n        const AnnotationMarkedState = {\n          MARKED: \"Marked\",\n          UNMARKED: \"Unmarked\"\n        };\n        exports.AnnotationMarkedState = AnnotationMarkedState;\n        const AnnotationReviewState = {\n          ACCEPTED: \"Accepted\",\n          REJECTED: \"Rejected\",\n          CANCELLED: \"Cancelled\",\n          COMPLETED: \"Completed\",\n          NONE: \"None\"\n        };\n        exports.AnnotationReviewState = AnnotationReviewState;\n        const AnnotationReplyType = {\n          GROUP: \"Group\",\n          REPLY: \"R\"\n        };\n        exports.AnnotationReplyType = AnnotationReplyType;\n        const AnnotationFlag = {\n          INVISIBLE: 0x01,\n          HIDDEN: 0x02,\n          PRINT: 0x04,\n          NOZOOM: 0x08,\n          NOROTATE: 0x10,\n          NOVIEW: 0x20,\n          READONLY: 0x40,\n          LOCKED: 0x80,\n          TOGGLENOVIEW: 0x100,\n          LOCKEDCONTENTS: 0x200\n        };\n        exports.AnnotationFlag = AnnotationFlag;\n        const AnnotationFieldFlag = {\n          READONLY: 0x0000001,\n          REQUIRED: 0x0000002,\n          NOEXPORT: 0x0000004,\n          MULTILINE: 0x0001000,\n          PASSWORD: 0x0002000,\n          NOTOGGLETOOFF: 0x0004000,\n          RADIO: 0x0008000,\n          PUSHBUTTON: 0x0010000,\n          COMBO: 0x0020000,\n          EDIT: 0x0040000,\n          SORT: 0x0080000,\n          FILESELECT: 0x0100000,\n          MULTISELECT: 0x0200000,\n          DONOTSPELLCHECK: 0x0400000,\n          DONOTSCROLL: 0x0800000,\n          COMB: 0x1000000,\n          RICHTEXT: 0x2000000,\n          RADIOSINUNISON: 0x2000000,\n          COMMITONSELCHANGE: 0x4000000\n        };\n        exports.AnnotationFieldFlag = AnnotationFieldFlag;\n        const AnnotationBorderStyleType = {\n          SOLID: 1,\n          DASHED: 2,\n          BEVELED: 3,\n          INSET: 4,\n          UNDERLINE: 5\n        };\n        exports.AnnotationBorderStyleType = AnnotationBorderStyleType;\n        const AnnotationActionEventType = {\n          E: \"Mouse Enter\",\n          X: \"Mouse Exit\",\n          D: \"Mouse Down\",\n          U: \"Mouse Up\",\n          Fo: \"Focus\",\n          Bl: \"Blur\",\n          PO: \"PageOpen\",\n          PC: \"PageClose\",\n          PV: \"PageVisible\",\n          PI: \"PageInvisible\",\n          K: \"Keystroke\",\n          F: \"Format\",\n          V: \"Validate\",\n          C: \"Calculate\"\n        };\n        exports.AnnotationActionEventType = AnnotationActionEventType;\n        const DocumentActionEventType = {\n          WC: \"WillClose\",\n          WS: \"WillSave\",\n          DS: \"DidSave\",\n          WP: \"WillPrint\",\n          DP: \"DidPrint\"\n        };\n        exports.DocumentActionEventType = DocumentActionEventType;\n        const PageActionEventType = {\n          O: \"PageOpen\",\n          C: \"PageClose\"\n        };\n        exports.PageActionEventType = PageActionEventType;\n        const StreamType = {\n          UNKNOWN: \"UNKNOWN\",\n          FLATE: \"FLATE\",\n          LZW: \"LZW\",\n          DCT: \"DCT\",\n          JPX: \"JPX\",\n          JBIG: \"JBIG\",\n          A85: \"A85\",\n          AHX: \"AHX\",\n          CCF: \"CCF\",\n          RLX: \"RLX\"\n        };\n        exports.StreamType = StreamType;\n        const FontType = {\n          UNKNOWN: \"UNKNOWN\",\n          TYPE1: \"TYPE1\",\n          TYPE1STANDARD: \"TYPE1STANDARD\",\n          TYPE1C: \"TYPE1C\",\n          CIDFONTTYPE0: \"CIDFONTTYPE0\",\n          CIDFONTTYPE0C: \"CIDFONTTYPE0C\",\n          TRUETYPE: \"TRUETYPE\",\n          CIDFONTTYPE2: \"CIDFONTTYPE2\",\n          TYPE3: \"TYPE3\",\n          OPENTYPE: \"OPENTYPE\",\n          TYPE0: \"TYPE0\",\n          MMTYPE1: \"MMTYPE1\"\n        };\n        exports.FontType = FontType;\n        const VerbosityLevel = {\n          ERRORS: 0,\n          WARNINGS: 1,\n          INFOS: 5\n        };\n        exports.VerbosityLevel = VerbosityLevel;\n        const CMapCompressionType = {\n          NONE: 0,\n          BINARY: 1,\n          STREAM: 2\n        };\n        exports.CMapCompressionType = CMapCompressionType;\n        const OPS = {\n          dependency: 1,\n          setLineWidth: 2,\n          setLineCap: 3,\n          setLineJoin: 4,\n          setMiterLimit: 5,\n          setDash: 6,\n          setRenderingIntent: 7,\n          setFlatness: 8,\n          setGState: 9,\n          save: 10,\n          restore: 11,\n          transform: 12,\n          moveTo: 13,\n          lineTo: 14,\n          curveTo: 15,\n          curveTo2: 16,\n          curveTo3: 17,\n          closePath: 18,\n          rectangle: 19,\n          stroke: 20,\n          closeStroke: 21,\n          fill: 22,\n          eoFill: 23,\n          fillStroke: 24,\n          eoFillStroke: 25,\n          closeFillStroke: 26,\n          closeEOFillStroke: 27,\n          endPath: 28,\n          clip: 29,\n          eoClip: 30,\n          beginText: 31,\n          endText: 32,\n          setCharSpacing: 33,\n          setWordSpacing: 34,\n          setHScale: 35,\n          setLeading: 36,\n          setFont: 37,\n          setTextRenderingMode: 38,\n          setTextRise: 39,\n          moveText: 40,\n          setLeadingMoveText: 41,\n          setTextMatrix: 42,\n          nextLine: 43,\n          showText: 44,\n          showSpacedText: 45,\n          nextLineShowText: 46,\n          nextLineSetSpacingShowText: 47,\n          setCharWidth: 48,\n          setCharWidthAndBounds: 49,\n          setStrokeColorSpace: 50,\n          setFillColorSpace: 51,\n          setStrokeColor: 52,\n          setStrokeColorN: 53,\n          setFillColor: 54,\n          setFillColorN: 55,\n          setStrokeGray: 56,\n          setFillGray: 57,\n          setStrokeRGBColor: 58,\n          setFillRGBColor: 59,\n          setStrokeCMYKColor: 60,\n          setFillCMYKColor: 61,\n          shadingFill: 62,\n          beginInlineImage: 63,\n          beginImageData: 64,\n          endInlineImage: 65,\n          paintXObject: 66,\n          markPoint: 67,\n          markPointProps: 68,\n          beginMarkedContent: 69,\n          beginMarkedContentProps: 70,\n          endMarkedContent: 71,\n          beginCompat: 72,\n          endCompat: 73,\n          paintFormXObjectBegin: 74,\n          paintFormXObjectEnd: 75,\n          beginGroup: 76,\n          endGroup: 77,\n          beginAnnotations: 78,\n          endAnnotations: 79,\n          beginAnnotation: 80,\n          endAnnotation: 81,\n          paintJpegXObject: 82,\n          paintImageMaskXObject: 83,\n          paintImageMaskXObjectGroup: 84,\n          paintImageXObject: 85,\n          paintInlineImageXObject: 86,\n          paintInlineImageXObjectGroup: 87,\n          paintImageXObjectRepeat: 88,\n          paintImageMaskXObjectRepeat: 89,\n          paintSolidColorImageMask: 90,\n          constructPath: 91\n        };\n        exports.OPS = OPS;\n        const UNSUPPORTED_FEATURES = {\n          unknown: \"unknown\",\n          forms: \"forms\",\n          javaScript: \"javaScript\",\n          signatures: \"signatures\",\n          smask: \"smask\",\n          shadingPattern: \"shadingPattern\",\n          font: \"font\",\n          errorTilingPattern: \"errorTilingPattern\",\n          errorExtGState: \"errorExtGState\",\n          errorXObject: \"errorXObject\",\n          errorFontLoadType3: \"errorFontLoadType3\",\n          errorFontState: \"errorFontState\",\n          errorFontMissing: \"errorFontMissing\",\n          errorFontTranslate: \"errorFontTranslate\",\n          errorColorSpace: \"errorColorSpace\",\n          errorOperatorList: \"errorOperatorList\",\n          errorFontToUnicode: \"errorFontToUnicode\",\n          errorFontLoadNative: \"errorFontLoadNative\",\n          errorFontBuildPath: \"errorFontBuildPath\",\n          errorFontGetPath: \"errorFontGetPath\",\n          errorMarkedContent: \"errorMarkedContent\"\n        };\n        exports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;\n        const PasswordResponses = {\n          NEED_PASSWORD: 1,\n          INCORRECT_PASSWORD: 2\n        };\n        exports.PasswordResponses = PasswordResponses;\n        let verbosity = VerbosityLevel.WARNINGS;\n\n        function setVerbosityLevel(level) {\n          if (Number.isInteger(level)) {\n            verbosity = level;\n          }\n        }\n\n        function getVerbosityLevel() {\n          return verbosity;\n        }\n\n        function info(msg) {\n          if (verbosity >= VerbosityLevel.INFOS) {\n            console.log(`Info: ${msg}`);\n          }\n        }\n\n        function warn(msg) {\n          if (verbosity >= VerbosityLevel.WARNINGS) {\n            console.log(`Warning: ${msg}`);\n          }\n        }\n\n        function unreachable(msg) {\n          throw new Error(msg);\n        }\n\n        function assert(cond, msg) {\n          if (!cond) {\n            unreachable(msg);\n          }\n        }\n\n        function isSameOrigin(baseUrl, otherUrl) {\n          let base;\n\n          try {\n            base = new URL(baseUrl);\n\n            if (!base.origin || base.origin === \"null\") {\n              return false;\n            }\n          } catch (e) {\n            return false;\n          }\n\n          const other = new URL(otherUrl, base);\n          return base.origin === other.origin;\n        }\n\n        function _isValidProtocol(url) {\n          if (!url) {\n            return false;\n          }\n\n          switch (url.protocol) {\n            case \"http:\":\n            case \"https:\":\n            case \"ftp:\":\n            case \"mailto:\":\n            case \"tel:\":\n              return true;\n\n            default:\n              return false;\n          }\n        }\n\n        function createValidAbsoluteUrl(url, baseUrl) {\n          if (!url) {\n            return null;\n          }\n\n          try {\n            const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n\n            if (_isValidProtocol(absoluteUrl)) {\n              return absoluteUrl;\n            }\n          } catch (ex) {}\n\n          return null;\n        }\n\n        function shadow(obj, prop, value) {\n          Object.defineProperty(obj, prop, {\n            value,\n            enumerable: true,\n            configurable: true,\n            writable: false\n          });\n          return value;\n        }\n\n        const BaseException = function BaseExceptionClosure() {\n          function BaseException(message) {\n            if (this.constructor === BaseException) {\n              unreachable(\"Cannot initialize BaseException.\");\n            }\n\n            this.message = message;\n            this.name = this.constructor.name;\n          }\n\n          BaseException.prototype = new Error();\n          BaseException.constructor = BaseException;\n          return BaseException;\n        }();\n\n        exports.BaseException = BaseException;\n\n        class PasswordException extends BaseException {\n          constructor(msg, code) {\n            super(msg);\n            this.code = code;\n          }\n\n        }\n\n        exports.PasswordException = PasswordException;\n\n        class UnknownErrorException extends BaseException {\n          constructor(msg, details) {\n            super(msg);\n            this.details = details;\n          }\n\n        }\n\n        exports.UnknownErrorException = UnknownErrorException;\n\n        class InvalidPDFException extends BaseException {}\n\n        exports.InvalidPDFException = InvalidPDFException;\n\n        class MissingPDFException extends BaseException {}\n\n        exports.MissingPDFException = MissingPDFException;\n\n        class UnexpectedResponseException extends BaseException {\n          constructor(msg, status) {\n            super(msg);\n            this.status = status;\n          }\n\n        }\n\n        exports.UnexpectedResponseException = UnexpectedResponseException;\n\n        class FormatError extends BaseException {}\n\n        exports.FormatError = FormatError;\n\n        class AbortException extends BaseException {}\n\n        exports.AbortException = AbortException;\n        const NullCharactersRegExp = /\\x00/g;\n\n        function removeNullCharacters(str) {\n          if (typeof str !== \"string\") {\n            warn(\"The argument for removeNullCharacters must be a string.\");\n            return str;\n          }\n\n          return str.replace(NullCharactersRegExp, \"\");\n        }\n\n        function bytesToString(bytes) {\n          assert(bytes !== null && typeof bytes === \"object\" && bytes.length !== undefined, \"Invalid argument for bytesToString\");\n          const length = bytes.length;\n          const MAX_ARGUMENT_COUNT = 8192;\n\n          if (length < MAX_ARGUMENT_COUNT) {\n            return String.fromCharCode.apply(null, bytes);\n          }\n\n          const strBuf = [];\n\n          for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n            const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n            const chunk = bytes.subarray(i, chunkEnd);\n            strBuf.push(String.fromCharCode.apply(null, chunk));\n          }\n\n          return strBuf.join(\"\");\n        }\n\n        function stringToBytes(str) {\n          assert(typeof str === \"string\", \"Invalid argument for stringToBytes\");\n          const length = str.length;\n          const bytes = new Uint8Array(length);\n\n          for (let i = 0; i < length; ++i) {\n            bytes[i] = str.charCodeAt(i) & 0xff;\n          }\n\n          return bytes;\n        }\n\n        function arrayByteLength(arr) {\n          if (arr.length !== undefined) {\n            return arr.length;\n          }\n\n          assert(arr.byteLength !== undefined, \"arrayByteLength - invalid argument.\");\n          return arr.byteLength;\n        }\n\n        function arraysToBytes(arr) {\n          const length = arr.length;\n\n          if (length === 1 && arr[0] instanceof Uint8Array) {\n            return arr[0];\n          }\n\n          let resultLength = 0;\n\n          for (let i = 0; i < length; i++) {\n            resultLength += arrayByteLength(arr[i]);\n          }\n\n          let pos = 0;\n          const data = new Uint8Array(resultLength);\n\n          for (let i = 0; i < length; i++) {\n            let item = arr[i];\n\n            if (!(item instanceof Uint8Array)) {\n              if (typeof item === \"string\") {\n                item = stringToBytes(item);\n              } else {\n                item = new Uint8Array(item);\n              }\n            }\n\n            const itemLength = item.byteLength;\n            data.set(item, pos);\n            pos += itemLength;\n          }\n\n          return data;\n        }\n\n        function string32(value) {\n          return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n        }\n\n        function objectSize(obj) {\n          return Object.keys(obj).length;\n        }\n\n        function objectFromMap(map) {\n          const obj = Object.create(null);\n\n          for (const [key, value] of map) {\n            obj[key] = value;\n          }\n\n          return obj;\n        }\n\n        function isLittleEndian() {\n          const buffer8 = new Uint8Array(4);\n          buffer8[0] = 1;\n          const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n          return view32[0] === 1;\n        }\n\n        const IsLittleEndianCached = {\n          get value() {\n            return shadow(this, \"value\", isLittleEndian());\n          }\n\n        };\n        exports.IsLittleEndianCached = IsLittleEndianCached;\n\n        function isEvalSupported() {\n          try {\n            new Function(\"\");\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }\n\n        const IsEvalSupportedCached = {\n          get value() {\n            return shadow(this, \"value\", isEvalSupported());\n          }\n\n        };\n        exports.IsEvalSupportedCached = IsEvalSupportedCached;\n        const hexNumbers = [...Array(256).keys()].map(n => n.toString(16).padStart(2, \"0\"));\n\n        class Util {\n          static makeHexColor(r, g, b) {\n            return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n          }\n\n          static transform(m1, m2) {\n            return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];\n          }\n\n          static applyTransform(p, m) {\n            const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n            const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n            return [xt, yt];\n          }\n\n          static applyInverseTransform(p, m) {\n            const d = m[0] * m[3] - m[1] * m[2];\n            const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n            const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n            return [xt, yt];\n          }\n\n          static getAxialAlignedBoundingBox(r, m) {\n            const p1 = Util.applyTransform(r, m);\n            const p2 = Util.applyTransform(r.slice(2, 4), m);\n            const p3 = Util.applyTransform([r[0], r[3]], m);\n            const p4 = Util.applyTransform([r[2], r[1]], m);\n            return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];\n          }\n\n          static inverseTransform(m) {\n            const d = m[0] * m[3] - m[1] * m[2];\n            return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n          }\n\n          static apply3dTransform(m, v) {\n            return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];\n          }\n\n          static singularValueDecompose2dScale(m) {\n            const transpose = [m[0], m[2], m[1], m[3]];\n            const a = m[0] * transpose[0] + m[1] * transpose[2];\n            const b = m[0] * transpose[1] + m[1] * transpose[3];\n            const c = m[2] * transpose[0] + m[3] * transpose[2];\n            const d = m[2] * transpose[1] + m[3] * transpose[3];\n            const first = (a + d) / 2;\n            const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;\n            const sx = first + second || 1;\n            const sy = first - second || 1;\n            return [Math.sqrt(sx), Math.sqrt(sy)];\n          }\n\n          static normalizeRect(rect) {\n            const r = rect.slice(0);\n\n            if (rect[0] > rect[2]) {\n              r[0] = rect[2];\n              r[2] = rect[0];\n            }\n\n            if (rect[1] > rect[3]) {\n              r[1] = rect[3];\n              r[3] = rect[1];\n            }\n\n            return r;\n          }\n\n          static intersect(rect1, rect2) {\n            function compare(a, b) {\n              return a - b;\n            }\n\n            const orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n            const orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n            const result = [];\n            rect1 = Util.normalizeRect(rect1);\n            rect2 = Util.normalizeRect(rect2);\n\n            if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {\n              result[0] = orderedX[1];\n              result[2] = orderedX[2];\n            } else {\n              return null;\n            }\n\n            if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {\n              result[1] = orderedY[1];\n              result[3] = orderedY[2];\n            } else {\n              return null;\n            }\n\n            return result;\n          }\n\n        }\n\n        exports.Util = Util;\n        const PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8, 0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018, 0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d, 0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac];\n\n        function stringToPDFString(str) {\n          const length = str.length,\n                strBuf = [];\n\n          if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n            for (let i = 2; i < length; i += 2) {\n              strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));\n            }\n          } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n            for (let i = 2; i < length; i += 2) {\n              strBuf.push(String.fromCharCode(str.charCodeAt(i + 1) << 8 | str.charCodeAt(i)));\n            }\n          } else {\n            for (let i = 0; i < length; ++i) {\n              const code = PDFStringTranslateTable[str.charCodeAt(i)];\n              strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n            }\n          }\n\n          return strBuf.join(\"\");\n        }\n\n        function escapeString(str) {\n          return str.replace(/([()\\\\\\n\\r])/g, match => {\n            if (match === \"\\n\") {\n              return \"\\\\n\";\n            } else if (match === \"\\r\") {\n              return \"\\\\r\";\n            }\n\n            return `\\\\${match}`;\n          });\n        }\n\n        function isAscii(str) {\n          return /^[\\x00-\\x7F]*$/.test(str);\n        }\n\n        function stringToUTF16BEString(str) {\n          const buf = [\"\\xFE\\xFF\"];\n\n          for (let i = 0, ii = str.length; i < ii; i++) {\n            const char = str.charCodeAt(i);\n            buf.push(String.fromCharCode(char >> 8 & 0xff), String.fromCharCode(char & 0xff));\n          }\n\n          return buf.join(\"\");\n        }\n\n        function stringToUTF8String(str) {\n          return decodeURIComponent(escape(str));\n        }\n\n        function utf8StringToString(str) {\n          return unescape(encodeURIComponent(str));\n        }\n\n        function isBool(v) {\n          return typeof v === \"boolean\";\n        }\n\n        function isNum(v) {\n          return typeof v === \"number\";\n        }\n\n        function isString(v) {\n          return typeof v === \"string\";\n        }\n\n        function isArrayBuffer(v) {\n          return typeof v === \"object\" && v !== null && v.byteLength !== undefined;\n        }\n\n        function isArrayEqual(arr1, arr2) {\n          if (arr1.length !== arr2.length) {\n            return false;\n          }\n\n          for (let i = 0, ii = arr1.length; i < ii; i++) {\n            if (arr1[i] !== arr2[i]) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n        function getModificationDate() {\n          let date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n          const buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, \"0\"), date.getUTCDate().toString().padStart(2, \"0\"), date.getUTCHours().toString().padStart(2, \"0\"), date.getUTCMinutes().toString().padStart(2, \"0\"), date.getUTCSeconds().toString().padStart(2, \"0\")];\n          return buffer.join(\"\");\n        }\n\n        function createPromiseCapability() {\n          const capability = Object.create(null);\n          let isSettled = false;\n          Object.defineProperty(capability, \"settled\", {\n            get() {\n              return isSettled;\n            }\n\n          });\n          capability.promise = new Promise(function (resolve, reject) {\n            capability.resolve = function (data) {\n              isSettled = true;\n              resolve(data);\n            };\n\n            capability.reject = function (reason) {\n              isSettled = true;\n              reject(reason);\n            };\n          });\n          return capability;\n        }\n\n        function createObjectURL(data) {\n          let contentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n          let forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n          if (URL.createObjectURL && !forceDataSchema) {\n            return URL.createObjectURL(new Blob([data], {\n              type: contentType\n            }));\n          }\n\n          const digits = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n          let buffer = `data:${contentType};base64,`;\n\n          for (let i = 0, ii = data.length; i < ii; i += 3) {\n            const b1 = data[i] & 0xff;\n            const b2 = data[i + 1] & 0xff;\n            const b3 = data[i + 2] & 0xff;\n            const d1 = b1 >> 2,\n                  d2 = (b1 & 3) << 4 | b2 >> 4;\n            const d3 = i + 1 < ii ? (b2 & 0xf) << 2 | b3 >> 6 : 64;\n            const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n            buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n          }\n\n          return buffer;\n        }\n        /***/\n\n      },\n      /* 3 */\n\n      /***/\n      (__unused_webpack_module, __unused_webpack_exports, __w_pdfjs_require__) => {\n        var _is_node = __w_pdfjs_require__(4);\n\n        ;\n        /***/\n      },\n      /* 4 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.isNodeJS = void 0;\n        const isNodeJS = typeof process === \"object\" && process + \"\" === \"[object process]\" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== \"browser\");\n        exports.isNodeJS = isNodeJS;\n        /***/\n      },\n      /* 5 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.BaseSVGFactory = exports.BaseStandardFontDataFactory = exports.BaseCMapReaderFactory = exports.BaseCanvasFactory = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class BaseCanvasFactory {\n          constructor() {\n            if (this.constructor === BaseCanvasFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseCanvasFactory.\");\n            }\n          }\n\n          create(width, height) {\n            if (width <= 0 || height <= 0) {\n              throw new Error(\"Invalid canvas size\");\n            }\n\n            const canvas = this._createCanvas(width, height);\n\n            return {\n              canvas,\n              context: canvas.getContext(\"2d\")\n            };\n          }\n\n          reset(canvasAndContext, width, height) {\n            if (!canvasAndContext.canvas) {\n              throw new Error(\"Canvas is not specified\");\n            }\n\n            if (width <= 0 || height <= 0) {\n              throw new Error(\"Invalid canvas size\");\n            }\n\n            canvasAndContext.canvas.width = width;\n            canvasAndContext.canvas.height = height;\n          }\n\n          destroy(canvasAndContext) {\n            if (!canvasAndContext.canvas) {\n              throw new Error(\"Canvas is not specified\");\n            }\n\n            canvasAndContext.canvas.width = 0;\n            canvasAndContext.canvas.height = 0;\n            canvasAndContext.canvas = null;\n            canvasAndContext.context = null;\n          }\n\n          _createCanvas(width, height) {\n            (0, _util.unreachable)(\"Abstract method `_createCanvas` called.\");\n          }\n\n        }\n\n        exports.BaseCanvasFactory = BaseCanvasFactory;\n\n        class BaseCMapReaderFactory {\n          constructor(_ref3) {\n            let {\n              baseUrl = null,\n              isCompressed = false\n            } = _ref3;\n\n            if (this.constructor === BaseCMapReaderFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseCMapReaderFactory.\");\n            }\n\n            this.baseUrl = baseUrl;\n            this.isCompressed = isCompressed;\n          }\n\n          async fetch(_ref4) {\n            let {\n              name\n            } = _ref4;\n\n            if (!this.baseUrl) {\n              throw new Error('The CMap \"baseUrl\" parameter must be specified, ensure that ' + 'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.');\n            }\n\n            if (!name) {\n              throw new Error(\"CMap name must be specified.\");\n            }\n\n            const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n            const compressionType = this.isCompressed ? _util.CMapCompressionType.BINARY : _util.CMapCompressionType.NONE;\n            return this._fetchData(url, compressionType).catch(reason => {\n              throw new Error(`Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`);\n            });\n          }\n\n          _fetchData(url, compressionType) {\n            (0, _util.unreachable)(\"Abstract method `_fetchData` called.\");\n          }\n\n        }\n\n        exports.BaseCMapReaderFactory = BaseCMapReaderFactory;\n\n        class BaseStandardFontDataFactory {\n          constructor(_ref5) {\n            let {\n              baseUrl = null\n            } = _ref5;\n\n            if (this.constructor === BaseStandardFontDataFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseStandardFontDataFactory.\");\n            }\n\n            this.baseUrl = baseUrl;\n          }\n\n          async fetch(_ref6) {\n            let {\n              filename\n            } = _ref6;\n\n            if (!this.baseUrl) {\n              throw new Error('The standard font \"baseUrl\" parameter must be specified, ensure that ' + 'the \"standardFontDataUrl\" API parameter is provided.');\n            }\n\n            if (!filename) {\n              throw new Error(\"Font filename must be specified.\");\n            }\n\n            const url = `${this.baseUrl}${filename}`;\n            return this._fetchData(url).catch(reason => {\n              throw new Error(`Unable to load font data at: ${url}`);\n            });\n          }\n\n          _fetchData(url) {\n            (0, _util.unreachable)(\"Abstract method `_fetchData` called.\");\n          }\n\n        }\n\n        exports.BaseStandardFontDataFactory = BaseStandardFontDataFactory;\n\n        class BaseSVGFactory {\n          constructor() {\n            if (this.constructor === BaseSVGFactory) {\n              (0, _util.unreachable)(\"Cannot initialize BaseSVGFactory.\");\n            }\n          }\n\n          create(width, height) {\n            if (width <= 0 || height <= 0) {\n              throw new Error(\"Invalid SVG dimensions\");\n            }\n\n            const svg = this._createSVG(\"svg:svg\");\n\n            svg.setAttribute(\"version\", \"1.1\");\n            svg.setAttribute(\"width\", `${width}px`);\n            svg.setAttribute(\"height\", `${height}px`);\n            svg.setAttribute(\"preserveAspectRatio\", \"none\");\n            svg.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n            return svg;\n          }\n\n          createElement(type) {\n            if (typeof type !== \"string\") {\n              throw new Error(\"Invalid SVG element type\");\n            }\n\n            return this._createSVG(type);\n          }\n\n          _createSVG(type) {\n            (0, _util.unreachable)(\"Abstract method `_createSVG` called.\");\n          }\n\n        }\n\n        exports.BaseSVGFactory = BaseSVGFactory;\n        /***/\n      },\n      /* 6 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.getDocument = getDocument;\n        exports.setPDFNetworkStreamFactory = setPDFNetworkStreamFactory;\n        exports.version = exports.PDFWorker = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFDataRangeTransport = exports.LoopbackPort = exports.DefaultStandardFontDataFactory = exports.DefaultCMapReaderFactory = exports.DefaultCanvasFactory = exports.build = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _font_loader = __w_pdfjs_require__(7);\n\n        var _node_utils = __w_pdfjs_require__(8);\n\n        var _annotation_storage = __w_pdfjs_require__(9);\n\n        var _canvas = __w_pdfjs_require__(10);\n\n        var _worker_options = __w_pdfjs_require__(12);\n\n        var _is_node = __w_pdfjs_require__(4);\n\n        var _message_handler = __w_pdfjs_require__(13);\n\n        var _metadata = __w_pdfjs_require__(14);\n\n        var _optional_content_config = __w_pdfjs_require__(15);\n\n        var _transport_stream = __w_pdfjs_require__(16);\n\n        const DEFAULT_RANGE_CHUNK_SIZE = 65536;\n        const RENDERING_CANCELLED_TIMEOUT = 100;\n        const DefaultCanvasFactory = _is_node.isNodeJS ? _node_utils.NodeCanvasFactory : _display_utils.DOMCanvasFactory;\n        exports.DefaultCanvasFactory = DefaultCanvasFactory;\n        const DefaultCMapReaderFactory = _is_node.isNodeJS ? _node_utils.NodeCMapReaderFactory : _display_utils.DOMCMapReaderFactory;\n        exports.DefaultCMapReaderFactory = DefaultCMapReaderFactory;\n        const DefaultStandardFontDataFactory = _is_node.isNodeJS ? _node_utils.NodeStandardFontDataFactory : _display_utils.DOMStandardFontDataFactory;\n        exports.DefaultStandardFontDataFactory = DefaultStandardFontDataFactory;\n        let createPDFNetworkStream;\n\n        function setPDFNetworkStreamFactory(pdfNetworkStreamFactory) {\n          createPDFNetworkStream = pdfNetworkStreamFactory;\n        }\n\n        function getDocument(src) {\n          const task = new PDFDocumentLoadingTask();\n          let source;\n\n          if (typeof src === \"string\" || src instanceof URL) {\n            source = {\n              url: src\n            };\n          } else if ((0, _util.isArrayBuffer)(src)) {\n            source = {\n              data: src\n            };\n          } else if (src instanceof PDFDataRangeTransport) {\n            source = {\n              range: src\n            };\n          } else {\n            if (typeof src !== \"object\") {\n              throw new Error(\"Invalid parameter in getDocument, \" + \"need either string, URL, Uint8Array, or parameter object.\");\n            }\n\n            if (!src.url && !src.data && !src.range) {\n              throw new Error(\"Invalid parameter object: need either .data, .range or .url\");\n            }\n\n            source = src;\n          }\n\n          const params = Object.create(null);\n          let rangeTransport = null,\n              worker = null;\n\n          for (const key in source) {\n            const value = source[key];\n\n            switch (key) {\n              case \"url\":\n                if (typeof window !== \"undefined\") {\n                  try {\n                    params[key] = new URL(value, window.location).href;\n                    continue;\n                  } catch (ex) {\n                    (0, _util.warn)(`Cannot create valid URL: \"${ex}\".`);\n                  }\n                } else if (typeof value === \"string\" || value instanceof URL) {\n                  params[key] = value.toString();\n                  continue;\n                }\n\n                throw new Error(\"Invalid PDF url data: \" + \"either string or URL-object is expected in the url property.\");\n\n              case \"range\":\n                rangeTransport = value;\n                continue;\n\n              case \"worker\":\n                worker = value;\n                continue;\n\n              case \"data\":\n                if (_is_node.isNodeJS && typeof Buffer !== \"undefined\" && value instanceof Buffer) {\n                  params[key] = new Uint8Array(value);\n                } else if (value instanceof Uint8Array) {\n                  break;\n                } else if (typeof value === \"string\") {\n                  params[key] = (0, _util.stringToBytes)(value);\n                } else if (typeof value === \"object\" && value !== null && !isNaN(value.length)) {\n                  params[key] = new Uint8Array(value);\n                } else if ((0, _util.isArrayBuffer)(value)) {\n                  params[key] = new Uint8Array(value);\n                } else {\n                  throw new Error(\"Invalid PDF binary data: either typed array, \" + \"string, or array-like object is expected in the data property.\");\n                }\n\n                continue;\n            }\n\n            params[key] = value;\n          }\n\n          params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;\n          params.CMapReaderFactory = params.CMapReaderFactory || DefaultCMapReaderFactory;\n          params.StandardFontDataFactory = params.StandardFontDataFactory || DefaultStandardFontDataFactory;\n          params.ignoreErrors = params.stopAtErrors !== true;\n          params.fontExtraProperties = params.fontExtraProperties === true;\n          params.pdfBug = params.pdfBug === true;\n          params.enableXfa = params.enableXfa === true;\n\n          if (typeof params.docBaseUrl !== \"string\" || (0, _display_utils.isDataScheme)(params.docBaseUrl)) {\n            params.docBaseUrl = null;\n          }\n\n          if (!Number.isInteger(params.maxImageSize)) {\n            params.maxImageSize = -1;\n          }\n\n          if (typeof params.useWorkerFetch !== \"boolean\") {\n            params.useWorkerFetch = params.CMapReaderFactory === _display_utils.DOMCMapReaderFactory && params.StandardFontDataFactory === _display_utils.DOMStandardFontDataFactory;\n          }\n\n          if (typeof params.isEvalSupported !== \"boolean\") {\n            params.isEvalSupported = true;\n          }\n\n          if (typeof params.disableFontFace !== \"boolean\") {\n            params.disableFontFace = _is_node.isNodeJS;\n          }\n\n          if (typeof params.useSystemFonts !== \"boolean\") {\n            params.useSystemFonts = !_is_node.isNodeJS && !params.disableFontFace;\n          }\n\n          if (typeof params.ownerDocument === \"undefined\") {\n            params.ownerDocument = globalThis.document;\n          }\n\n          if (typeof params.disableRange !== \"boolean\") {\n            params.disableRange = false;\n          }\n\n          if (typeof params.disableStream !== \"boolean\") {\n            params.disableStream = false;\n          }\n\n          if (typeof params.disableAutoFetch !== \"boolean\") {\n            params.disableAutoFetch = false;\n          }\n\n          (0, _util.setVerbosityLevel)(params.verbosity);\n\n          if (!worker) {\n            const workerParams = {\n              verbosity: params.verbosity,\n              port: _worker_options.GlobalWorkerOptions.workerPort\n            };\n            worker = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);\n            task._worker = worker;\n          }\n\n          const docId = task.docId;\n          worker.promise.then(function () {\n            if (task.destroyed) {\n              throw new Error(\"Loading aborted\");\n            }\n\n            const workerIdPromise = _fetchDocument(worker, params, rangeTransport, docId);\n\n            const networkStreamPromise = new Promise(function (resolve) {\n              let networkStream;\n\n              if (rangeTransport) {\n                networkStream = new _transport_stream.PDFDataTransportStream({\n                  length: params.length,\n                  initialData: params.initialData,\n                  progressiveDone: params.progressiveDone,\n                  contentDispositionFilename: params.contentDispositionFilename,\n                  disableRange: params.disableRange,\n                  disableStream: params.disableStream\n                }, rangeTransport);\n              } else if (!params.data) {\n                networkStream = createPDFNetworkStream({\n                  url: params.url,\n                  length: params.length,\n                  httpHeaders: params.httpHeaders,\n                  withCredentials: params.withCredentials,\n                  rangeChunkSize: params.rangeChunkSize,\n                  disableRange: params.disableRange,\n                  disableStream: params.disableStream\n                });\n              }\n\n              resolve(networkStream);\n            });\n            return Promise.all([workerIdPromise, networkStreamPromise]).then(function (_ref7) {\n              let [workerId, networkStream] = _ref7;\n\n              if (task.destroyed) {\n                throw new Error(\"Loading aborted\");\n              }\n\n              const messageHandler = new _message_handler.MessageHandler(docId, workerId, worker.port);\n              messageHandler.postMessageTransfers = worker.postMessageTransfers;\n              const transport = new WorkerTransport(messageHandler, task, networkStream, params);\n              task._transport = transport;\n              messageHandler.send(\"Ready\", null);\n            });\n          }).catch(task._capability.reject);\n          return task;\n        }\n\n        function _fetchDocument(worker, source, pdfDataRangeTransport, docId) {\n          if (worker.destroyed) {\n            return Promise.reject(new Error(\"Worker was destroyed\"));\n          }\n\n          if (pdfDataRangeTransport) {\n            source.length = pdfDataRangeTransport.length;\n            source.initialData = pdfDataRangeTransport.initialData;\n            source.progressiveDone = pdfDataRangeTransport.progressiveDone;\n            source.contentDispositionFilename = pdfDataRangeTransport.contentDispositionFilename;\n          }\n\n          return worker.messageHandler.sendWithPromise(\"GetDocRequest\", {\n            docId,\n            apiVersion: '2.10.377',\n            source: {\n              data: source.data,\n              url: source.url,\n              password: source.password,\n              disableAutoFetch: source.disableAutoFetch,\n              rangeChunkSize: source.rangeChunkSize,\n              length: source.length\n            },\n            maxImageSize: source.maxImageSize,\n            disableFontFace: source.disableFontFace,\n            postMessageTransfers: worker.postMessageTransfers,\n            docBaseUrl: source.docBaseUrl,\n            ignoreErrors: source.ignoreErrors,\n            isEvalSupported: source.isEvalSupported,\n            fontExtraProperties: source.fontExtraProperties,\n            enableXfa: source.enableXfa,\n            useSystemFonts: source.useSystemFonts,\n            cMapUrl: source.useWorkerFetch ? source.cMapUrl : null,\n            standardFontDataUrl: source.useWorkerFetch ? source.standardFontDataUrl : null\n          }).then(function (workerId) {\n            if (worker.destroyed) {\n              throw new Error(\"Worker was destroyed\");\n            }\n\n            return workerId;\n          });\n        }\n\n        const PDFDocumentLoadingTask = function PDFDocumentLoadingTaskClosure() {\n          let nextDocumentId = 0;\n\n          class PDFDocumentLoadingTask {\n            constructor() {\n              this._capability = (0, _util.createPromiseCapability)();\n              this._transport = null;\n              this._worker = null;\n              this.docId = \"d\" + nextDocumentId++;\n              this.destroyed = false;\n              this.onPassword = null;\n              this.onProgress = null;\n              this.onUnsupportedFeature = null;\n            }\n\n            get promise() {\n              return this._capability.promise;\n            }\n\n            destroy() {\n              this.destroyed = true;\n              const transportDestroyed = !this._transport ? Promise.resolve() : this._transport.destroy();\n              return transportDestroyed.then(() => {\n                this._transport = null;\n\n                if (this._worker) {\n                  this._worker.destroy();\n\n                  this._worker = null;\n                }\n              });\n            }\n\n          }\n\n          return PDFDocumentLoadingTask;\n        }();\n\n        class PDFDataRangeTransport {\n          constructor(length, initialData) {\n            let progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            let contentDispositionFilename = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n            this.length = length;\n            this.initialData = initialData;\n            this.progressiveDone = progressiveDone;\n            this.contentDispositionFilename = contentDispositionFilename;\n            this._rangeListeners = [];\n            this._progressListeners = [];\n            this._progressiveReadListeners = [];\n            this._progressiveDoneListeners = [];\n            this._readyCapability = (0, _util.createPromiseCapability)();\n          }\n\n          addRangeListener(listener) {\n            this._rangeListeners.push(listener);\n          }\n\n          addProgressListener(listener) {\n            this._progressListeners.push(listener);\n          }\n\n          addProgressiveReadListener(listener) {\n            this._progressiveReadListeners.push(listener);\n          }\n\n          addProgressiveDoneListener(listener) {\n            this._progressiveDoneListeners.push(listener);\n          }\n\n          onDataRange(begin, chunk) {\n            for (const listener of this._rangeListeners) {\n              listener(begin, chunk);\n            }\n          }\n\n          onDataProgress(loaded, total) {\n            this._readyCapability.promise.then(() => {\n              for (const listener of this._progressListeners) {\n                listener(loaded, total);\n              }\n            });\n          }\n\n          onDataProgressiveRead(chunk) {\n            this._readyCapability.promise.then(() => {\n              for (const listener of this._progressiveReadListeners) {\n                listener(chunk);\n              }\n            });\n          }\n\n          onDataProgressiveDone() {\n            this._readyCapability.promise.then(() => {\n              for (const listener of this._progressiveDoneListeners) {\n                listener();\n              }\n            });\n          }\n\n          transportReady() {\n            this._readyCapability.resolve();\n          }\n\n          requestDataRange(begin, end) {\n            (0, _util.unreachable)(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n          }\n\n          abort() {}\n\n        }\n\n        exports.PDFDataRangeTransport = PDFDataRangeTransport;\n\n        class PDFDocumentProxy {\n          constructor(pdfInfo, transport) {\n            this._pdfInfo = pdfInfo;\n            this._transport = transport;\n            Object.defineProperty(this, \"fingerprint\", {\n              get() {\n                (0, _display_utils.deprecated)(\"`PDFDocumentProxy.fingerprint`, \" + \"please use `PDFDocumentProxy.fingerprints` instead.\");\n                return this.fingerprints[0];\n              }\n\n            });\n          }\n\n          get annotationStorage() {\n            return this._transport.annotationStorage;\n          }\n\n          get numPages() {\n            return this._pdfInfo.numPages;\n          }\n\n          get fingerprints() {\n            return this._pdfInfo.fingerprints;\n          }\n\n          get isPureXfa() {\n            return !!this._transport._htmlForXfa;\n          }\n\n          get allXfaHtml() {\n            return this._transport._htmlForXfa;\n          }\n\n          getPage(pageNumber) {\n            return this._transport.getPage(pageNumber);\n          }\n\n          getPageIndex(ref) {\n            return this._transport.getPageIndex(ref);\n          }\n\n          getDestinations() {\n            return this._transport.getDestinations();\n          }\n\n          getDestination(id) {\n            return this._transport.getDestination(id);\n          }\n\n          getPageLabels() {\n            return this._transport.getPageLabels();\n          }\n\n          getPageLayout() {\n            return this._transport.getPageLayout();\n          }\n\n          getPageMode() {\n            return this._transport.getPageMode();\n          }\n\n          getViewerPreferences() {\n            return this._transport.getViewerPreferences();\n          }\n\n          getOpenAction() {\n            return this._transport.getOpenAction();\n          }\n\n          getAttachments() {\n            return this._transport.getAttachments();\n          }\n\n          getJavaScript() {\n            return this._transport.getJavaScript();\n          }\n\n          getJSActions() {\n            return this._transport.getDocJSActions();\n          }\n\n          getOutline() {\n            return this._transport.getOutline();\n          }\n\n          getOptionalContentConfig() {\n            return this._transport.getOptionalContentConfig();\n          }\n\n          getPermissions() {\n            return this._transport.getPermissions();\n          }\n\n          getMetadata() {\n            return this._transport.getMetadata();\n          }\n\n          getMarkInfo() {\n            return this._transport.getMarkInfo();\n          }\n\n          getData() {\n            return this._transport.getData();\n          }\n\n          getDownloadInfo() {\n            return this._transport.downloadInfoCapability.promise;\n          }\n\n          getStats() {\n            return this._transport.getStats();\n          }\n\n          cleanup() {\n            let keepLoadedFonts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);\n          }\n\n          destroy() {\n            return this.loadingTask.destroy();\n          }\n\n          get loadingParams() {\n            return this._transport.loadingParams;\n          }\n\n          get loadingTask() {\n            return this._transport.loadingTask;\n          }\n\n          saveDocument() {\n            if (this._transport.annotationStorage.size <= 0) {\n              (0, _display_utils.deprecated)(\"saveDocument called while `annotationStorage` is empty, \" + \"please use the getData-method instead.\");\n            }\n\n            return this._transport.saveDocument();\n          }\n\n          getFieldObjects() {\n            return this._transport.getFieldObjects();\n          }\n\n          hasJSActions() {\n            return this._transport.hasJSActions();\n          }\n\n          getCalculationOrderIds() {\n            return this._transport.getCalculationOrderIds();\n          }\n\n        }\n\n        exports.PDFDocumentProxy = PDFDocumentProxy;\n\n        class PDFPageProxy {\n          constructor(pageIndex, pageInfo, transport, ownerDocument) {\n            let pdfBug = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n            this._pageIndex = pageIndex;\n            this._pageInfo = pageInfo;\n            this._ownerDocument = ownerDocument;\n            this._transport = transport;\n            this._stats = pdfBug ? new _display_utils.StatTimer() : null;\n            this._pdfBug = pdfBug;\n            this.commonObjs = transport.commonObjs;\n            this.objs = new PDFObjects();\n            this.cleanupAfterRender = false;\n            this.pendingCleanup = false;\n            this._intentStates = new Map();\n            this.destroyed = false;\n          }\n\n          get pageNumber() {\n            return this._pageIndex + 1;\n          }\n\n          get rotate() {\n            return this._pageInfo.rotate;\n          }\n\n          get ref() {\n            return this._pageInfo.ref;\n          }\n\n          get userUnit() {\n            return this._pageInfo.userUnit;\n          }\n\n          get view() {\n            return this._pageInfo.view;\n          }\n\n          getViewport() {\n            let {\n              scale,\n              rotation = this.rotate,\n              offsetX = 0,\n              offsetY = 0,\n              dontFlip = false\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            return new _display_utils.PageViewport({\n              viewBox: this.view,\n              scale,\n              rotation,\n              offsetX,\n              offsetY,\n              dontFlip\n            });\n          }\n\n          getAnnotations() {\n            let {\n              intent = null\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            const renderingIntent = intent === \"display\" || intent === \"print\" ? intent : null;\n\n            if (!this._annotationsPromise || this._annotationsIntent !== renderingIntent) {\n              this._annotationsPromise = this._transport.getAnnotations(this._pageIndex, renderingIntent);\n              this._annotationsIntent = renderingIntent;\n            }\n\n            return this._annotationsPromise;\n          }\n\n          getJSActions() {\n            return this._jsActionsPromise || (this._jsActionsPromise = this._transport.getPageJSActions(this._pageIndex));\n          }\n\n          async getXfa() {\n            return this._transport._htmlForXfa?.children[this._pageIndex] || null;\n          }\n\n          render(_ref8) {\n            let {\n              canvasContext,\n              viewport,\n              intent = \"display\",\n              renderInteractiveForms = false,\n              transform = null,\n              imageLayer = null,\n              canvasFactory = null,\n              background = null,\n              includeAnnotationStorage = false,\n              optionalContentConfigPromise = null\n            } = _ref8;\n\n            var _intentState;\n\n            if (this._stats) {\n              this._stats.time(\"Overall\");\n            }\n\n            const renderingIntent = intent === \"print\" ? \"print\" : \"display\";\n            this.pendingCleanup = false;\n\n            if (!optionalContentConfigPromise) {\n              optionalContentConfigPromise = this._transport.getOptionalContentConfig();\n            }\n\n            let intentState = this._intentStates.get(renderingIntent);\n\n            if (!intentState) {\n              intentState = Object.create(null);\n\n              this._intentStates.set(renderingIntent, intentState);\n            }\n\n            if (intentState.streamReaderCancelTimeout) {\n              clearTimeout(intentState.streamReaderCancelTimeout);\n              intentState.streamReaderCancelTimeout = null;\n            }\n\n            const canvasFactoryInstance = canvasFactory || new DefaultCanvasFactory({\n              ownerDocument: this._ownerDocument\n            });\n            const annotationStorage = includeAnnotationStorage ? this._transport.annotationStorage.serializable : null;\n\n            if (!intentState.displayReadyCapability) {\n              intentState.displayReadyCapability = (0, _util.createPromiseCapability)();\n              intentState.operatorList = {\n                fnArray: [],\n                argsArray: [],\n                lastChunk: false\n              };\n\n              if (this._stats) {\n                this._stats.time(\"Page Request\");\n              }\n\n              this._pumpOperatorList({\n                pageIndex: this._pageIndex,\n                intent: renderingIntent,\n                renderInteractiveForms: renderInteractiveForms === true,\n                annotationStorage\n              });\n            }\n\n            const complete = error => {\n              intentState.renderTasks.delete(internalRenderTask);\n\n              if (this.cleanupAfterRender || renderingIntent === \"print\") {\n                this.pendingCleanup = true;\n              }\n\n              this._tryCleanup();\n\n              if (error) {\n                internalRenderTask.capability.reject(error);\n\n                this._abortOperatorList({\n                  intentState,\n                  reason: error\n                });\n              } else {\n                internalRenderTask.capability.resolve();\n              }\n\n              if (this._stats) {\n                this._stats.timeEnd(\"Rendering\");\n\n                this._stats.timeEnd(\"Overall\");\n              }\n            };\n\n            const internalRenderTask = new InternalRenderTask({\n              callback: complete,\n              params: {\n                canvasContext,\n                viewport,\n                transform,\n                imageLayer,\n                background\n              },\n              objs: this.objs,\n              commonObjs: this.commonObjs,\n              operatorList: intentState.operatorList,\n              pageIndex: this._pageIndex,\n              canvasFactory: canvasFactoryInstance,\n              useRequestAnimationFrame: renderingIntent !== \"print\",\n              pdfBug: this._pdfBug\n            });\n            ((_intentState = intentState).renderTasks || (_intentState.renderTasks = new Set())).add(internalRenderTask);\n            const renderTask = internalRenderTask.task;\n            Promise.all([intentState.displayReadyCapability.promise, optionalContentConfigPromise]).then(_ref9 => {\n              let [transparency, optionalContentConfig] = _ref9;\n\n              if (this.pendingCleanup) {\n                complete();\n                return;\n              }\n\n              if (this._stats) {\n                this._stats.time(\"Rendering\");\n              }\n\n              internalRenderTask.initializeGraphics({\n                transparency,\n                optionalContentConfig\n              });\n              internalRenderTask.operatorListChanged();\n            }).catch(complete);\n            return renderTask;\n          }\n\n          getOperatorList() {\n            let {\n              intent = \"display\"\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            function operatorListChanged() {\n              if (intentState.operatorList.lastChunk) {\n                intentState.opListReadCapability.resolve(intentState.operatorList);\n                intentState.renderTasks.delete(opListTask);\n              }\n            }\n\n            const renderingIntent = `oplist-${intent === \"print\" ? \"print\" : \"display\"}`;\n\n            let intentState = this._intentStates.get(renderingIntent);\n\n            if (!intentState) {\n              intentState = Object.create(null);\n\n              this._intentStates.set(renderingIntent, intentState);\n            }\n\n            let opListTask;\n\n            if (!intentState.opListReadCapability) {\n              var _intentState2;\n\n              opListTask = Object.create(null);\n              opListTask.operatorListChanged = operatorListChanged;\n              intentState.opListReadCapability = (0, _util.createPromiseCapability)();\n              ((_intentState2 = intentState).renderTasks || (_intentState2.renderTasks = new Set())).add(opListTask);\n              intentState.operatorList = {\n                fnArray: [],\n                argsArray: [],\n                lastChunk: false\n              };\n\n              if (this._stats) {\n                this._stats.time(\"Page Request\");\n              }\n\n              this._pumpOperatorList({\n                pageIndex: this._pageIndex,\n                intent: renderingIntent\n              });\n            }\n\n            return intentState.opListReadCapability.promise;\n          }\n\n          streamTextContent() {\n            let {\n              normalizeWhitespace = false,\n              disableCombineTextItems = false,\n              includeMarkedContent = false\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            const TEXT_CONTENT_CHUNK_SIZE = 100;\n            return this._transport.messageHandler.sendWithStream(\"GetTextContent\", {\n              pageIndex: this._pageIndex,\n              normalizeWhitespace: normalizeWhitespace === true,\n              combineTextItems: disableCombineTextItems !== true,\n              includeMarkedContent: includeMarkedContent === true\n            }, {\n              highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n\n              size(textContent) {\n                return textContent.items.length;\n              }\n\n            });\n          }\n\n          getTextContent() {\n            let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n            const readableStream = this.streamTextContent(params);\n            return new Promise(function (resolve, reject) {\n              function pump() {\n                reader.read().then(function (_ref10) {\n                  let {\n                    value,\n                    done\n                  } = _ref10;\n\n                  if (done) {\n                    resolve(textContent);\n                    return;\n                  }\n\n                  Object.assign(textContent.styles, value.styles);\n                  textContent.items.push(...value.items);\n                  pump();\n                }, reject);\n              }\n\n              const reader = readableStream.getReader();\n              const textContent = {\n                items: [],\n                styles: Object.create(null)\n              };\n              pump();\n            });\n          }\n\n          getStructTree() {\n            return this._structTreePromise || (this._structTreePromise = this._transport.getStructTree(this._pageIndex));\n          }\n\n          _destroy() {\n            this.destroyed = true;\n            this._transport.pageCache[this._pageIndex] = null;\n            const waitOn = [];\n\n            for (const [intent, intentState] of this._intentStates) {\n              this._abortOperatorList({\n                intentState,\n                reason: new Error(\"Page was destroyed.\"),\n                force: true\n              });\n\n              if (intent.startsWith(\"oplist-\")) {\n                continue;\n              }\n\n              for (const internalRenderTask of intentState.renderTasks) {\n                waitOn.push(internalRenderTask.completed);\n                internalRenderTask.cancel();\n              }\n            }\n\n            this.objs.clear();\n            this._annotationsPromise = null;\n            this._jsActionsPromise = null;\n            this._structTreePromise = null;\n            this.pendingCleanup = false;\n            return Promise.all(waitOn);\n          }\n\n          cleanup() {\n            let resetStats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            this.pendingCleanup = true;\n            return this._tryCleanup(resetStats);\n          }\n\n          _tryCleanup() {\n            let resetStats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (!this.pendingCleanup) {\n              return false;\n            }\n\n            for (const {\n              renderTasks,\n              operatorList\n            } of this._intentStates.values()) {\n              if (renderTasks.size > 0 || !operatorList.lastChunk) {\n                return false;\n              }\n            }\n\n            this._intentStates.clear();\n\n            this.objs.clear();\n            this._annotationsPromise = null;\n            this._jsActionsPromise = null;\n            this._structTreePromise = null;\n\n            if (resetStats && this._stats) {\n              this._stats = new _display_utils.StatTimer();\n            }\n\n            this.pendingCleanup = false;\n            return true;\n          }\n\n          _startRenderPage(transparency, intent) {\n            const intentState = this._intentStates.get(intent);\n\n            if (!intentState) {\n              return;\n            }\n\n            if (this._stats) {\n              this._stats.timeEnd(\"Page Request\");\n            }\n\n            if (intentState.displayReadyCapability) {\n              intentState.displayReadyCapability.resolve(transparency);\n            }\n          }\n\n          _renderPageChunk(operatorListChunk, intentState) {\n            for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\n              intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n              intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n            }\n\n            intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n\n            for (const internalRenderTask of intentState.renderTasks) {\n              internalRenderTask.operatorListChanged();\n            }\n\n            if (operatorListChunk.lastChunk) {\n              this._tryCleanup();\n            }\n          }\n\n          _pumpOperatorList(args) {\n            (0, _util.assert)(args.intent, 'PDFPageProxy._pumpOperatorList: Expected \"intent\" argument.');\n\n            const readableStream = this._transport.messageHandler.sendWithStream(\"GetOperatorList\", args);\n\n            const reader = readableStream.getReader();\n\n            const intentState = this._intentStates.get(args.intent);\n\n            intentState.streamReader = reader;\n\n            const pump = () => {\n              reader.read().then(_ref11 => {\n                let {\n                  value,\n                  done\n                } = _ref11;\n\n                if (done) {\n                  intentState.streamReader = null;\n                  return;\n                }\n\n                if (this._transport.destroyed) {\n                  return;\n                }\n\n                this._renderPageChunk(value, intentState);\n\n                pump();\n              }, reason => {\n                intentState.streamReader = null;\n\n                if (this._transport.destroyed) {\n                  return;\n                }\n\n                if (intentState.operatorList) {\n                  intentState.operatorList.lastChunk = true;\n\n                  for (const internalRenderTask of intentState.renderTasks) {\n                    internalRenderTask.operatorListChanged();\n                  }\n\n                  this._tryCleanup();\n                }\n\n                if (intentState.displayReadyCapability) {\n                  intentState.displayReadyCapability.reject(reason);\n                } else if (intentState.opListReadCapability) {\n                  intentState.opListReadCapability.reject(reason);\n                } else {\n                  throw reason;\n                }\n              });\n            };\n\n            pump();\n          }\n\n          _abortOperatorList(_ref12) {\n            let {\n              intentState,\n              reason,\n              force = false\n            } = _ref12;\n            (0, _util.assert)(reason instanceof Error || typeof reason === \"object\" && reason !== null, 'PDFPageProxy._abortOperatorList: Expected \"reason\" argument.');\n\n            if (!intentState.streamReader) {\n              return;\n            }\n\n            if (!force) {\n              if (intentState.renderTasks.size > 0) {\n                return;\n              }\n\n              if (reason instanceof _display_utils.RenderingCancelledException) {\n                intentState.streamReaderCancelTimeout = setTimeout(() => {\n                  this._abortOperatorList({\n                    intentState,\n                    reason,\n                    force: true\n                  });\n\n                  intentState.streamReaderCancelTimeout = null;\n                }, RENDERING_CANCELLED_TIMEOUT);\n                return;\n              }\n            }\n\n            intentState.streamReader.cancel(new _util.AbortException(reason?.message));\n            intentState.streamReader = null;\n\n            if (this._transport.destroyed) {\n              return;\n            }\n\n            for (const [intent, curIntentState] of this._intentStates) {\n              if (curIntentState === intentState) {\n                this._intentStates.delete(intent);\n\n                break;\n              }\n            }\n\n            this.cleanup();\n          }\n\n          get stats() {\n            return this._stats;\n          }\n\n        }\n\n        exports.PDFPageProxy = PDFPageProxy;\n\n        class LoopbackPort {\n          constructor() {\n            this._listeners = [];\n            this._deferred = Promise.resolve(undefined);\n          }\n\n          postMessage(obj, transfers) {\n            function cloneValue(value) {\n              if (typeof value === \"function\" || typeof value === \"symbol\" || value instanceof URL) {\n                throw new Error(`LoopbackPort.postMessage - cannot clone: ${value?.toString()}`);\n              }\n\n              if (typeof value !== \"object\" || value === null) {\n                return value;\n              }\n\n              if (cloned.has(value)) {\n                return cloned.get(value);\n              }\n\n              let buffer, result;\n\n              if ((buffer = value.buffer) && (0, _util.isArrayBuffer)(buffer)) {\n                if (transfers?.includes(buffer)) {\n                  result = new value.constructor(buffer, value.byteOffset, value.byteLength);\n                } else {\n                  result = new value.constructor(value);\n                }\n\n                cloned.set(value, result);\n                return result;\n              }\n\n              if (value instanceof Map) {\n                result = new Map();\n                cloned.set(value, result);\n\n                for (const [key, val] of value) {\n                  result.set(key, cloneValue(val));\n                }\n\n                return result;\n              }\n\n              if (value instanceof Set) {\n                result = new Set();\n                cloned.set(value, result);\n\n                for (const val of value) {\n                  result.add(cloneValue(val));\n                }\n\n                return result;\n              }\n\n              result = Array.isArray(value) ? [] : Object.create(null);\n              cloned.set(value, result);\n\n              for (const i in value) {\n                let desc,\n                    p = value;\n\n                while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {\n                  p = Object.getPrototypeOf(p);\n                }\n\n                if (typeof desc.value === \"undefined\") {\n                  continue;\n                }\n\n                if (typeof desc.value === \"function\" && !value.hasOwnProperty?.(i)) {\n                  continue;\n                }\n\n                result[i] = cloneValue(desc.value);\n              }\n\n              return result;\n            }\n\n            const cloned = new WeakMap();\n            const event = {\n              data: cloneValue(obj)\n            };\n\n            this._deferred.then(() => {\n              for (const listener of this._listeners) {\n                listener.call(this, event);\n              }\n            });\n          }\n\n          addEventListener(name, listener) {\n            this._listeners.push(listener);\n          }\n\n          removeEventListener(name, listener) {\n            const i = this._listeners.indexOf(listener);\n\n            this._listeners.splice(i, 1);\n          }\n\n          terminate() {\n            this._listeners.length = 0;\n          }\n\n        }\n\n        exports.LoopbackPort = LoopbackPort;\n\n        const PDFWorker = function PDFWorkerClosure() {\n          const pdfWorkerPorts = new WeakMap();\n          let isWorkerDisabled = false;\n          let fallbackWorkerSrc;\n          let nextFakeWorkerId = 0;\n          let fakeWorkerCapability;\n\n          if (_is_node.isNodeJS && typeof require === \"function\") {\n            isWorkerDisabled = true;\n            fallbackWorkerSrc = \"./pdf.worker.js\";\n          } else if (typeof document === \"object\" && \"currentScript\" in document) {\n            const pdfjsFilePath = document.currentScript?.src;\n\n            if (pdfjsFilePath) {\n              fallbackWorkerSrc = pdfjsFilePath.replace(/(\\.(?:min\\.)?js)(\\?.*)?$/i, \".worker$1$2\");\n            }\n          }\n\n          function getWorkerSrc() {\n            if (_worker_options.GlobalWorkerOptions.workerSrc) {\n              return _worker_options.GlobalWorkerOptions.workerSrc;\n            }\n\n            if (typeof fallbackWorkerSrc !== \"undefined\") {\n              if (!_is_node.isNodeJS) {\n                (0, _display_utils.deprecated)('No \"GlobalWorkerOptions.workerSrc\" specified.');\n              }\n\n              return fallbackWorkerSrc;\n            }\n\n            throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n          }\n\n          function getMainThreadWorkerMessageHandler() {\n            let mainWorkerMessageHandler;\n\n            try {\n              mainWorkerMessageHandler = globalThis.pdfjsWorker?.WorkerMessageHandler;\n            } catch (ex) {}\n\n            return mainWorkerMessageHandler || null;\n          }\n\n          function setupFakeWorkerGlobal() {\n            if (fakeWorkerCapability) {\n              return fakeWorkerCapability.promise;\n            }\n\n            fakeWorkerCapability = (0, _util.createPromiseCapability)();\n\n            const loader = async function () {\n              const mainWorkerMessageHandler = getMainThreadWorkerMessageHandler();\n\n              if (mainWorkerMessageHandler) {\n                return mainWorkerMessageHandler;\n              }\n\n              if (_is_node.isNodeJS && typeof require === \"function\") {\n                const worker = eval(\"require\")(getWorkerSrc());\n                return worker.WorkerMessageHandler;\n              }\n\n              await (0, _display_utils.loadScript)(getWorkerSrc());\n              return window.pdfjsWorker.WorkerMessageHandler;\n            };\n\n            loader().then(fakeWorkerCapability.resolve, fakeWorkerCapability.reject);\n            return fakeWorkerCapability.promise;\n          }\n\n          function createCDNWrapper(url) {\n            const wrapper = \"importScripts('\" + url + \"');\";\n            return URL.createObjectURL(new Blob([wrapper]));\n          }\n\n          class PDFWorker {\n            constructor() {\n              let {\n                name = null,\n                port = null,\n                verbosity = (0, _util.getVerbosityLevel)()\n              } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n              if (port && pdfWorkerPorts.has(port)) {\n                throw new Error(\"Cannot use more than one PDFWorker per port\");\n              }\n\n              this.name = name;\n              this.destroyed = false;\n              this.postMessageTransfers = true;\n              this.verbosity = verbosity;\n              this._readyCapability = (0, _util.createPromiseCapability)();\n              this._port = null;\n              this._webWorker = null;\n              this._messageHandler = null;\n\n              if (port) {\n                pdfWorkerPorts.set(port, this);\n\n                this._initializeFromPort(port);\n\n                return;\n              }\n\n              this._initialize();\n            }\n\n            get promise() {\n              return this._readyCapability.promise;\n            }\n\n            get port() {\n              return this._port;\n            }\n\n            get messageHandler() {\n              return this._messageHandler;\n            }\n\n            _initializeFromPort(port) {\n              this._port = port;\n              this._messageHandler = new _message_handler.MessageHandler(\"main\", \"worker\", port);\n\n              this._messageHandler.on(\"ready\", function () {});\n\n              this._readyCapability.resolve();\n            }\n\n            _initialize() {\n              if (typeof Worker !== \"undefined\" && !isWorkerDisabled && !getMainThreadWorkerMessageHandler()) {\n                let workerSrc = getWorkerSrc();\n\n                try {\n                  if (!(0, _util.isSameOrigin)(window.location.href, workerSrc)) {\n                    workerSrc = createCDNWrapper(new URL(workerSrc, window.location).href);\n                  }\n\n                  const worker = new Worker(workerSrc);\n                  const messageHandler = new _message_handler.MessageHandler(\"main\", \"worker\", worker);\n\n                  const terminateEarly = () => {\n                    worker.removeEventListener(\"error\", onWorkerError);\n                    messageHandler.destroy();\n                    worker.terminate();\n\n                    if (this.destroyed) {\n                      this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n                    } else {\n                      this._setupFakeWorker();\n                    }\n                  };\n\n                  const onWorkerError = () => {\n                    if (!this._webWorker) {\n                      terminateEarly();\n                    }\n                  };\n\n                  worker.addEventListener(\"error\", onWorkerError);\n                  messageHandler.on(\"test\", data => {\n                    worker.removeEventListener(\"error\", onWorkerError);\n\n                    if (this.destroyed) {\n                      terminateEarly();\n                      return;\n                    }\n\n                    if (data) {\n                      this._messageHandler = messageHandler;\n                      this._port = worker;\n                      this._webWorker = worker;\n\n                      if (!data.supportTransfers) {\n                        this.postMessageTransfers = false;\n                      }\n\n                      this._readyCapability.resolve();\n\n                      messageHandler.send(\"configure\", {\n                        verbosity: this.verbosity\n                      });\n                    } else {\n                      this._setupFakeWorker();\n\n                      messageHandler.destroy();\n                      worker.terminate();\n                    }\n                  });\n                  messageHandler.on(\"ready\", data => {\n                    worker.removeEventListener(\"error\", onWorkerError);\n\n                    if (this.destroyed) {\n                      terminateEarly();\n                      return;\n                    }\n\n                    try {\n                      sendTest();\n                    } catch (e) {\n                      this._setupFakeWorker();\n                    }\n                  });\n\n                  const sendTest = () => {\n                    const testObj = new Uint8Array([this.postMessageTransfers ? 255 : 0]);\n\n                    try {\n                      messageHandler.send(\"test\", testObj, [testObj.buffer]);\n                    } catch (ex) {\n                      (0, _util.warn)(\"Cannot use postMessage transfers.\");\n                      testObj[0] = 0;\n                      messageHandler.send(\"test\", testObj);\n                    }\n                  };\n\n                  sendTest();\n                  return;\n                } catch (e) {\n                  (0, _util.info)(\"The worker has been disabled.\");\n                }\n              }\n\n              this._setupFakeWorker();\n            }\n\n            _setupFakeWorker() {\n              if (!isWorkerDisabled) {\n                (0, _util.warn)(\"Setting up fake worker.\");\n                isWorkerDisabled = true;\n              }\n\n              setupFakeWorkerGlobal().then(WorkerMessageHandler => {\n                if (this.destroyed) {\n                  this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n\n                  return;\n                }\n\n                const port = new LoopbackPort();\n                this._port = port;\n                const id = \"fake\" + nextFakeWorkerId++;\n                const workerHandler = new _message_handler.MessageHandler(id + \"_worker\", id, port);\n                WorkerMessageHandler.setup(workerHandler, port);\n                const messageHandler = new _message_handler.MessageHandler(id, id + \"_worker\", port);\n                this._messageHandler = messageHandler;\n\n                this._readyCapability.resolve();\n\n                messageHandler.send(\"configure\", {\n                  verbosity: this.verbosity\n                });\n              }).catch(reason => {\n                this._readyCapability.reject(new Error(`Setting up fake worker failed: \"${reason.message}\".`));\n              });\n            }\n\n            destroy() {\n              this.destroyed = true;\n\n              if (this._webWorker) {\n                this._webWorker.terminate();\n\n                this._webWorker = null;\n              }\n\n              pdfWorkerPorts.delete(this._port);\n              this._port = null;\n\n              if (this._messageHandler) {\n                this._messageHandler.destroy();\n\n                this._messageHandler = null;\n              }\n            }\n\n            static fromPort(params) {\n              if (!params || !params.port) {\n                throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n              }\n\n              if (pdfWorkerPorts.has(params.port)) {\n                return pdfWorkerPorts.get(params.port);\n              }\n\n              return new PDFWorker(params);\n            }\n\n            static getWorkerSrc() {\n              return getWorkerSrc();\n            }\n\n          }\n\n          return PDFWorker;\n        }();\n\n        exports.PDFWorker = PDFWorker;\n\n        class WorkerTransport {\n          constructor(messageHandler, loadingTask, networkStream, params) {\n            this.messageHandler = messageHandler;\n            this.loadingTask = loadingTask;\n            this.commonObjs = new PDFObjects();\n            this.fontLoader = new _font_loader.FontLoader({\n              docId: loadingTask.docId,\n              onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n              ownerDocument: params.ownerDocument,\n              styleElement: params.styleElement\n            });\n            this._params = params;\n\n            if (!params.useWorkerFetch) {\n              this.CMapReaderFactory = new params.CMapReaderFactory({\n                baseUrl: params.cMapUrl,\n                isCompressed: params.cMapPacked\n              });\n              this.StandardFontDataFactory = new params.StandardFontDataFactory({\n                baseUrl: params.standardFontDataUrl\n              });\n            }\n\n            this.destroyed = false;\n            this.destroyCapability = null;\n            this._passwordCapability = null;\n            this._networkStream = networkStream;\n            this._fullReader = null;\n            this._lastProgress = null;\n            this.pageCache = [];\n            this.pagePromises = [];\n            this.downloadInfoCapability = (0, _util.createPromiseCapability)();\n            this.setupMessageHandler();\n          }\n\n          get annotationStorage() {\n            return (0, _util.shadow)(this, \"annotationStorage\", new _annotation_storage.AnnotationStorage());\n          }\n\n          destroy() {\n            if (this.destroyCapability) {\n              return this.destroyCapability.promise;\n            }\n\n            this.destroyed = true;\n            this.destroyCapability = (0, _util.createPromiseCapability)();\n\n            if (this._passwordCapability) {\n              this._passwordCapability.reject(new Error(\"Worker was destroyed during onPassword callback\"));\n            }\n\n            const waitOn = [];\n\n            for (const page of this.pageCache) {\n              if (page) {\n                waitOn.push(page._destroy());\n              }\n            }\n\n            this.pageCache.length = 0;\n            this.pagePromises.length = 0;\n\n            if (this.hasOwnProperty(\"annotationStorage\")) {\n              this.annotationStorage.resetModified();\n            }\n\n            const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n            waitOn.push(terminated);\n            Promise.all(waitOn).then(() => {\n              this.commonObjs.clear();\n              this.fontLoader.clear();\n              this._hasJSActionsPromise = null;\n\n              if (this._networkStream) {\n                this._networkStream.cancelAllRequests(new _util.AbortException(\"Worker was terminated.\"));\n              }\n\n              if (this.messageHandler) {\n                this.messageHandler.destroy();\n                this.messageHandler = null;\n              }\n\n              this.destroyCapability.resolve();\n            }, this.destroyCapability.reject);\n            return this.destroyCapability.promise;\n          }\n\n          setupMessageHandler() {\n            const {\n              messageHandler,\n              loadingTask\n            } = this;\n            messageHandler.on(\"GetReader\", (data, sink) => {\n              (0, _util.assert)(this._networkStream, \"GetReader - no `IPDFStream` instance available.\");\n              this._fullReader = this._networkStream.getFullReader();\n\n              this._fullReader.onProgress = evt => {\n                this._lastProgress = {\n                  loaded: evt.loaded,\n                  total: evt.total\n                };\n              };\n\n              sink.onPull = () => {\n                this._fullReader.read().then(function (_ref13) {\n                  let {\n                    value,\n                    done\n                  } = _ref13;\n\n                  if (done) {\n                    sink.close();\n                    return;\n                  }\n\n                  (0, _util.assert)((0, _util.isArrayBuffer)(value), \"GetReader - expected an ArrayBuffer.\");\n                  sink.enqueue(new Uint8Array(value), 1, [value]);\n                }).catch(reason => {\n                  sink.error(reason);\n                });\n              };\n\n              sink.onCancel = reason => {\n                this._fullReader.cancel(reason);\n\n                sink.ready.catch(readyReason => {\n                  if (this.destroyed) {\n                    return;\n                  }\n\n                  throw readyReason;\n                });\n              };\n            });\n            messageHandler.on(\"ReaderHeadersReady\", data => {\n              const headersCapability = (0, _util.createPromiseCapability)();\n              const fullReader = this._fullReader;\n              fullReader.headersReady.then(() => {\n                if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n                  if (this._lastProgress && loadingTask.onProgress) {\n                    loadingTask.onProgress(this._lastProgress);\n                  }\n\n                  fullReader.onProgress = evt => {\n                    if (loadingTask.onProgress) {\n                      loadingTask.onProgress({\n                        loaded: evt.loaded,\n                        total: evt.total\n                      });\n                    }\n                  };\n                }\n\n                headersCapability.resolve({\n                  isStreamingSupported: fullReader.isStreamingSupported,\n                  isRangeSupported: fullReader.isRangeSupported,\n                  contentLength: fullReader.contentLength\n                });\n              }, headersCapability.reject);\n              return headersCapability.promise;\n            });\n            messageHandler.on(\"GetRangeReader\", (data, sink) => {\n              (0, _util.assert)(this._networkStream, \"GetRangeReader - no `IPDFStream` instance available.\");\n\n              const rangeReader = this._networkStream.getRangeReader(data.begin, data.end);\n\n              if (!rangeReader) {\n                sink.close();\n                return;\n              }\n\n              sink.onPull = () => {\n                rangeReader.read().then(function (_ref14) {\n                  let {\n                    value,\n                    done\n                  } = _ref14;\n\n                  if (done) {\n                    sink.close();\n                    return;\n                  }\n\n                  (0, _util.assert)((0, _util.isArrayBuffer)(value), \"GetRangeReader - expected an ArrayBuffer.\");\n                  sink.enqueue(new Uint8Array(value), 1, [value]);\n                }).catch(reason => {\n                  sink.error(reason);\n                });\n              };\n\n              sink.onCancel = reason => {\n                rangeReader.cancel(reason);\n                sink.ready.catch(readyReason => {\n                  if (this.destroyed) {\n                    return;\n                  }\n\n                  throw readyReason;\n                });\n              };\n            });\n            messageHandler.on(\"GetDoc\", _ref15 => {\n              let {\n                pdfInfo\n              } = _ref15;\n              this._numPages = pdfInfo.numPages;\n              this._htmlForXfa = pdfInfo.htmlForXfa;\n              delete pdfInfo.htmlForXfa;\n\n              loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n            });\n            messageHandler.on(\"DocException\", function (ex) {\n              let reason;\n\n              switch (ex.name) {\n                case \"PasswordException\":\n                  reason = new _util.PasswordException(ex.message, ex.code);\n                  break;\n\n                case \"InvalidPDFException\":\n                  reason = new _util.InvalidPDFException(ex.message);\n                  break;\n\n                case \"MissingPDFException\":\n                  reason = new _util.MissingPDFException(ex.message);\n                  break;\n\n                case \"UnexpectedResponseException\":\n                  reason = new _util.UnexpectedResponseException(ex.message, ex.status);\n                  break;\n\n                case \"UnknownErrorException\":\n                  reason = new _util.UnknownErrorException(ex.message, ex.details);\n                  break;\n              }\n\n              if (!(reason instanceof Error)) {\n                const msg = \"DocException - expected a valid Error.\";\n                (0, _util.warn)(msg);\n              }\n\n              loadingTask._capability.reject(reason);\n            });\n            messageHandler.on(\"PasswordRequest\", exception => {\n              this._passwordCapability = (0, _util.createPromiseCapability)();\n\n              if (loadingTask.onPassword) {\n                const updatePassword = password => {\n                  this._passwordCapability.resolve({\n                    password\n                  });\n                };\n\n                try {\n                  loadingTask.onPassword(updatePassword, exception.code);\n                } catch (ex) {\n                  this._passwordCapability.reject(ex);\n                }\n              } else {\n                this._passwordCapability.reject(new _util.PasswordException(exception.message, exception.code));\n              }\n\n              return this._passwordCapability.promise;\n            });\n            messageHandler.on(\"DataLoaded\", data => {\n              if (loadingTask.onProgress) {\n                loadingTask.onProgress({\n                  loaded: data.length,\n                  total: data.length\n                });\n              }\n\n              this.downloadInfoCapability.resolve(data);\n            });\n            messageHandler.on(\"StartRenderPage\", data => {\n              if (this.destroyed) {\n                return;\n              }\n\n              const page = this.pageCache[data.pageIndex];\n\n              page._startRenderPage(data.transparency, data.intent);\n            });\n            messageHandler.on(\"commonobj\", data => {\n              if (this.destroyed) {\n                return;\n              }\n\n              const [id, type, exportedData] = data;\n\n              if (this.commonObjs.has(id)) {\n                return;\n              }\n\n              switch (type) {\n                case \"Font\":\n                  const params = this._params;\n\n                  if (\"error\" in exportedData) {\n                    const exportedError = exportedData.error;\n                    (0, _util.warn)(`Error during font loading: ${exportedError}`);\n                    this.commonObjs.resolve(id, exportedError);\n                    break;\n                  }\n\n                  let fontRegistry = null;\n\n                  if (params.pdfBug && globalThis.FontInspector?.enabled) {\n                    fontRegistry = {\n                      registerFont(font, url) {\n                        globalThis.FontInspector.fontAdded(font, url);\n                      }\n\n                    };\n                  }\n\n                  const font = new _font_loader.FontFaceObject(exportedData, {\n                    isEvalSupported: params.isEvalSupported,\n                    disableFontFace: params.disableFontFace,\n                    ignoreErrors: params.ignoreErrors,\n                    onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n                    fontRegistry\n                  });\n                  this.fontLoader.bind(font).catch(reason => {\n                    return messageHandler.sendWithPromise(\"FontFallback\", {\n                      id\n                    });\n                  }).finally(() => {\n                    if (!params.fontExtraProperties && font.data) {\n                      font.data = null;\n                    }\n\n                    this.commonObjs.resolve(id, font);\n                  });\n                  break;\n\n                case \"FontPath\":\n                case \"Image\":\n                  this.commonObjs.resolve(id, exportedData);\n                  break;\n\n                default:\n                  throw new Error(`Got unknown common object type ${type}`);\n              }\n            });\n            messageHandler.on(\"obj\", data => {\n              if (this.destroyed) {\n                return undefined;\n              }\n\n              const [id, pageIndex, type, imageData] = data;\n              const pageProxy = this.pageCache[pageIndex];\n\n              if (pageProxy.objs.has(id)) {\n                return undefined;\n              }\n\n              switch (type) {\n                case \"Image\":\n                  pageProxy.objs.resolve(id, imageData);\n                  const MAX_IMAGE_SIZE_TO_STORE = 8000000;\n\n                  if (imageData?.data?.length > MAX_IMAGE_SIZE_TO_STORE) {\n                    pageProxy.cleanupAfterRender = true;\n                  }\n\n                  break;\n\n                case \"Pattern\":\n                  pageProxy.objs.resolve(id, imageData);\n                  break;\n\n                default:\n                  throw new Error(`Got unknown object type ${type}`);\n              }\n\n              return undefined;\n            });\n            messageHandler.on(\"DocProgress\", data => {\n              if (this.destroyed) {\n                return;\n              }\n\n              if (loadingTask.onProgress) {\n                loadingTask.onProgress({\n                  loaded: data.loaded,\n                  total: data.total\n                });\n              }\n            });\n            messageHandler.on(\"UnsupportedFeature\", this._onUnsupportedFeature.bind(this));\n            messageHandler.on(\"FetchBuiltInCMap\", data => {\n              if (this.destroyed) {\n                return Promise.reject(new Error(\"Worker was destroyed.\"));\n              }\n\n              if (!this.CMapReaderFactory) {\n                return Promise.reject(new Error(\"CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.\"));\n              }\n\n              return this.CMapReaderFactory.fetch(data);\n            });\n            messageHandler.on(\"FetchStandardFontData\", data => {\n              if (this.destroyed) {\n                return Promise.reject(new Error(\"Worker was destroyed.\"));\n              }\n\n              if (!this.StandardFontDataFactory) {\n                return Promise.reject(new Error(\"StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.\"));\n              }\n\n              return this.StandardFontDataFactory.fetch(data);\n            });\n          }\n\n          _onUnsupportedFeature(_ref16) {\n            let {\n              featureId\n            } = _ref16;\n\n            if (this.destroyed) {\n              return;\n            }\n\n            if (this.loadingTask.onUnsupportedFeature) {\n              this.loadingTask.onUnsupportedFeature(featureId);\n            }\n          }\n\n          getData() {\n            return this.messageHandler.sendWithPromise(\"GetData\", null);\n          }\n\n          getPage(pageNumber) {\n            if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {\n              return Promise.reject(new Error(\"Invalid page request\"));\n            }\n\n            const pageIndex = pageNumber - 1;\n\n            if (pageIndex in this.pagePromises) {\n              return this.pagePromises[pageIndex];\n            }\n\n            const promise = this.messageHandler.sendWithPromise(\"GetPage\", {\n              pageIndex\n            }).then(pageInfo => {\n              if (this.destroyed) {\n                throw new Error(\"Transport destroyed\");\n              }\n\n              const page = new PDFPageProxy(pageIndex, pageInfo, this, this._params.ownerDocument, this._params.pdfBug);\n              this.pageCache[pageIndex] = page;\n              return page;\n            });\n            this.pagePromises[pageIndex] = promise;\n            return promise;\n          }\n\n          getPageIndex(ref) {\n            return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\n              ref\n            }).catch(function (reason) {\n              return Promise.reject(new Error(reason));\n            });\n          }\n\n          getAnnotations(pageIndex, intent) {\n            return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n              pageIndex,\n              intent\n            });\n          }\n\n          saveDocument() {\n            return this.messageHandler.sendWithPromise(\"SaveDocument\", {\n              isPureXfa: !!this._htmlForXfa,\n              numPages: this._numPages,\n              annotationStorage: this.annotationStorage.serializable,\n              filename: this._fullReader?.filename ?? null\n            }).finally(() => {\n              this.annotationStorage.resetModified();\n            });\n          }\n\n          getFieldObjects() {\n            return this.messageHandler.sendWithPromise(\"GetFieldObjects\", null);\n          }\n\n          hasJSActions() {\n            return this._hasJSActionsPromise || (this._hasJSActionsPromise = this.messageHandler.sendWithPromise(\"HasJSActions\", null));\n          }\n\n          getCalculationOrderIds() {\n            return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n          }\n\n          getDestinations() {\n            return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n          }\n\n          getDestination(id) {\n            if (typeof id !== \"string\") {\n              return Promise.reject(new Error(\"Invalid destination request.\"));\n            }\n\n            return this.messageHandler.sendWithPromise(\"GetDestination\", {\n              id\n            });\n          }\n\n          getPageLabels() {\n            return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n          }\n\n          getPageLayout() {\n            return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n          }\n\n          getPageMode() {\n            return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n          }\n\n          getViewerPreferences() {\n            return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n          }\n\n          getOpenAction() {\n            return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n          }\n\n          getAttachments() {\n            return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n          }\n\n          getJavaScript() {\n            return this.messageHandler.sendWithPromise(\"GetJavaScript\", null);\n          }\n\n          getDocJSActions() {\n            return this.messageHandler.sendWithPromise(\"GetDocJSActions\", null);\n          }\n\n          getPageJSActions(pageIndex) {\n            return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n              pageIndex\n            });\n          }\n\n          getStructTree(pageIndex) {\n            return this.messageHandler.sendWithPromise(\"GetStructTree\", {\n              pageIndex\n            });\n          }\n\n          getOutline() {\n            return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n          }\n\n          getOptionalContentConfig() {\n            return this.messageHandler.sendWithPromise(\"GetOptionalContentConfig\", null).then(results => {\n              return new _optional_content_config.OptionalContentConfig(results);\n            });\n          }\n\n          getPermissions() {\n            return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n          }\n\n          getMetadata() {\n            return this.messageHandler.sendWithPromise(\"GetMetadata\", null).then(results => {\n              return {\n                info: results[0],\n                metadata: results[1] ? new _metadata.Metadata(results[1]) : null,\n                contentDispositionFilename: this._fullReader?.filename ?? null,\n                contentLength: this._fullReader?.contentLength ?? null\n              };\n            });\n          }\n\n          getMarkInfo() {\n            return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n          }\n\n          getStats() {\n            return this.messageHandler.sendWithPromise(\"GetStats\", null);\n          }\n\n          async startCleanup() {\n            let keepLoadedFonts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            await this.messageHandler.sendWithPromise(\"Cleanup\", null);\n\n            if (this.destroyed) {\n              return;\n            }\n\n            for (let i = 0, ii = this.pageCache.length; i < ii; i++) {\n              const page = this.pageCache[i];\n\n              if (!page) {\n                continue;\n              }\n\n              const cleanupSuccessful = page.cleanup();\n\n              if (!cleanupSuccessful) {\n                throw new Error(`startCleanup: Page ${i + 1} is currently rendering.`);\n              }\n            }\n\n            this.commonObjs.clear();\n\n            if (!keepLoadedFonts) {\n              this.fontLoader.clear();\n            }\n\n            this._hasJSActionsPromise = null;\n          }\n\n          get loadingParams() {\n            const params = this._params;\n            return (0, _util.shadow)(this, \"loadingParams\", {\n              disableAutoFetch: params.disableAutoFetch\n            });\n          }\n\n        }\n\n        class PDFObjects {\n          constructor() {\n            this._objs = Object.create(null);\n          }\n\n          _ensureObj(objId) {\n            if (this._objs[objId]) {\n              return this._objs[objId];\n            }\n\n            return this._objs[objId] = {\n              capability: (0, _util.createPromiseCapability)(),\n              data: null,\n              resolved: false\n            };\n          }\n\n          get(objId) {\n            let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n            if (callback) {\n              this._ensureObj(objId).capability.promise.then(callback);\n\n              return null;\n            }\n\n            const obj = this._objs[objId];\n\n            if (!obj || !obj.resolved) {\n              throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\n            }\n\n            return obj.data;\n          }\n\n          has(objId) {\n            const obj = this._objs[objId];\n            return obj?.resolved || false;\n          }\n\n          resolve(objId, data) {\n            const obj = this._ensureObj(objId);\n\n            obj.resolved = true;\n            obj.data = data;\n            obj.capability.resolve(data);\n          }\n\n          clear() {\n            this._objs = Object.create(null);\n          }\n\n        }\n\n        class RenderTask {\n          constructor(internalRenderTask) {\n            this._internalRenderTask = internalRenderTask;\n            this.onContinue = null;\n          }\n\n          get promise() {\n            return this._internalRenderTask.capability.promise;\n          }\n\n          cancel() {\n            this._internalRenderTask.cancel();\n          }\n\n        }\n\n        const InternalRenderTask = function InternalRenderTaskClosure() {\n          const canvasInRendering = new WeakSet();\n\n          class InternalRenderTask {\n            constructor(_ref17) {\n              let {\n                callback,\n                params,\n                objs,\n                commonObjs,\n                operatorList,\n                pageIndex,\n                canvasFactory,\n                useRequestAnimationFrame = false,\n                pdfBug = false\n              } = _ref17;\n              this.callback = callback;\n              this.params = params;\n              this.objs = objs;\n              this.commonObjs = commonObjs;\n              this.operatorListIdx = null;\n              this.operatorList = operatorList;\n              this._pageIndex = pageIndex;\n              this.canvasFactory = canvasFactory;\n              this._pdfBug = pdfBug;\n              this.running = false;\n              this.graphicsReadyCallback = null;\n              this.graphicsReady = false;\n              this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== \"undefined\";\n              this.cancelled = false;\n              this.capability = (0, _util.createPromiseCapability)();\n              this.task = new RenderTask(this);\n              this._cancelBound = this.cancel.bind(this);\n              this._continueBound = this._continue.bind(this);\n              this._scheduleNextBound = this._scheduleNext.bind(this);\n              this._nextBound = this._next.bind(this);\n              this._canvas = params.canvasContext.canvas;\n            }\n\n            get completed() {\n              return this.capability.promise.catch(function () {});\n            }\n\n            initializeGraphics(_ref18) {\n              let {\n                transparency = false,\n                optionalContentConfig\n              } = _ref18;\n\n              if (this.cancelled) {\n                return;\n              }\n\n              if (this._canvas) {\n                if (canvasInRendering.has(this._canvas)) {\n                  throw new Error(\"Cannot use the same canvas during multiple render() operations. \" + \"Use different canvas or ensure previous operations were \" + \"cancelled or completed.\");\n                }\n\n                canvasInRendering.add(this._canvas);\n              }\n\n              if (this._pdfBug && globalThis.StepperManager?.enabled) {\n                this.stepper = globalThis.StepperManager.create(this._pageIndex);\n                this.stepper.init(this.operatorList);\n                this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n              }\n\n              const {\n                canvasContext,\n                viewport,\n                transform,\n                imageLayer,\n                background\n              } = this.params;\n              this.gfx = new _canvas.CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, imageLayer, optionalContentConfig);\n              this.gfx.beginDrawing({\n                transform,\n                viewport,\n                transparency,\n                background\n              });\n              this.operatorListIdx = 0;\n              this.graphicsReady = true;\n\n              if (this.graphicsReadyCallback) {\n                this.graphicsReadyCallback();\n              }\n            }\n\n            cancel() {\n              let error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n              this.running = false;\n              this.cancelled = true;\n\n              if (this.gfx) {\n                this.gfx.endDrawing();\n              }\n\n              if (this._canvas) {\n                canvasInRendering.delete(this._canvas);\n              }\n\n              this.callback(error || new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex + 1}`, \"canvas\"));\n            }\n\n            operatorListChanged() {\n              if (!this.graphicsReady) {\n                if (!this.graphicsReadyCallback) {\n                  this.graphicsReadyCallback = this._continueBound;\n                }\n\n                return;\n              }\n\n              if (this.stepper) {\n                this.stepper.updateOperatorList(this.operatorList);\n              }\n\n              if (this.running) {\n                return;\n              }\n\n              this._continue();\n            }\n\n            _continue() {\n              this.running = true;\n\n              if (this.cancelled) {\n                return;\n              }\n\n              if (this.task.onContinue) {\n                this.task.onContinue(this._scheduleNextBound);\n              } else {\n                this._scheduleNext();\n              }\n            }\n\n            _scheduleNext() {\n              if (this._useRequestAnimationFrame) {\n                window.requestAnimationFrame(() => {\n                  this._nextBound().catch(this._cancelBound);\n                });\n              } else {\n                Promise.resolve().then(this._nextBound).catch(this._cancelBound);\n              }\n            }\n\n            async _next() {\n              if (this.cancelled) {\n                return;\n              }\n\n              this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);\n\n              if (this.operatorListIdx === this.operatorList.argsArray.length) {\n                this.running = false;\n\n                if (this.operatorList.lastChunk) {\n                  this.gfx.endDrawing();\n\n                  if (this._canvas) {\n                    canvasInRendering.delete(this._canvas);\n                  }\n\n                  this.callback();\n                }\n              }\n            }\n\n          }\n\n          return InternalRenderTask;\n        }();\n\n        const version = '2.10.377';\n        exports.version = version;\n        const build = '156762c48';\n        exports.build = build;\n        /***/\n      },\n      /* 7 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.FontLoader = exports.FontFaceObject = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class BaseFontLoader {\n          constructor(_ref19) {\n            let {\n              docId,\n              onUnsupportedFeature,\n              ownerDocument = globalThis.document,\n              styleElement = null\n            } = _ref19;\n\n            if (this.constructor === BaseFontLoader) {\n              (0, _util.unreachable)(\"Cannot initialize BaseFontLoader.\");\n            }\n\n            this.docId = docId;\n            this._onUnsupportedFeature = onUnsupportedFeature;\n            this._document = ownerDocument;\n            this.nativeFontFaces = [];\n            this.styleElement = null;\n          }\n\n          addNativeFontFace(nativeFontFace) {\n            this.nativeFontFaces.push(nativeFontFace);\n\n            this._document.fonts.add(nativeFontFace);\n          }\n\n          insertRule(rule) {\n            let styleElement = this.styleElement;\n\n            if (!styleElement) {\n              styleElement = this.styleElement = this._document.createElement(\"style\");\n              styleElement.id = `PDFJS_FONT_STYLE_TAG_${this.docId}`;\n\n              this._document.documentElement.getElementsByTagName(\"head\")[0].appendChild(styleElement);\n            }\n\n            const styleSheet = styleElement.sheet;\n            styleSheet.insertRule(rule, styleSheet.cssRules.length);\n          }\n\n          clear() {\n            for (const nativeFontFace of this.nativeFontFaces) {\n              this._document.fonts.delete(nativeFontFace);\n            }\n\n            this.nativeFontFaces.length = 0;\n\n            if (this.styleElement) {\n              this.styleElement.remove();\n              this.styleElement = null;\n            }\n          }\n\n          async bind(font) {\n            if (font.attached || font.missingFile) {\n              return;\n            }\n\n            font.attached = true;\n\n            if (this.isFontLoadingAPISupported) {\n              const nativeFontFace = font.createNativeFontFace();\n\n              if (nativeFontFace) {\n                this.addNativeFontFace(nativeFontFace);\n\n                try {\n                  await nativeFontFace.loaded;\n                } catch (ex) {\n                  this._onUnsupportedFeature({\n                    featureId: _util.UNSUPPORTED_FEATURES.errorFontLoadNative\n                  });\n\n                  (0, _util.warn)(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\n                  font.disableFontFace = true;\n                  throw ex;\n                }\n              }\n\n              return;\n            }\n\n            const rule = font.createFontFaceRule();\n\n            if (rule) {\n              this.insertRule(rule);\n\n              if (this.isSyncFontLoadingSupported) {\n                return;\n              }\n\n              await new Promise(resolve => {\n                const request = this._queueLoadingCallback(resolve);\n\n                this._prepareFontLoadEvent([rule], [font], request);\n              });\n            }\n          }\n\n          _queueLoadingCallback(callback) {\n            (0, _util.unreachable)(\"Abstract method `_queueLoadingCallback`.\");\n          }\n\n          get isFontLoadingAPISupported() {\n            const hasFonts = !!this._document?.fonts;\n            return (0, _util.shadow)(this, \"isFontLoadingAPISupported\", hasFonts);\n          }\n\n          get isSyncFontLoadingSupported() {\n            (0, _util.unreachable)(\"Abstract method `isSyncFontLoadingSupported`.\");\n          }\n\n          get _loadTestFont() {\n            (0, _util.unreachable)(\"Abstract method `_loadTestFont`.\");\n          }\n\n          _prepareFontLoadEvent(rules, fontsToLoad, request) {\n            (0, _util.unreachable)(\"Abstract method `_prepareFontLoadEvent`.\");\n          }\n\n        }\n\n        let FontLoader;\n        exports.FontLoader = FontLoader;\n        {\n          exports.FontLoader = FontLoader = class GenericFontLoader extends BaseFontLoader {\n            constructor(params) {\n              super(params);\n              this.loadingContext = {\n                requests: [],\n                nextRequestId: 0\n              };\n              this.loadTestFontId = 0;\n            }\n\n            get isSyncFontLoadingSupported() {\n              let supported = false;\n\n              if (typeof navigator === \"undefined\") {\n                supported = true;\n              } else {\n                const m = /Mozilla\\/5.0.*?rv:(\\d+).*? Gecko/.exec(navigator.userAgent);\n\n                if (m?.[1] >= 14) {\n                  supported = true;\n                }\n              }\n\n              return (0, _util.shadow)(this, \"isSyncFontLoadingSupported\", supported);\n            }\n\n            _queueLoadingCallback(callback) {\n              function completeRequest() {\n                (0, _util.assert)(!request.done, \"completeRequest() cannot be called twice.\");\n                request.done = true;\n\n                while (context.requests.length > 0 && context.requests[0].done) {\n                  const otherRequest = context.requests.shift();\n                  setTimeout(otherRequest.callback, 0);\n                }\n              }\n\n              const context = this.loadingContext;\n              const request = {\n                id: `pdfjs-font-loading-${context.nextRequestId++}`,\n                done: false,\n                complete: completeRequest,\n                callback\n              };\n              context.requests.push(request);\n              return request;\n            }\n\n            get _loadTestFont() {\n              const getLoadTestFont = function () {\n                return atob(\"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" + \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" + \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" + \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" + \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" + \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" + \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" + \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" + \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" + \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" + \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" + \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" + \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" + \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" + \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" + \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" + \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\");\n              };\n\n              return (0, _util.shadow)(this, \"_loadTestFont\", getLoadTestFont());\n            }\n\n            _prepareFontLoadEvent(rules, fonts, request) {\n              function int32(data, offset) {\n                return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 0xff;\n              }\n\n              function spliceString(s, offset, remove, insert) {\n                const chunk1 = s.substring(0, offset);\n                const chunk2 = s.substring(offset + remove);\n                return chunk1 + insert + chunk2;\n              }\n\n              let i, ii;\n\n              const canvas = this._document.createElement(\"canvas\");\n\n              canvas.width = 1;\n              canvas.height = 1;\n              const ctx = canvas.getContext(\"2d\");\n              let called = 0;\n\n              function isFontReady(name, callback) {\n                called++;\n\n                if (called > 30) {\n                  (0, _util.warn)(\"Load test font never loaded.\");\n                  callback();\n                  return;\n                }\n\n                ctx.font = \"30px \" + name;\n                ctx.fillText(\".\", 0, 20);\n                const imageData = ctx.getImageData(0, 0, 1, 1);\n\n                if (imageData.data[3] > 0) {\n                  callback();\n                  return;\n                }\n\n                setTimeout(isFontReady.bind(null, name, callback));\n              }\n\n              const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n              let data = this._loadTestFont;\n              const COMMENT_OFFSET = 976;\n              data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);\n              const CFF_CHECKSUM_OFFSET = 16;\n              const XXXX_VALUE = 0x58585858;\n              let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n\n              for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n                checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;\n              }\n\n              if (i < loadTestFontId.length) {\n                checksum = checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i) | 0;\n              }\n\n              data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0, _util.string32)(checksum));\n              const url = `url(data:font/opentype;base64,${btoa(data)});`;\n              const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\n              this.insertRule(rule);\n              const names = [];\n\n              for (const font of fonts) {\n                names.push(font.loadedName);\n              }\n\n              names.push(loadTestFontId);\n\n              const div = this._document.createElement(\"div\");\n\n              div.style.visibility = \"hidden\";\n              div.style.width = div.style.height = \"10px\";\n              div.style.position = \"absolute\";\n              div.style.top = div.style.left = \"0px\";\n\n              for (const name of names) {\n                const span = this._document.createElement(\"span\");\n\n                span.textContent = \"Hi\";\n                span.style.fontFamily = name;\n                div.appendChild(span);\n              }\n\n              this._document.body.appendChild(div);\n\n              isFontReady(loadTestFontId, () => {\n                this._document.body.removeChild(div);\n\n                request.complete();\n              });\n            }\n\n          };\n        }\n\n        class FontFaceObject {\n          constructor(translatedData, _ref20) {\n            let {\n              isEvalSupported = true,\n              disableFontFace = false,\n              ignoreErrors = false,\n              onUnsupportedFeature,\n              fontRegistry = null\n            } = _ref20;\n            this.compiledGlyphs = Object.create(null);\n\n            for (const i in translatedData) {\n              this[i] = translatedData[i];\n            }\n\n            this.isEvalSupported = isEvalSupported !== false;\n            this.disableFontFace = disableFontFace === true;\n            this.ignoreErrors = ignoreErrors === true;\n            this._onUnsupportedFeature = onUnsupportedFeature;\n            this.fontRegistry = fontRegistry;\n          }\n\n          createNativeFontFace() {\n            if (!this.data || this.disableFontFace) {\n              return null;\n            }\n\n            let nativeFontFace;\n\n            if (!this.cssFontInfo) {\n              nativeFontFace = new FontFace(this.loadedName, this.data, {});\n            } else {\n              const css = {\n                weight: this.cssFontInfo.fontWeight\n              };\n\n              if (this.cssFontInfo.italicAngle) {\n                css.style = `oblique ${this.cssFontInfo.italicAngle}deg`;\n              }\n\n              nativeFontFace = new FontFace(this.cssFontInfo.fontFamily, this.data, css);\n            }\n\n            if (this.fontRegistry) {\n              this.fontRegistry.registerFont(this);\n            }\n\n            return nativeFontFace;\n          }\n\n          createFontFaceRule() {\n            if (!this.data || this.disableFontFace) {\n              return null;\n            }\n\n            const data = (0, _util.bytesToString)(this.data);\n            const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\n            let rule;\n\n            if (!this.cssFontInfo) {\n              rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\n            } else {\n              let css = `font-weight: ${this.cssFontInfo.fontWeight};`;\n\n              if (this.cssFontInfo.italicAngle) {\n                css += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;\n              }\n\n              rule = `@font-face {font-family:\"${this.cssFontInfo.fontFamily}\";${css}src:${url}}`;\n            }\n\n            if (this.fontRegistry) {\n              this.fontRegistry.registerFont(this, url);\n            }\n\n            return rule;\n          }\n\n          getPathGenerator(objs, character) {\n            if (this.compiledGlyphs[character] !== undefined) {\n              return this.compiledGlyphs[character];\n            }\n\n            let cmds;\n\n            try {\n              cmds = objs.get(this.loadedName + \"_path_\" + character);\n            } catch (ex) {\n              if (!this.ignoreErrors) {\n                throw ex;\n              }\n\n              this._onUnsupportedFeature({\n                featureId: _util.UNSUPPORTED_FEATURES.errorFontGetPath\n              });\n\n              (0, _util.warn)(`getPathGenerator - ignoring character: \"${ex}\".`);\n              return this.compiledGlyphs[character] = function (c, size) {};\n            }\n\n            if (this.isEvalSupported && _util.IsEvalSupportedCached.value) {\n              const jsBuf = [];\n\n              for (const current of cmds) {\n                const args = current.args !== undefined ? current.args.join(\",\") : \"\";\n                jsBuf.push(\"c.\", current.cmd, \"(\", args, \");\\n\");\n              }\n\n              return this.compiledGlyphs[character] = new Function(\"c\", \"size\", jsBuf.join(\"\"));\n            }\n\n            return this.compiledGlyphs[character] = function (c, size) {\n              for (const current of cmds) {\n                if (current.cmd === \"scale\") {\n                  current.args = [size, -size];\n                }\n\n                c[current.cmd].apply(c, current.args);\n              }\n            };\n          }\n\n        }\n\n        exports.FontFaceObject = FontFaceObject;\n        /***/\n      },\n      /* 8 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.NodeStandardFontDataFactory = exports.NodeCMapReaderFactory = exports.NodeCanvasFactory = void 0;\n\n        var _base_factory = __w_pdfjs_require__(5);\n\n        var _is_node = __w_pdfjs_require__(4);\n\n        var _util = __w_pdfjs_require__(2);\n\n        let NodeCanvasFactory = class {\n          constructor() {\n            (0, _util.unreachable)(\"Not implemented: NodeCanvasFactory\");\n          }\n\n        };\n        exports.NodeCanvasFactory = NodeCanvasFactory;\n        let NodeCMapReaderFactory = class {\n          constructor() {\n            (0, _util.unreachable)(\"Not implemented: NodeCMapReaderFactory\");\n          }\n\n        };\n        exports.NodeCMapReaderFactory = NodeCMapReaderFactory;\n        let NodeStandardFontDataFactory = class {\n          constructor() {\n            (0, _util.unreachable)(\"Not implemented: NodeStandardFontDataFactory\");\n          }\n\n        };\n        exports.NodeStandardFontDataFactory = NodeStandardFontDataFactory;\n\n        if (_is_node.isNodeJS) {\n          const fetchData = function (url) {\n            return new Promise((resolve, reject) => {\n              const fs = require(\"fs\");\n\n              fs.readFile(url, (error, data) => {\n                if (error || !data) {\n                  reject(new Error(error));\n                  return;\n                }\n\n                resolve(new Uint8Array(data));\n              });\n            });\n          };\n\n          exports.NodeCanvasFactory = NodeCanvasFactory = class extends _base_factory.BaseCanvasFactory {\n            _createCanvas(width, height) {\n              const Canvas = require(\"canvas\");\n\n              return Canvas.createCanvas(width, height);\n            }\n\n          };\n          exports.NodeCMapReaderFactory = NodeCMapReaderFactory = class extends _base_factory.BaseCMapReaderFactory {\n            _fetchData(url, compressionType) {\n              return fetchData(url).then(data => {\n                return {\n                  cMapData: data,\n                  compressionType\n                };\n              });\n            }\n\n          };\n          exports.NodeStandardFontDataFactory = NodeStandardFontDataFactory = class extends _base_factory.BaseStandardFontDataFactory {\n            _fetchData(url) {\n              return fetchData(url);\n            }\n\n          };\n        }\n        /***/\n\n      },\n      /* 9 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.AnnotationStorage = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class AnnotationStorage {\n          constructor() {\n            this._storage = new Map();\n            this._modified = false;\n            this.onSetModified = null;\n            this.onResetModified = null;\n          }\n\n          getValue(key, defaultValue) {\n            const obj = this._storage.get(key);\n\n            return obj !== undefined ? obj : defaultValue;\n          }\n\n          setValue(key, value) {\n            const obj = this._storage.get(key);\n\n            let modified = false;\n\n            if (obj !== undefined) {\n              for (const [entry, val] of Object.entries(value)) {\n                if (obj[entry] !== val) {\n                  modified = true;\n                  obj[entry] = val;\n                }\n              }\n            } else {\n              this._storage.set(key, value);\n\n              modified = true;\n            }\n\n            if (modified) {\n              this._setModified();\n            }\n          }\n\n          getAll() {\n            return this._storage.size > 0 ? (0, _util.objectFromMap)(this._storage) : null;\n          }\n\n          get size() {\n            return this._storage.size;\n          }\n\n          _setModified() {\n            if (!this._modified) {\n              this._modified = true;\n\n              if (typeof this.onSetModified === \"function\") {\n                this.onSetModified();\n              }\n            }\n          }\n\n          resetModified() {\n            if (this._modified) {\n              this._modified = false;\n\n              if (typeof this.onResetModified === \"function\") {\n                this.onResetModified();\n              }\n            }\n          }\n\n          get serializable() {\n            return this._storage.size > 0 ? this._storage : null;\n          }\n\n        }\n\n        exports.AnnotationStorage = AnnotationStorage;\n        /***/\n      },\n      /* 10 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.CanvasGraphics = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _pattern_helper = __w_pdfjs_require__(11);\n\n        const MIN_FONT_SIZE = 16;\n        const MAX_FONT_SIZE = 100;\n        const MAX_GROUP_SIZE = 4096;\n        const COMPILE_TYPE3_GLYPHS = true;\n        const MAX_SIZE_TO_COMPILE = 1000;\n        const FULL_CHUNK_HEIGHT = 16;\n        const LINEWIDTH_SCALE_FACTOR = 1.000001;\n\n        function addContextCurrentTransform(ctx) {\n          if (ctx.mozCurrentTransform) {\n            return;\n          }\n\n          ctx._originalSave = ctx.save;\n          ctx._originalRestore = ctx.restore;\n          ctx._originalRotate = ctx.rotate;\n          ctx._originalScale = ctx.scale;\n          ctx._originalTranslate = ctx.translate;\n          ctx._originalTransform = ctx.transform;\n          ctx._originalSetTransform = ctx.setTransform;\n          ctx._originalResetTransform = ctx.resetTransform;\n          ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];\n          ctx._transformStack = [];\n\n          try {\n            const desc = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(ctx), \"lineWidth\");\n            ctx._setLineWidth = desc.set;\n            ctx._getLineWidth = desc.get;\n            Object.defineProperty(ctx, \"lineWidth\", {\n              set: function setLineWidth(width) {\n                this._setLineWidth(width * LINEWIDTH_SCALE_FACTOR);\n              },\n              get: function getLineWidth() {\n                return this._getLineWidth();\n              }\n            });\n          } catch (_) {}\n\n          Object.defineProperty(ctx, \"mozCurrentTransform\", {\n            get: function getCurrentTransform() {\n              return this._transformMatrix;\n            }\n          });\n          Object.defineProperty(ctx, \"mozCurrentTransformInverse\", {\n            get: function getCurrentTransformInverse() {\n              const [a, b, c, d, e, f] = this._transformMatrix;\n              const ad_bc = a * d - b * c;\n              const bc_ad = b * c - a * d;\n              return [d / ad_bc, b / bc_ad, c / bc_ad, a / ad_bc, (d * e - c * f) / bc_ad, (b * e - a * f) / ad_bc];\n            }\n          });\n\n          ctx.save = function ctxSave() {\n            const old = this._transformMatrix;\n\n            this._transformStack.push(old);\n\n            this._transformMatrix = old.slice(0, 6);\n\n            this._originalSave();\n          };\n\n          ctx.restore = function ctxRestore() {\n            const prev = this._transformStack.pop();\n\n            if (prev) {\n              this._transformMatrix = prev;\n\n              this._originalRestore();\n            }\n          };\n\n          ctx.translate = function ctxTranslate(x, y) {\n            const m = this._transformMatrix;\n            m[4] = m[0] * x + m[2] * y + m[4];\n            m[5] = m[1] * x + m[3] * y + m[5];\n\n            this._originalTranslate(x, y);\n          };\n\n          ctx.scale = function ctxScale(x, y) {\n            const m = this._transformMatrix;\n            m[0] *= x;\n            m[1] *= x;\n            m[2] *= y;\n            m[3] *= y;\n\n            this._originalScale(x, y);\n          };\n\n          ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n            const m = this._transformMatrix;\n            this._transformMatrix = [m[0] * a + m[2] * b, m[1] * a + m[3] * b, m[0] * c + m[2] * d, m[1] * c + m[3] * d, m[0] * e + m[2] * f + m[4], m[1] * e + m[3] * f + m[5]];\n\n            ctx._originalTransform(a, b, c, d, e, f);\n          };\n\n          ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n            this._transformMatrix = [a, b, c, d, e, f];\n\n            ctx._originalSetTransform(a, b, c, d, e, f);\n          };\n\n          ctx.resetTransform = function ctxResetTransform() {\n            this._transformMatrix = [1, 0, 0, 1, 0, 0];\n\n            ctx._originalResetTransform();\n          };\n\n          ctx.rotate = function ctxRotate(angle) {\n            const cosValue = Math.cos(angle);\n            const sinValue = Math.sin(angle);\n            const m = this._transformMatrix;\n            this._transformMatrix = [m[0] * cosValue + m[2] * sinValue, m[1] * cosValue + m[3] * sinValue, m[0] * -sinValue + m[2] * cosValue, m[1] * -sinValue + m[3] * cosValue, m[4], m[5]];\n\n            this._originalRotate(angle);\n          };\n        }\n\n        class CachedCanvases {\n          constructor(canvasFactory) {\n            this.canvasFactory = canvasFactory;\n            this.cache = Object.create(null);\n          }\n\n          getCanvas(id, width, height, trackTransform) {\n            let canvasEntry;\n\n            if (this.cache[id] !== undefined) {\n              canvasEntry = this.cache[id];\n              this.canvasFactory.reset(canvasEntry, width, height);\n              canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);\n            } else {\n              canvasEntry = this.canvasFactory.create(width, height);\n              this.cache[id] = canvasEntry;\n            }\n\n            if (trackTransform) {\n              addContextCurrentTransform(canvasEntry.context);\n            }\n\n            return canvasEntry;\n          }\n\n          clear() {\n            for (const id in this.cache) {\n              const canvasEntry = this.cache[id];\n              this.canvasFactory.destroy(canvasEntry);\n              delete this.cache[id];\n            }\n          }\n\n        }\n\n        function compileType3Glyph(imgData) {\n          const POINT_TO_PROCESS_LIMIT = 1000;\n          const POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);\n          const width = imgData.width,\n                height = imgData.height,\n                width1 = width + 1;\n          let i, ii, j, j0;\n          const points = new Uint8Array(width1 * (height + 1));\n          const lineSize = width + 7 & ~7,\n                data0 = imgData.data;\n          const data = new Uint8Array(lineSize * height);\n          let pos = 0;\n\n          for (i = 0, ii = data0.length; i < ii; i++) {\n            const elem = data0[i];\n            let mask = 128;\n\n            while (mask > 0) {\n              data[pos++] = elem & mask ? 0 : 255;\n              mask >>= 1;\n            }\n          }\n\n          let count = 0;\n          pos = 0;\n\n          if (data[pos] !== 0) {\n            points[0] = 1;\n            ++count;\n          }\n\n          for (j = 1; j < width; j++) {\n            if (data[pos] !== data[pos + 1]) {\n              points[j] = data[pos] ? 2 : 1;\n              ++count;\n            }\n\n            pos++;\n          }\n\n          if (data[pos] !== 0) {\n            points[j] = 2;\n            ++count;\n          }\n\n          for (i = 1; i < height; i++) {\n            pos = i * lineSize;\n            j0 = i * width1;\n\n            if (data[pos - lineSize] !== data[pos]) {\n              points[j0] = data[pos] ? 1 : 8;\n              ++count;\n            }\n\n            let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n\n            for (j = 1; j < width; j++) {\n              sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);\n\n              if (POINT_TYPES[sum]) {\n                points[j0 + j] = POINT_TYPES[sum];\n                ++count;\n              }\n\n              pos++;\n            }\n\n            if (data[pos - lineSize] !== data[pos]) {\n              points[j0 + j] = data[pos] ? 2 : 4;\n              ++count;\n            }\n\n            if (count > POINT_TO_PROCESS_LIMIT) {\n              return null;\n            }\n          }\n\n          pos = lineSize * (height - 1);\n          j0 = i * width1;\n\n          if (data[pos] !== 0) {\n            points[j0] = 8;\n            ++count;\n          }\n\n          for (j = 1; j < width; j++) {\n            if (data[pos] !== data[pos + 1]) {\n              points[j0 + j] = data[pos] ? 4 : 8;\n              ++count;\n            }\n\n            pos++;\n          }\n\n          if (data[pos] !== 0) {\n            points[j0 + j] = 4;\n            ++count;\n          }\n\n          if (count > POINT_TO_PROCESS_LIMIT) {\n            return null;\n          }\n\n          const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n          const outlines = [];\n\n          for (i = 0; count && i <= height; i++) {\n            let p = i * width1;\n            const end = p + width;\n\n            while (p < end && !points[p]) {\n              p++;\n            }\n\n            if (p === end) {\n              continue;\n            }\n\n            const coords = [p % width1, i];\n            const p0 = p;\n            let type = points[p];\n\n            do {\n              const step = steps[type];\n\n              do {\n                p += step;\n              } while (!points[p]);\n\n              const pp = points[p];\n\n              if (pp !== 5 && pp !== 10) {\n                type = pp;\n                points[p] = 0;\n              } else {\n                type = pp & 0x33 * type >> 4;\n                points[p] &= type >> 2 | type << 2;\n              }\n\n              coords.push(p % width1, p / width1 | 0);\n\n              if (!points[p]) {\n                --count;\n              }\n            } while (p0 !== p);\n\n            outlines.push(coords);\n            --i;\n          }\n\n          const drawOutline = function (c) {\n            c.save();\n            c.scale(1 / width, -1 / height);\n            c.translate(0, -height);\n            c.beginPath();\n\n            for (let k = 0, kk = outlines.length; k < kk; k++) {\n              const o = outlines[k];\n              c.moveTo(o[0], o[1]);\n\n              for (let l = 2, ll = o.length; l < ll; l += 2) {\n                c.lineTo(o[l], o[l + 1]);\n              }\n            }\n\n            c.fill();\n            c.beginPath();\n            c.restore();\n          };\n\n          return drawOutline;\n        }\n\n        class CanvasExtraState {\n          constructor() {\n            this.alphaIsShape = false;\n            this.fontSize = 0;\n            this.fontSizeScale = 1;\n            this.textMatrix = _util.IDENTITY_MATRIX;\n            this.textMatrixScale = 1;\n            this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n            this.leading = 0;\n            this.x = 0;\n            this.y = 0;\n            this.lineX = 0;\n            this.lineY = 0;\n            this.charSpacing = 0;\n            this.wordSpacing = 0;\n            this.textHScale = 1;\n            this.textRenderingMode = _util.TextRenderingMode.FILL;\n            this.textRise = 0;\n            this.fillColor = \"#000000\";\n            this.strokeColor = \"#000000\";\n            this.patternFill = false;\n            this.fillAlpha = 1;\n            this.strokeAlpha = 1;\n            this.lineWidth = 1;\n            this.activeSMask = null;\n            this.resumeSMaskCtx = null;\n            this.transferMaps = null;\n          }\n\n          clone() {\n            return Object.create(this);\n          }\n\n          setCurrentPoint(x, y) {\n            this.x = x;\n            this.y = y;\n          }\n\n        }\n\n        const CanvasGraphics = function CanvasGraphicsClosure() {\n          const EXECUTION_TIME = 15;\n          const EXECUTION_STEPS = 10;\n\n          function putBinaryImageData(ctx, imgData) {\n            let transferMaps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n            if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n              ctx.putImageData(imgData, 0, 0);\n              return;\n            }\n\n            const height = imgData.height,\n                  width = imgData.width;\n            const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n            const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n            const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n            const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n            let srcPos = 0,\n                destPos;\n            const src = imgData.data;\n            const dest = chunkImgData.data;\n            let i, j, thisChunkHeight, elemsInThisChunk;\n            let transferMapRed, transferMapGreen, transferMapBlue, transferMapGray;\n\n            if (transferMaps) {\n              switch (transferMaps.length) {\n                case 1:\n                  transferMapRed = transferMaps[0];\n                  transferMapGreen = transferMaps[0];\n                  transferMapBlue = transferMaps[0];\n                  transferMapGray = transferMaps[0];\n                  break;\n\n                case 4:\n                  transferMapRed = transferMaps[0];\n                  transferMapGreen = transferMaps[1];\n                  transferMapBlue = transferMaps[2];\n                  transferMapGray = transferMaps[3];\n                  break;\n              }\n            }\n\n            if (imgData.kind === _util.ImageKind.GRAYSCALE_1BPP) {\n              const srcLength = src.byteLength;\n              const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n              const dest32DataLength = dest32.length;\n              const fullSrcDiff = width + 7 >> 3;\n              let white = 0xffffffff;\n              let black = _util.IsLittleEndianCached.value ? 0xff000000 : 0x000000ff;\n\n              if (transferMapGray) {\n                if (transferMapGray[0] === 0xff && transferMapGray[0xff] === 0) {\n                  [white, black] = [black, white];\n                }\n              }\n\n              for (i = 0; i < totalChunks; i++) {\n                thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n                destPos = 0;\n\n                for (j = 0; j < thisChunkHeight; j++) {\n                  const srcDiff = srcLength - srcPos;\n                  let k = 0;\n                  const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n                  const kEndUnrolled = kEnd & ~7;\n                  let mask = 0;\n                  let srcByte = 0;\n\n                  for (; k < kEndUnrolled; k += 8) {\n                    srcByte = src[srcPos++];\n                    dest32[destPos++] = srcByte & 128 ? white : black;\n                    dest32[destPos++] = srcByte & 64 ? white : black;\n                    dest32[destPos++] = srcByte & 32 ? white : black;\n                    dest32[destPos++] = srcByte & 16 ? white : black;\n                    dest32[destPos++] = srcByte & 8 ? white : black;\n                    dest32[destPos++] = srcByte & 4 ? white : black;\n                    dest32[destPos++] = srcByte & 2 ? white : black;\n                    dest32[destPos++] = srcByte & 1 ? white : black;\n                  }\n\n                  for (; k < kEnd; k++) {\n                    if (mask === 0) {\n                      srcByte = src[srcPos++];\n                      mask = 128;\n                    }\n\n                    dest32[destPos++] = srcByte & mask ? white : black;\n                    mask >>= 1;\n                  }\n                }\n\n                while (destPos < dest32DataLength) {\n                  dest32[destPos++] = 0;\n                }\n\n                ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n              }\n            } else if (imgData.kind === _util.ImageKind.RGBA_32BPP) {\n              const hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);\n              j = 0;\n              elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n\n              for (i = 0; i < fullChunks; i++) {\n                dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n                srcPos += elemsInThisChunk;\n\n                if (hasTransferMaps) {\n                  for (let k = 0; k < elemsInThisChunk; k += 4) {\n                    if (transferMapRed) {\n                      dest[k + 0] = transferMapRed[dest[k + 0]];\n                    }\n\n                    if (transferMapGreen) {\n                      dest[k + 1] = transferMapGreen[dest[k + 1]];\n                    }\n\n                    if (transferMapBlue) {\n                      dest[k + 2] = transferMapBlue[dest[k + 2]];\n                    }\n                  }\n                }\n\n                ctx.putImageData(chunkImgData, 0, j);\n                j += FULL_CHUNK_HEIGHT;\n              }\n\n              if (i < totalChunks) {\n                elemsInThisChunk = width * partialChunkHeight * 4;\n                dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n\n                if (hasTransferMaps) {\n                  for (let k = 0; k < elemsInThisChunk; k += 4) {\n                    if (transferMapRed) {\n                      dest[k + 0] = transferMapRed[dest[k + 0]];\n                    }\n\n                    if (transferMapGreen) {\n                      dest[k + 1] = transferMapGreen[dest[k + 1]];\n                    }\n\n                    if (transferMapBlue) {\n                      dest[k + 2] = transferMapBlue[dest[k + 2]];\n                    }\n                  }\n                }\n\n                ctx.putImageData(chunkImgData, 0, j);\n              }\n            } else if (imgData.kind === _util.ImageKind.RGB_24BPP) {\n              const hasTransferMaps = !!(transferMapRed || transferMapGreen || transferMapBlue);\n              thisChunkHeight = FULL_CHUNK_HEIGHT;\n              elemsInThisChunk = width * thisChunkHeight;\n\n              for (i = 0; i < totalChunks; i++) {\n                if (i >= fullChunks) {\n                  thisChunkHeight = partialChunkHeight;\n                  elemsInThisChunk = width * thisChunkHeight;\n                }\n\n                destPos = 0;\n\n                for (j = elemsInThisChunk; j--;) {\n                  dest[destPos++] = src[srcPos++];\n                  dest[destPos++] = src[srcPos++];\n                  dest[destPos++] = src[srcPos++];\n                  dest[destPos++] = 255;\n                }\n\n                if (hasTransferMaps) {\n                  for (let k = 0; k < destPos; k += 4) {\n                    if (transferMapRed) {\n                      dest[k + 0] = transferMapRed[dest[k + 0]];\n                    }\n\n                    if (transferMapGreen) {\n                      dest[k + 1] = transferMapGreen[dest[k + 1]];\n                    }\n\n                    if (transferMapBlue) {\n                      dest[k + 2] = transferMapBlue[dest[k + 2]];\n                    }\n                  }\n                }\n\n                ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n              }\n            } else {\n              throw new Error(`bad image kind: ${imgData.kind}`);\n            }\n          }\n\n          function putBinaryImageMask(ctx, imgData) {\n            const height = imgData.height,\n                  width = imgData.width;\n            const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n            const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n            const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n            const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n            let srcPos = 0;\n            const src = imgData.data;\n            const dest = chunkImgData.data;\n\n            for (let i = 0; i < totalChunks; i++) {\n              const thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n              let destPos = 3;\n\n              for (let j = 0; j < thisChunkHeight; j++) {\n                let elem,\n                    mask = 0;\n\n                for (let k = 0; k < width; k++) {\n                  if (!mask) {\n                    elem = src[srcPos++];\n                    mask = 128;\n                  }\n\n                  dest[destPos] = elem & mask ? 0 : 255;\n                  destPos += 4;\n                  mask >>= 1;\n                }\n              }\n\n              ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n            }\n          }\n\n          function copyCtxState(sourceCtx, destCtx) {\n            const properties = [\"strokeStyle\", \"fillStyle\", \"fillRule\", \"globalAlpha\", \"lineWidth\", \"lineCap\", \"lineJoin\", \"miterLimit\", \"globalCompositeOperation\", \"font\"];\n\n            for (let i = 0, ii = properties.length; i < ii; i++) {\n              const property = properties[i];\n\n              if (sourceCtx[property] !== undefined) {\n                destCtx[property] = sourceCtx[property];\n              }\n            }\n\n            if (sourceCtx.setLineDash !== undefined) {\n              destCtx.setLineDash(sourceCtx.getLineDash());\n              destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n            }\n          }\n\n          function resetCtxToDefault(ctx) {\n            ctx.strokeStyle = \"#000000\";\n            ctx.fillStyle = \"#000000\";\n            ctx.fillRule = \"nonzero\";\n            ctx.globalAlpha = 1;\n            ctx.lineWidth = 1;\n            ctx.lineCap = \"butt\";\n            ctx.lineJoin = \"miter\";\n            ctx.miterLimit = 10;\n            ctx.globalCompositeOperation = \"source-over\";\n            ctx.font = \"10px sans-serif\";\n\n            if (ctx.setLineDash !== undefined) {\n              ctx.setLineDash([]);\n              ctx.lineDashOffset = 0;\n            }\n          }\n\n          function composeSMaskBackdrop(bytes, r0, g0, b0) {\n            const length = bytes.length;\n\n            for (let i = 3; i < length; i += 4) {\n              const alpha = bytes[i];\n\n              if (alpha === 0) {\n                bytes[i - 3] = r0;\n                bytes[i - 2] = g0;\n                bytes[i - 1] = b0;\n              } else if (alpha < 255) {\n                const alpha_ = 255 - alpha;\n                bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;\n                bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;\n                bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;\n              }\n            }\n          }\n\n          function composeSMaskAlpha(maskData, layerData, transferMap) {\n            const length = maskData.length;\n            const scale = 1 / 255;\n\n            for (let i = 3; i < length; i += 4) {\n              const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\n              layerData[i] = layerData[i] * alpha * scale | 0;\n            }\n          }\n\n          function composeSMaskLuminosity(maskData, layerData, transferMap) {\n            const length = maskData.length;\n\n            for (let i = 3; i < length; i += 4) {\n              const y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;\n              layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;\n            }\n          }\n\n          function genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap) {\n            const hasBackdrop = !!backdrop;\n            const r0 = hasBackdrop ? backdrop[0] : 0;\n            const g0 = hasBackdrop ? backdrop[1] : 0;\n            const b0 = hasBackdrop ? backdrop[2] : 0;\n            let composeFn;\n\n            if (subtype === \"Luminosity\") {\n              composeFn = composeSMaskLuminosity;\n            } else {\n              composeFn = composeSMaskAlpha;\n            }\n\n            const PIXELS_TO_PROCESS = 1048576;\n            const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\n\n            for (let row = 0; row < height; row += chunkSize) {\n              const chunkHeight = Math.min(chunkSize, height - row);\n              const maskData = maskCtx.getImageData(0, row, width, chunkHeight);\n              const layerData = layerCtx.getImageData(0, row, width, chunkHeight);\n\n              if (hasBackdrop) {\n                composeSMaskBackdrop(maskData.data, r0, g0, b0);\n              }\n\n              composeFn(maskData.data, layerData.data, transferMap);\n              maskCtx.putImageData(layerData, 0, row);\n            }\n          }\n\n          function composeSMask(ctx, smask, layerCtx) {\n            const mask = smask.canvas;\n            const maskCtx = smask.context;\n            ctx.setTransform(smask.scaleX, 0, 0, smask.scaleY, smask.offsetX, smask.offsetY);\n            genericComposeSMask(maskCtx, layerCtx, mask.width, mask.height, smask.subtype, smask.backdrop, smask.transferMap);\n            ctx.drawImage(mask, 0, 0);\n          }\n\n          const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n          const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n          const NORMAL_CLIP = {};\n          const EO_CLIP = {};\n\n          class CanvasGraphics {\n            constructor(canvasCtx, commonObjs, objs, canvasFactory, imageLayer, optionalContentConfig) {\n              this.ctx = canvasCtx;\n              this.current = new CanvasExtraState();\n              this.stateStack = [];\n              this.pendingClip = null;\n              this.pendingEOFill = false;\n              this.res = null;\n              this.xobjs = null;\n              this.commonObjs = commonObjs;\n              this.objs = objs;\n              this.canvasFactory = canvasFactory;\n              this.imageLayer = imageLayer;\n              this.groupStack = [];\n              this.processingType3 = null;\n              this.baseTransform = null;\n              this.baseTransformStack = [];\n              this.groupLevel = 0;\n              this.smaskStack = [];\n              this.smaskCounter = 0;\n              this.tempSMask = null;\n              this.contentVisible = true;\n              this.markedContentStack = [];\n              this.optionalContentConfig = optionalContentConfig;\n              this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n              this.cachedPatterns = new Map();\n\n              if (canvasCtx) {\n                addContextCurrentTransform(canvasCtx);\n              }\n\n              this._cachedGetSinglePixelWidth = null;\n            }\n\n            beginDrawing(_ref21) {\n              let {\n                transform,\n                viewport,\n                transparency = false,\n                background = null\n              } = _ref21;\n              const width = this.ctx.canvas.width;\n              const height = this.ctx.canvas.height;\n              this.ctx.save();\n              this.ctx.fillStyle = background || \"rgb(255, 255, 255)\";\n              this.ctx.fillRect(0, 0, width, height);\n              this.ctx.restore();\n\n              if (transparency) {\n                const transparentCanvas = this.cachedCanvases.getCanvas(\"transparent\", width, height, true);\n                this.compositeCtx = this.ctx;\n                this.transparentCanvas = transparentCanvas.canvas;\n                this.ctx = transparentCanvas.context;\n                this.ctx.save();\n                this.ctx.transform.apply(this.ctx, this.compositeCtx.mozCurrentTransform);\n              }\n\n              this.ctx.save();\n              resetCtxToDefault(this.ctx);\n\n              if (transform) {\n                this.ctx.transform.apply(this.ctx, transform);\n              }\n\n              this.ctx.transform.apply(this.ctx, viewport.transform);\n              this.baseTransform = this.ctx.mozCurrentTransform.slice();\n              this._combinedScaleFactor = Math.hypot(this.baseTransform[0], this.baseTransform[2]);\n\n              if (this.imageLayer) {\n                this.imageLayer.beginLayout();\n              }\n            }\n\n            executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {\n              const argsArray = operatorList.argsArray;\n              const fnArray = operatorList.fnArray;\n              let i = executionStartIdx || 0;\n              const argsArrayLen = argsArray.length;\n\n              if (argsArrayLen === i) {\n                return i;\n              }\n\n              const chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === \"function\";\n              const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n              let steps = 0;\n              const commonObjs = this.commonObjs;\n              const objs = this.objs;\n              let fnId;\n\n              while (true) {\n                if (stepper !== undefined && i === stepper.nextBreakPoint) {\n                  stepper.breakIt(i, continueCallback);\n                  return i;\n                }\n\n                fnId = fnArray[i];\n\n                if (fnId !== _util.OPS.dependency) {\n                  this[fnId].apply(this, argsArray[i]);\n                } else {\n                  for (const depObjId of argsArray[i]) {\n                    const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n\n                    if (!objsPool.has(depObjId)) {\n                      objsPool.get(depObjId, continueCallback);\n                      return i;\n                    }\n                  }\n                }\n\n                i++;\n\n                if (i === argsArrayLen) {\n                  return i;\n                }\n\n                if (chunkOperations && ++steps > EXECUTION_STEPS) {\n                  if (Date.now() > endTime) {\n                    continueCallback();\n                    return i;\n                  }\n\n                  steps = 0;\n                }\n              }\n            }\n\n            endDrawing() {\n              while (this.stateStack.length || this.current.activeSMask !== null) {\n                this.restore();\n              }\n\n              this.ctx.restore();\n\n              if (this.transparentCanvas) {\n                this.ctx = this.compositeCtx;\n                this.ctx.save();\n                this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n                this.ctx.drawImage(this.transparentCanvas, 0, 0);\n                this.ctx.restore();\n                this.transparentCanvas = null;\n              }\n\n              this.cachedCanvases.clear();\n              this.cachedPatterns.clear();\n\n              if (this.imageLayer) {\n                this.imageLayer.endLayout();\n              }\n            }\n\n            _scaleImage(img, inverseTransform) {\n              const width = img.width;\n              const height = img.height;\n              let widthScale = Math.max(Math.hypot(inverseTransform[0], inverseTransform[1]), 1);\n              let heightScale = Math.max(Math.hypot(inverseTransform[2], inverseTransform[3]), 1);\n              let paintWidth = width,\n                  paintHeight = height;\n              let tmpCanvasId = \"prescale1\";\n              let tmpCanvas, tmpCtx;\n\n              while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {\n                let newWidth = paintWidth,\n                    newHeight = paintHeight;\n\n                if (widthScale > 2 && paintWidth > 1) {\n                  newWidth = Math.ceil(paintWidth / 2);\n                  widthScale /= paintWidth / newWidth;\n                }\n\n                if (heightScale > 2 && paintHeight > 1) {\n                  newHeight = Math.ceil(paintHeight / 2);\n                  heightScale /= paintHeight / newHeight;\n                }\n\n                tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);\n                tmpCtx = tmpCanvas.context;\n                tmpCtx.clearRect(0, 0, newWidth, newHeight);\n                tmpCtx.drawImage(img, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);\n                img = tmpCanvas.canvas;\n                paintWidth = newWidth;\n                paintHeight = newHeight;\n                tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n              }\n\n              return {\n                img,\n                paintWidth,\n                paintHeight\n              };\n            }\n\n            _createMaskCanvas(img) {\n              const ctx = this.ctx;\n              const width = img.width,\n                    height = img.height;\n              const fillColor = this.current.fillColor;\n              const isPatternFill = this.current.patternFill;\n              const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n              const maskCtx = maskCanvas.context;\n              putBinaryImageMask(maskCtx, img);\n              const objToCanvas = ctx.mozCurrentTransform;\n\n              let maskToCanvas = _util.Util.transform(objToCanvas, [1 / width, 0, 0, -1 / height, 0, 0]);\n\n              maskToCanvas = _util.Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);\n\n              const cord1 = _util.Util.applyTransform([0, 0], maskToCanvas);\n\n              const cord2 = _util.Util.applyTransform([width, height], maskToCanvas);\n\n              const rect = _util.Util.normalizeRect([cord1[0], cord1[1], cord2[0], cord2[1]]);\n\n              const drawnWidth = Math.ceil(rect[2] - rect[0]);\n              const drawnHeight = Math.ceil(rect[3] - rect[1]);\n              const fillCanvas = this.cachedCanvases.getCanvas(\"fillCanvas\", drawnWidth, drawnHeight, true);\n              const fillCtx = fillCanvas.context;\n              const offsetX = Math.min(cord1[0], cord2[0]);\n              const offsetY = Math.min(cord1[1], cord2[1]);\n              fillCtx.translate(-offsetX, -offsetY);\n              fillCtx.transform.apply(fillCtx, maskToCanvas);\n\n              const scaled = this._scaleImage(maskCanvas.canvas, fillCtx.mozCurrentTransformInverse);\n\n              fillCtx.drawImage(scaled.img, 0, 0, scaled.img.width, scaled.img.height, 0, 0, width, height);\n              fillCtx.globalCompositeOperation = \"source-in\";\n\n              const inverse = _util.Util.transform(fillCtx.mozCurrentTransformInverse, [1, 0, 0, 1, -offsetX, -offsetY]);\n\n              fillCtx.fillStyle = isPatternFill ? fillColor.getPattern(ctx, this, inverse, false) : fillColor;\n              fillCtx.fillRect(0, 0, width, height);\n              return {\n                canvas: fillCanvas.canvas,\n                offsetX: Math.round(offsetX),\n                offsetY: Math.round(offsetY)\n              };\n            }\n\n            setLineWidth(width) {\n              this.current.lineWidth = width;\n              this.ctx.lineWidth = width;\n            }\n\n            setLineCap(style) {\n              this.ctx.lineCap = LINE_CAP_STYLES[style];\n            }\n\n            setLineJoin(style) {\n              this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n            }\n\n            setMiterLimit(limit) {\n              this.ctx.miterLimit = limit;\n            }\n\n            setDash(dashArray, dashPhase) {\n              const ctx = this.ctx;\n\n              if (ctx.setLineDash !== undefined) {\n                ctx.setLineDash(dashArray);\n                ctx.lineDashOffset = dashPhase;\n              }\n            }\n\n            setRenderingIntent(intent) {}\n\n            setFlatness(flatness) {}\n\n            setGState(states) {\n              for (let i = 0, ii = states.length; i < ii; i++) {\n                const state = states[i];\n                const key = state[0];\n                const value = state[1];\n\n                switch (key) {\n                  case \"LW\":\n                    this.setLineWidth(value);\n                    break;\n\n                  case \"LC\":\n                    this.setLineCap(value);\n                    break;\n\n                  case \"LJ\":\n                    this.setLineJoin(value);\n                    break;\n\n                  case \"ML\":\n                    this.setMiterLimit(value);\n                    break;\n\n                  case \"D\":\n                    this.setDash(value[0], value[1]);\n                    break;\n\n                  case \"RI\":\n                    this.setRenderingIntent(value);\n                    break;\n\n                  case \"FL\":\n                    this.setFlatness(value);\n                    break;\n\n                  case \"Font\":\n                    this.setFont(value[0], value[1]);\n                    break;\n\n                  case \"CA\":\n                    this.current.strokeAlpha = state[1];\n                    break;\n\n                  case \"ca\":\n                    this.current.fillAlpha = state[1];\n                    this.ctx.globalAlpha = state[1];\n                    break;\n\n                  case \"BM\":\n                    this.ctx.globalCompositeOperation = value;\n                    break;\n\n                  case \"SMask\":\n                    if (this.current.activeSMask) {\n                      if (this.stateStack.length > 0 && this.stateStack[this.stateStack.length - 1].activeSMask === this.current.activeSMask) {\n                        this.suspendSMaskGroup();\n                      } else {\n                        this.endSMaskGroup();\n                      }\n                    }\n\n                    this.current.activeSMask = value ? this.tempSMask : null;\n\n                    if (this.current.activeSMask) {\n                      this.beginSMaskGroup();\n                    }\n\n                    this.tempSMask = null;\n                    break;\n\n                  case \"TR\":\n                    this.current.transferMaps = value;\n                }\n              }\n            }\n\n            beginSMaskGroup() {\n              const activeSMask = this.current.activeSMask;\n              const drawnWidth = activeSMask.canvas.width;\n              const drawnHeight = activeSMask.canvas.height;\n              const cacheId = \"smaskGroupAt\" + this.groupLevel;\n              const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);\n              const currentCtx = this.ctx;\n              const currentTransform = currentCtx.mozCurrentTransform;\n              this.ctx.save();\n              const groupCtx = scratchCanvas.context;\n              groupCtx.scale(1 / activeSMask.scaleX, 1 / activeSMask.scaleY);\n              groupCtx.translate(-activeSMask.offsetX, -activeSMask.offsetY);\n              groupCtx.transform.apply(groupCtx, currentTransform);\n              activeSMask.startTransformInverse = groupCtx.mozCurrentTransformInverse;\n              copyCtxState(currentCtx, groupCtx);\n              this.ctx = groupCtx;\n              this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n              this.groupStack.push(currentCtx);\n              this.groupLevel++;\n            }\n\n            suspendSMaskGroup() {\n              const groupCtx = this.ctx;\n              this.groupLevel--;\n              this.ctx = this.groupStack.pop();\n              composeSMask(this.ctx, this.current.activeSMask, groupCtx);\n              this.ctx.restore();\n              this.ctx.save();\n              copyCtxState(groupCtx, this.ctx);\n              this.current.resumeSMaskCtx = groupCtx;\n\n              const deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);\n\n              this.ctx.transform.apply(this.ctx, deltaTransform);\n              groupCtx.save();\n              groupCtx.setTransform(1, 0, 0, 1, 0, 0);\n              groupCtx.clearRect(0, 0, groupCtx.canvas.width, groupCtx.canvas.height);\n              groupCtx.restore();\n            }\n\n            resumeSMaskGroup() {\n              const groupCtx = this.current.resumeSMaskCtx;\n              const currentCtx = this.ctx;\n              this.ctx = groupCtx;\n              this.groupStack.push(currentCtx);\n              this.groupLevel++;\n            }\n\n            endSMaskGroup() {\n              const groupCtx = this.ctx;\n              this.groupLevel--;\n              this.ctx = this.groupStack.pop();\n              composeSMask(this.ctx, this.current.activeSMask, groupCtx);\n              this.ctx.restore();\n              copyCtxState(groupCtx, this.ctx);\n\n              const deltaTransform = _util.Util.transform(this.current.activeSMask.startTransformInverse, groupCtx.mozCurrentTransform);\n\n              this.ctx.transform.apply(this.ctx, deltaTransform);\n            }\n\n            save() {\n              this.ctx.save();\n              const old = this.current;\n              this.stateStack.push(old);\n              this.current = old.clone();\n              this.current.resumeSMaskCtx = null;\n            }\n\n            restore() {\n              if (this.current.resumeSMaskCtx) {\n                this.resumeSMaskGroup();\n              }\n\n              if (this.current.activeSMask !== null && (this.stateStack.length === 0 || this.stateStack[this.stateStack.length - 1].activeSMask !== this.current.activeSMask)) {\n                this.endSMaskGroup();\n              }\n\n              if (this.stateStack.length !== 0) {\n                this.current = this.stateStack.pop();\n                this.ctx.restore();\n                this.pendingClip = null;\n                this._cachedGetSinglePixelWidth = null;\n              } else {\n                this.current.activeSMask = null;\n              }\n            }\n\n            transform(a, b, c, d, e, f) {\n              this.ctx.transform(a, b, c, d, e, f);\n              this._cachedGetSinglePixelWidth = null;\n            }\n\n            constructPath(ops, args) {\n              const ctx = this.ctx;\n              const current = this.current;\n              let x = current.x,\n                  y = current.y;\n\n              for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {\n                switch (ops[i] | 0) {\n                  case _util.OPS.rectangle:\n                    x = args[j++];\n                    y = args[j++];\n                    const width = args[j++];\n                    const height = args[j++];\n                    const xw = x + width;\n                    const yh = y + height;\n                    ctx.moveTo(x, y);\n\n                    if (width === 0 || height === 0) {\n                      ctx.lineTo(xw, yh);\n                    } else {\n                      ctx.lineTo(xw, y);\n                      ctx.lineTo(xw, yh);\n                      ctx.lineTo(x, yh);\n                    }\n\n                    ctx.closePath();\n                    break;\n\n                  case _util.OPS.moveTo:\n                    x = args[j++];\n                    y = args[j++];\n                    ctx.moveTo(x, y);\n                    break;\n\n                  case _util.OPS.lineTo:\n                    x = args[j++];\n                    y = args[j++];\n                    ctx.lineTo(x, y);\n                    break;\n\n                  case _util.OPS.curveTo:\n                    x = args[j + 4];\n                    y = args[j + 5];\n                    ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);\n                    j += 6;\n                    break;\n\n                  case _util.OPS.curveTo2:\n                    ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);\n                    x = args[j + 2];\n                    y = args[j + 3];\n                    j += 4;\n                    break;\n\n                  case _util.OPS.curveTo3:\n                    x = args[j + 2];\n                    y = args[j + 3];\n                    ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n                    j += 4;\n                    break;\n\n                  case _util.OPS.closePath:\n                    ctx.closePath();\n                    break;\n                }\n              }\n\n              current.setCurrentPoint(x, y);\n            }\n\n            closePath() {\n              this.ctx.closePath();\n            }\n\n            stroke(consumePath) {\n              consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n              const ctx = this.ctx;\n              const strokeColor = this.current.strokeColor;\n              ctx.globalAlpha = this.current.strokeAlpha;\n\n              if (this.contentVisible) {\n                if (typeof strokeColor === \"object\" && strokeColor?.getPattern) {\n                  const lineWidth = this.getSinglePixelWidth();\n                  ctx.save();\n                  ctx.strokeStyle = strokeColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse);\n                  ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n                  ctx.stroke();\n                  ctx.restore();\n                } else {\n                  const lineWidth = this.getSinglePixelWidth();\n\n                  if (lineWidth < 0 && -lineWidth >= this.current.lineWidth) {\n                    ctx.save();\n                    ctx.resetTransform();\n                    ctx.lineWidth = Math.round(this._combinedScaleFactor);\n                    ctx.stroke();\n                    ctx.restore();\n                  } else {\n                    ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n                    ctx.stroke();\n                  }\n                }\n              }\n\n              if (consumePath) {\n                this.consumePath();\n              }\n\n              ctx.globalAlpha = this.current.fillAlpha;\n            }\n\n            closeStroke() {\n              this.closePath();\n              this.stroke();\n            }\n\n            fill(consumePath) {\n              consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n              const ctx = this.ctx;\n              const fillColor = this.current.fillColor;\n              const isPatternFill = this.current.patternFill;\n              let needRestore = false;\n\n              if (isPatternFill) {\n                ctx.save();\n                ctx.fillStyle = fillColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse);\n                needRestore = true;\n              }\n\n              if (this.contentVisible) {\n                if (this.pendingEOFill) {\n                  ctx.fill(\"evenodd\");\n                  this.pendingEOFill = false;\n                } else {\n                  ctx.fill();\n                }\n              }\n\n              if (needRestore) {\n                ctx.restore();\n              }\n\n              if (consumePath) {\n                this.consumePath();\n              }\n            }\n\n            eoFill() {\n              this.pendingEOFill = true;\n              this.fill();\n            }\n\n            fillStroke() {\n              this.fill(false);\n              this.stroke(false);\n              this.consumePath();\n            }\n\n            eoFillStroke() {\n              this.pendingEOFill = true;\n              this.fillStroke();\n            }\n\n            closeFillStroke() {\n              this.closePath();\n              this.fillStroke();\n            }\n\n            closeEOFillStroke() {\n              this.pendingEOFill = true;\n              this.closePath();\n              this.fillStroke();\n            }\n\n            endPath() {\n              this.consumePath();\n            }\n\n            clip() {\n              this.pendingClip = NORMAL_CLIP;\n            }\n\n            eoClip() {\n              this.pendingClip = EO_CLIP;\n            }\n\n            beginText() {\n              this.current.textMatrix = _util.IDENTITY_MATRIX;\n              this.current.textMatrixScale = 1;\n              this.current.x = this.current.lineX = 0;\n              this.current.y = this.current.lineY = 0;\n            }\n\n            endText() {\n              const paths = this.pendingTextPaths;\n              const ctx = this.ctx;\n\n              if (paths === undefined) {\n                ctx.beginPath();\n                return;\n              }\n\n              ctx.save();\n              ctx.beginPath();\n\n              for (let i = 0; i < paths.length; i++) {\n                const path = paths[i];\n                ctx.setTransform.apply(ctx, path.transform);\n                ctx.translate(path.x, path.y);\n                path.addToPath(ctx, path.fontSize);\n              }\n\n              ctx.restore();\n              ctx.clip();\n              ctx.beginPath();\n              delete this.pendingTextPaths;\n            }\n\n            setCharSpacing(spacing) {\n              this.current.charSpacing = spacing;\n            }\n\n            setWordSpacing(spacing) {\n              this.current.wordSpacing = spacing;\n            }\n\n            setHScale(scale) {\n              this.current.textHScale = scale / 100;\n            }\n\n            setLeading(leading) {\n              this.current.leading = -leading;\n            }\n\n            setFont(fontRefName, size) {\n              const fontObj = this.commonObjs.get(fontRefName);\n              const current = this.current;\n\n              if (!fontObj) {\n                throw new Error(`Can't find font for ${fontRefName}`);\n              }\n\n              current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n\n              if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n                (0, _util.warn)(\"Invalid font matrix for font \" + fontRefName);\n              }\n\n              if (size < 0) {\n                size = -size;\n                current.fontDirection = -1;\n              } else {\n                current.fontDirection = 1;\n              }\n\n              this.current.font = fontObj;\n              this.current.fontSize = size;\n\n              if (fontObj.isType3Font) {\n                return;\n              }\n\n              const name = fontObj.loadedName || \"sans-serif\";\n              let bold = \"normal\";\n\n              if (fontObj.black) {\n                bold = \"900\";\n              } else if (fontObj.bold) {\n                bold = \"bold\";\n              }\n\n              const italic = fontObj.italic ? \"italic\" : \"normal\";\n              const typeface = `\"${name}\", ${fontObj.fallbackName}`;\n              let browserFontSize = size;\n\n              if (size < MIN_FONT_SIZE) {\n                browserFontSize = MIN_FONT_SIZE;\n              } else if (size > MAX_FONT_SIZE) {\n                browserFontSize = MAX_FONT_SIZE;\n              }\n\n              this.current.fontSizeScale = size / browserFontSize;\n              this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n            }\n\n            setTextRenderingMode(mode) {\n              this.current.textRenderingMode = mode;\n            }\n\n            setTextRise(rise) {\n              this.current.textRise = rise;\n            }\n\n            moveText(x, y) {\n              this.current.x = this.current.lineX += x;\n              this.current.y = this.current.lineY += y;\n            }\n\n            setLeadingMoveText(x, y) {\n              this.setLeading(-y);\n              this.moveText(x, y);\n            }\n\n            setTextMatrix(a, b, c, d, e, f) {\n              this.current.textMatrix = [a, b, c, d, e, f];\n              this.current.textMatrixScale = Math.hypot(a, b);\n              this.current.x = this.current.lineX = 0;\n              this.current.y = this.current.lineY = 0;\n            }\n\n            nextLine() {\n              this.moveText(0, this.current.leading);\n            }\n\n            paintChar(character, x, y, patternTransform, resetLineWidthToOne) {\n              const ctx = this.ctx;\n              const current = this.current;\n              const font = current.font;\n              const textRenderingMode = current.textRenderingMode;\n              const fontSize = current.fontSize / current.fontSizeScale;\n              const fillStrokeMode = textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n              const isAddToPathSet = !!(textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);\n              const patternFill = current.patternFill && !font.missingFile;\n              let addToPath;\n\n              if (font.disableFontFace || isAddToPathSet || patternFill) {\n                addToPath = font.getPathGenerator(this.commonObjs, character);\n              }\n\n              if (font.disableFontFace || patternFill) {\n                ctx.save();\n                ctx.translate(x, y);\n                ctx.beginPath();\n                addToPath(ctx, fontSize);\n\n                if (patternTransform) {\n                  ctx.setTransform.apply(ctx, patternTransform);\n                }\n\n                if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                  ctx.fill();\n                }\n\n                if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                  if (resetLineWidthToOne) {\n                    ctx.resetTransform();\n                    ctx.lineWidth = Math.round(this._combinedScaleFactor);\n                  }\n\n                  ctx.stroke();\n                }\n\n                ctx.restore();\n              } else {\n                if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                  ctx.fillText(character, x, y);\n                }\n\n                if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                  if (resetLineWidthToOne) {\n                    ctx.save();\n                    ctx.moveTo(x, y);\n                    ctx.resetTransform();\n                    ctx.lineWidth = Math.round(this._combinedScaleFactor);\n                    ctx.strokeText(character, 0, 0);\n                    ctx.restore();\n                  } else {\n                    ctx.strokeText(character, x, y);\n                  }\n                }\n              }\n\n              if (isAddToPathSet) {\n                const paths = this.pendingTextPaths || (this.pendingTextPaths = []);\n                paths.push({\n                  transform: ctx.mozCurrentTransform,\n                  x,\n                  y,\n                  fontSize,\n                  addToPath\n                });\n              }\n            }\n\n            get isFontSubpixelAAEnabled() {\n              const {\n                context: ctx\n              } = this.cachedCanvases.getCanvas(\"isFontSubpixelAAEnabled\", 10, 10);\n              ctx.scale(1.5, 1);\n              ctx.fillText(\"I\", 0, 10);\n              const data = ctx.getImageData(0, 0, 10, 10).data;\n              let enabled = false;\n\n              for (let i = 3; i < data.length; i += 4) {\n                if (data[i] > 0 && data[i] < 255) {\n                  enabled = true;\n                  break;\n                }\n              }\n\n              return (0, _util.shadow)(this, \"isFontSubpixelAAEnabled\", enabled);\n            }\n\n            showText(glyphs) {\n              const current = this.current;\n              const font = current.font;\n\n              if (font.isType3Font) {\n                return this.showType3Text(glyphs);\n              }\n\n              const fontSize = current.fontSize;\n\n              if (fontSize === 0) {\n                return undefined;\n              }\n\n              const ctx = this.ctx;\n              const fontSizeScale = current.fontSizeScale;\n              const charSpacing = current.charSpacing;\n              const wordSpacing = current.wordSpacing;\n              const fontDirection = current.fontDirection;\n              const textHScale = current.textHScale * fontDirection;\n              const glyphsLength = glyphs.length;\n              const vertical = font.vertical;\n              const spacingDir = vertical ? 1 : -1;\n              const defaultVMetrics = font.defaultVMetrics;\n              const widthAdvanceScale = fontSize * current.fontMatrix[0];\n              const simpleFillText = current.textRenderingMode === _util.TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;\n              ctx.save();\n              let patternTransform;\n\n              if (current.patternFill) {\n                ctx.save();\n                const pattern = current.fillColor.getPattern(ctx, this, ctx.mozCurrentTransformInverse);\n                patternTransform = ctx.mozCurrentTransform;\n                ctx.restore();\n                ctx.fillStyle = pattern;\n              }\n\n              ctx.transform.apply(ctx, current.textMatrix);\n              ctx.translate(current.x, current.y + current.textRise);\n\n              if (fontDirection > 0) {\n                ctx.scale(textHScale, -1);\n              } else {\n                ctx.scale(textHScale, 1);\n              }\n\n              let lineWidth = current.lineWidth;\n              let resetLineWidthToOne = false;\n              const scale = current.textMatrixScale;\n\n              if (scale === 0 || lineWidth === 0) {\n                const fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n\n                if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                  this._cachedGetSinglePixelWidth = null;\n                  lineWidth = this.getSinglePixelWidth();\n                  resetLineWidthToOne = lineWidth < 0;\n                }\n              } else {\n                lineWidth /= scale;\n              }\n\n              if (fontSizeScale !== 1.0) {\n                ctx.scale(fontSizeScale, fontSizeScale);\n                lineWidth /= fontSizeScale;\n              }\n\n              ctx.lineWidth = lineWidth;\n              let x = 0,\n                  i;\n\n              for (i = 0; i < glyphsLength; ++i) {\n                const glyph = glyphs[i];\n\n                if ((0, _util.isNum)(glyph)) {\n                  x += spacingDir * glyph * fontSize / 1000;\n                  continue;\n                }\n\n                let restoreNeeded = false;\n                const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n                const character = glyph.fontChar;\n                const accent = glyph.accent;\n                let scaledX, scaledY;\n                let width = glyph.width;\n\n                if (vertical) {\n                  const vmetric = glyph.vmetric || defaultVMetrics;\n                  const vx = -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n                  const vy = vmetric[2] * widthAdvanceScale;\n                  width = vmetric ? -vmetric[0] : width;\n                  scaledX = vx / fontSizeScale;\n                  scaledY = (x + vy) / fontSizeScale;\n                } else {\n                  scaledX = x / fontSizeScale;\n                  scaledY = 0;\n                }\n\n                if (font.remeasure && width > 0) {\n                  const measuredWidth = ctx.measureText(character).width * 1000 / fontSize * fontSizeScale;\n\n                  if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n                    const characterScaleX = width / measuredWidth;\n                    restoreNeeded = true;\n                    ctx.save();\n                    ctx.scale(characterScaleX, 1);\n                    scaledX /= characterScaleX;\n                  } else if (width !== measuredWidth) {\n                    scaledX += (width - measuredWidth) / 2000 * fontSize / fontSizeScale;\n                  }\n                }\n\n                if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n                  if (simpleFillText && !accent) {\n                    ctx.fillText(character, scaledX, scaledY);\n                  } else {\n                    this.paintChar(character, scaledX, scaledY, patternTransform, resetLineWidthToOne);\n\n                    if (accent) {\n                      const scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;\n                      const scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;\n                      this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform, resetLineWidthToOne);\n                    }\n                  }\n                }\n\n                let charWidth;\n\n                if (vertical) {\n                  charWidth = width * widthAdvanceScale - spacing * fontDirection;\n                } else {\n                  charWidth = width * widthAdvanceScale + spacing * fontDirection;\n                }\n\n                x += charWidth;\n\n                if (restoreNeeded) {\n                  ctx.restore();\n                }\n              }\n\n              if (vertical) {\n                current.y -= x;\n              } else {\n                current.x += x * textHScale;\n              }\n\n              ctx.restore();\n              return undefined;\n            }\n\n            showType3Text(glyphs) {\n              const ctx = this.ctx;\n              const current = this.current;\n              const font = current.font;\n              const fontSize = current.fontSize;\n              const fontDirection = current.fontDirection;\n              const spacingDir = font.vertical ? 1 : -1;\n              const charSpacing = current.charSpacing;\n              const wordSpacing = current.wordSpacing;\n              const textHScale = current.textHScale * fontDirection;\n              const fontMatrix = current.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n              const glyphsLength = glyphs.length;\n              const isTextInvisible = current.textRenderingMode === _util.TextRenderingMode.INVISIBLE;\n              let i, glyph, width, spacingLength;\n\n              if (isTextInvisible || fontSize === 0) {\n                return;\n              }\n\n              this._cachedGetSinglePixelWidth = null;\n              ctx.save();\n              ctx.transform.apply(ctx, current.textMatrix);\n              ctx.translate(current.x, current.y);\n              ctx.scale(textHScale, fontDirection);\n\n              for (i = 0; i < glyphsLength; ++i) {\n                glyph = glyphs[i];\n\n                if ((0, _util.isNum)(glyph)) {\n                  spacingLength = spacingDir * glyph * fontSize / 1000;\n                  this.ctx.translate(spacingLength, 0);\n                  current.x += spacingLength * textHScale;\n                  continue;\n                }\n\n                const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n                const operatorList = font.charProcOperatorList[glyph.operatorListId];\n\n                if (!operatorList) {\n                  (0, _util.warn)(`Type3 character \"${glyph.operatorListId}\" is not available.`);\n                  continue;\n                }\n\n                if (this.contentVisible) {\n                  this.processingType3 = glyph;\n                  this.save();\n                  ctx.scale(fontSize, fontSize);\n                  ctx.transform.apply(ctx, fontMatrix);\n                  this.executeOperatorList(operatorList);\n                  this.restore();\n                }\n\n                const transformed = _util.Util.applyTransform([glyph.width, 0], fontMatrix);\n\n                width = transformed[0] * fontSize + spacing;\n                ctx.translate(width, 0);\n                current.x += width * textHScale;\n              }\n\n              ctx.restore();\n              this.processingType3 = null;\n            }\n\n            setCharWidth(xWidth, yWidth) {}\n\n            setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n              this.ctx.rect(llx, lly, urx - llx, ury - lly);\n              this.clip();\n              this.endPath();\n            }\n\n            getColorN_Pattern(IR) {\n              let pattern;\n\n              if (IR[0] === \"TilingPattern\") {\n                const color = IR[1];\n                const baseTransform = this.baseTransform || this.ctx.mozCurrentTransform.slice();\n                const canvasGraphicsFactory = {\n                  createCanvasGraphics: ctx => {\n                    return new CanvasGraphics(ctx, this.commonObjs, this.objs, this.canvasFactory);\n                  }\n                };\n                pattern = new _pattern_helper.TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);\n              } else {\n                pattern = this._getPattern(IR[1]);\n              }\n\n              return pattern;\n            }\n\n            setStrokeColorN() {\n              this.current.strokeColor = this.getColorN_Pattern(arguments);\n            }\n\n            setFillColorN() {\n              this.current.fillColor = this.getColorN_Pattern(arguments);\n              this.current.patternFill = true;\n            }\n\n            setStrokeRGBColor(r, g, b) {\n              const color = _util.Util.makeHexColor(r, g, b);\n\n              this.ctx.strokeStyle = color;\n              this.current.strokeColor = color;\n            }\n\n            setFillRGBColor(r, g, b) {\n              const color = _util.Util.makeHexColor(r, g, b);\n\n              this.ctx.fillStyle = color;\n              this.current.fillColor = color;\n              this.current.patternFill = false;\n            }\n\n            _getPattern(objId) {\n              if (this.cachedPatterns.has(objId)) {\n                return this.cachedPatterns.get(objId);\n              }\n\n              const pattern = (0, _pattern_helper.getShadingPattern)(this.objs.get(objId));\n              this.cachedPatterns.set(objId, pattern);\n              return pattern;\n            }\n\n            shadingFill(objId) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              const ctx = this.ctx;\n              this.save();\n\n              const pattern = this._getPattern(objId);\n\n              ctx.fillStyle = pattern.getPattern(ctx, this, ctx.mozCurrentTransformInverse, true);\n              const inv = ctx.mozCurrentTransformInverse;\n\n              if (inv) {\n                const canvas = ctx.canvas;\n                const width = canvas.width;\n                const height = canvas.height;\n\n                const bl = _util.Util.applyTransform([0, 0], inv);\n\n                const br = _util.Util.applyTransform([0, height], inv);\n\n                const ul = _util.Util.applyTransform([width, 0], inv);\n\n                const ur = _util.Util.applyTransform([width, height], inv);\n\n                const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n                const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n                const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n                const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n                this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n              } else {\n                this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n              }\n\n              this.restore();\n            }\n\n            beginInlineImage() {\n              (0, _util.unreachable)(\"Should not call beginInlineImage\");\n            }\n\n            beginImageData() {\n              (0, _util.unreachable)(\"Should not call beginImageData\");\n            }\n\n            paintFormXObjectBegin(matrix, bbox) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              this.save();\n              this.baseTransformStack.push(this.baseTransform);\n\n              if (Array.isArray(matrix) && matrix.length === 6) {\n                this.transform.apply(this, matrix);\n              }\n\n              this.baseTransform = this.ctx.mozCurrentTransform;\n\n              if (bbox) {\n                const width = bbox[2] - bbox[0];\n                const height = bbox[3] - bbox[1];\n                this.ctx.rect(bbox[0], bbox[1], width, height);\n                this.clip();\n                this.endPath();\n              }\n            }\n\n            paintFormXObjectEnd() {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              this.restore();\n              this.baseTransform = this.baseTransformStack.pop();\n            }\n\n            beginGroup(group) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              this.save();\n              const currentCtx = this.ctx;\n\n              if (!group.isolated) {\n                (0, _util.info)(\"TODO: Support non-isolated groups.\");\n              }\n\n              if (group.knockout) {\n                (0, _util.warn)(\"Knockout groups not supported.\");\n              }\n\n              const currentTransform = currentCtx.mozCurrentTransform;\n\n              if (group.matrix) {\n                currentCtx.transform.apply(currentCtx, group.matrix);\n              }\n\n              if (!group.bbox) {\n                throw new Error(\"Bounding box is required.\");\n              }\n\n              let bounds = _util.Util.getAxialAlignedBoundingBox(group.bbox, currentCtx.mozCurrentTransform);\n\n              const canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];\n              bounds = _util.Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n              const offsetX = Math.floor(bounds[0]);\n              const offsetY = Math.floor(bounds[1]);\n              let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n              let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n              let scaleX = 1,\n                  scaleY = 1;\n\n              if (drawnWidth > MAX_GROUP_SIZE) {\n                scaleX = drawnWidth / MAX_GROUP_SIZE;\n                drawnWidth = MAX_GROUP_SIZE;\n              }\n\n              if (drawnHeight > MAX_GROUP_SIZE) {\n                scaleY = drawnHeight / MAX_GROUP_SIZE;\n                drawnHeight = MAX_GROUP_SIZE;\n              }\n\n              let cacheId = \"groupAt\" + this.groupLevel;\n\n              if (group.smask) {\n                cacheId += \"_smask_\" + this.smaskCounter++ % 2;\n              }\n\n              const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight, true);\n              const groupCtx = scratchCanvas.context;\n              groupCtx.scale(1 / scaleX, 1 / scaleY);\n              groupCtx.translate(-offsetX, -offsetY);\n              groupCtx.transform.apply(groupCtx, currentTransform);\n\n              if (group.smask) {\n                this.smaskStack.push({\n                  canvas: scratchCanvas.canvas,\n                  context: groupCtx,\n                  offsetX,\n                  offsetY,\n                  scaleX,\n                  scaleY,\n                  subtype: group.smask.subtype,\n                  backdrop: group.smask.backdrop,\n                  transferMap: group.smask.transferMap || null,\n                  startTransformInverse: null\n                });\n              } else {\n                currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n                currentCtx.translate(offsetX, offsetY);\n                currentCtx.scale(scaleX, scaleY);\n              }\n\n              copyCtxState(currentCtx, groupCtx);\n              this.ctx = groupCtx;\n              this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n              this.groupStack.push(currentCtx);\n              this.groupLevel++;\n              this.current.activeSMask = null;\n            }\n\n            endGroup(group) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              this.groupLevel--;\n              const groupCtx = this.ctx;\n              this.ctx = this.groupStack.pop();\n\n              if (this.ctx.imageSmoothingEnabled !== undefined) {\n                this.ctx.imageSmoothingEnabled = false;\n              } else {\n                this.ctx.mozImageSmoothingEnabled = false;\n              }\n\n              if (group.smask) {\n                this.tempSMask = this.smaskStack.pop();\n              } else {\n                this.ctx.drawImage(groupCtx.canvas, 0, 0);\n              }\n\n              this.restore();\n            }\n\n            beginAnnotations() {\n              this.save();\n\n              if (this.baseTransform) {\n                this.ctx.setTransform.apply(this.ctx, this.baseTransform);\n              }\n            }\n\n            endAnnotations() {\n              this.restore();\n            }\n\n            beginAnnotation(id, rect, transform, matrix) {\n              this.save();\n              resetCtxToDefault(this.ctx);\n              this.current = new CanvasExtraState();\n\n              if (Array.isArray(rect) && rect.length === 4) {\n                const width = rect[2] - rect[0];\n                const height = rect[3] - rect[1];\n                this.ctx.rect(rect[0], rect[1], width, height);\n                this.clip();\n                this.endPath();\n              }\n\n              this.transform.apply(this, transform);\n              this.transform.apply(this, matrix);\n            }\n\n            endAnnotation() {\n              this.restore();\n            }\n\n            paintImageMaskXObject(img) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              const ctx = this.ctx;\n              const width = img.width,\n                    height = img.height;\n              const glyph = this.processingType3;\n\n              if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === undefined) {\n                if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {\n                  glyph.compiled = compileType3Glyph({\n                    data: img.data,\n                    width,\n                    height\n                  });\n                } else {\n                  glyph.compiled = null;\n                }\n              }\n\n              if (glyph?.compiled) {\n                glyph.compiled(ctx);\n                return;\n              }\n\n              const mask = this._createMaskCanvas(img);\n\n              const maskCanvas = mask.canvas;\n              ctx.save();\n              ctx.setTransform(1, 0, 0, 1, 0, 0);\n              ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);\n              ctx.restore();\n            }\n\n            paintImageMaskXObjectRepeat(imgData, scaleX) {\n              let skewX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n              let skewY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n              let scaleY = arguments.length > 4 ? arguments[4] : undefined;\n              let positions = arguments.length > 5 ? arguments[5] : undefined;\n\n              if (!this.contentVisible) {\n                return;\n              }\n\n              const ctx = this.ctx;\n              ctx.save();\n              const currentTransform = ctx.mozCurrentTransform;\n              ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);\n\n              const mask = this._createMaskCanvas(imgData);\n\n              ctx.setTransform(1, 0, 0, 1, 0, 0);\n\n              for (let i = 0, ii = positions.length; i < ii; i += 2) {\n                const trans = _util.Util.transform(currentTransform, [scaleX, skewX, skewY, scaleY, positions[i], positions[i + 1]]);\n\n                const [x, y] = _util.Util.applyTransform([0, 0], trans);\n\n                ctx.drawImage(mask.canvas, x, y);\n              }\n\n              ctx.restore();\n            }\n\n            paintImageMaskXObjectGroup(images) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              const ctx = this.ctx;\n              const fillColor = this.current.fillColor;\n              const isPatternFill = this.current.patternFill;\n\n              for (let i = 0, ii = images.length; i < ii; i++) {\n                const image = images[i];\n                const width = image.width,\n                      height = image.height;\n                const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n                const maskCtx = maskCanvas.context;\n                maskCtx.save();\n                putBinaryImageMask(maskCtx, image);\n                maskCtx.globalCompositeOperation = \"source-in\";\n                maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this, ctx.mozCurrentTransformInverse, false) : fillColor;\n                maskCtx.fillRect(0, 0, width, height);\n                maskCtx.restore();\n                ctx.save();\n                ctx.transform.apply(ctx, image.transform);\n                ctx.scale(1, -1);\n                ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n                ctx.restore();\n              }\n            }\n\n            paintImageXObject(objId) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n              if (!imgData) {\n                (0, _util.warn)(\"Dependent image isn't ready yet\");\n                return;\n              }\n\n              this.paintInlineImageXObject(imgData);\n            }\n\n            paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n              if (!imgData) {\n                (0, _util.warn)(\"Dependent image isn't ready yet\");\n                return;\n              }\n\n              const width = imgData.width;\n              const height = imgData.height;\n              const map = [];\n\n              for (let i = 0, ii = positions.length; i < ii; i += 2) {\n                map.push({\n                  transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n                  x: 0,\n                  y: 0,\n                  w: width,\n                  h: height\n                });\n              }\n\n              this.paintInlineImageXObjectGroup(imgData, map);\n            }\n\n            paintInlineImageXObject(imgData) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              const width = imgData.width;\n              const height = imgData.height;\n              const ctx = this.ctx;\n              this.save();\n              ctx.scale(1 / width, -1 / height);\n              let imgToPaint;\n\n              if (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement || !imgData.data) {\n                imgToPaint = imgData;\n              } else {\n                const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", width, height);\n                const tmpCtx = tmpCanvas.context;\n                putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n                imgToPaint = tmpCanvas.canvas;\n              }\n\n              const scaled = this._scaleImage(imgToPaint, ctx.mozCurrentTransformInverse);\n\n              ctx.drawImage(scaled.img, 0, 0, scaled.paintWidth, scaled.paintHeight, 0, -height, width, height);\n\n              if (this.imageLayer) {\n                const position = this.getCanvasPosition(0, -height);\n                this.imageLayer.appendImage({\n                  imgData,\n                  left: position[0],\n                  top: position[1],\n                  width: width / ctx.mozCurrentTransformInverse[0],\n                  height: height / ctx.mozCurrentTransformInverse[3]\n                });\n              }\n\n              this.restore();\n            }\n\n            paintInlineImageXObjectGroup(imgData, map) {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              const ctx = this.ctx;\n              const w = imgData.width;\n              const h = imgData.height;\n              const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n              const tmpCtx = tmpCanvas.context;\n              putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n\n              for (let i = 0, ii = map.length; i < ii; i++) {\n                const entry = map[i];\n                ctx.save();\n                ctx.transform.apply(ctx, entry.transform);\n                ctx.scale(1, -1);\n                ctx.drawImage(tmpCanvas.canvas, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);\n\n                if (this.imageLayer) {\n                  const position = this.getCanvasPosition(entry.x, entry.y);\n                  this.imageLayer.appendImage({\n                    imgData,\n                    left: position[0],\n                    top: position[1],\n                    width: w,\n                    height: h\n                  });\n                }\n\n                ctx.restore();\n              }\n            }\n\n            paintSolidColorImageMask() {\n              if (!this.contentVisible) {\n                return;\n              }\n\n              this.ctx.fillRect(0, 0, 1, 1);\n            }\n\n            markPoint(tag) {}\n\n            markPointProps(tag, properties) {}\n\n            beginMarkedContent(tag) {\n              this.markedContentStack.push({\n                visible: true\n              });\n            }\n\n            beginMarkedContentProps(tag, properties) {\n              if (tag === \"OC\") {\n                this.markedContentStack.push({\n                  visible: this.optionalContentConfig.isVisible(properties)\n                });\n              } else {\n                this.markedContentStack.push({\n                  visible: true\n                });\n              }\n\n              this.contentVisible = this.isContentVisible();\n            }\n\n            endMarkedContent() {\n              this.markedContentStack.pop();\n              this.contentVisible = this.isContentVisible();\n            }\n\n            beginCompat() {}\n\n            endCompat() {}\n\n            consumePath() {\n              const ctx = this.ctx;\n\n              if (this.pendingClip) {\n                if (this.pendingClip === EO_CLIP) {\n                  ctx.clip(\"evenodd\");\n                } else {\n                  ctx.clip();\n                }\n\n                this.pendingClip = null;\n              }\n\n              ctx.beginPath();\n            }\n\n            getSinglePixelWidth() {\n              if (this._cachedGetSinglePixelWidth === null) {\n                const m = this.ctx.mozCurrentTransform;\n                const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\n                const sqNorm1 = m[0] ** 2 + m[2] ** 2;\n                const sqNorm2 = m[1] ** 2 + m[3] ** 2;\n                const pixelHeight = Math.sqrt(Math.max(sqNorm1, sqNorm2)) / absDet;\n\n                if (sqNorm1 !== sqNorm2 && this._combinedScaleFactor * pixelHeight > 1) {\n                  this._cachedGetSinglePixelWidth = -(this._combinedScaleFactor * pixelHeight);\n                } else if (absDet > Number.EPSILON) {\n                  this._cachedGetSinglePixelWidth = pixelHeight;\n                } else {\n                  this._cachedGetSinglePixelWidth = 1;\n                }\n              }\n\n              return this._cachedGetSinglePixelWidth;\n            }\n\n            getCanvasPosition(x, y) {\n              const transform = this.ctx.mozCurrentTransform;\n              return [transform[0] * x + transform[2] * y + transform[4], transform[1] * x + transform[3] * y + transform[5]];\n            }\n\n            isContentVisible() {\n              for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\n                if (!this.markedContentStack[i].visible) {\n                  return false;\n                }\n              }\n\n              return true;\n            }\n\n          }\n\n          for (const op in _util.OPS) {\n            CanvasGraphics.prototype[_util.OPS[op]] = CanvasGraphics.prototype[op];\n          }\n\n          return CanvasGraphics;\n        }();\n\n        exports.CanvasGraphics = CanvasGraphics;\n        /***/\n      },\n      /* 11 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.getShadingPattern = getShadingPattern;\n        exports.TilingPattern = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        function applyBoundingBox(ctx, bbox) {\n          if (!bbox || typeof Path2D === \"undefined\") {\n            return;\n          }\n\n          const width = bbox[2] - bbox[0];\n          const height = bbox[3] - bbox[1];\n          const region = new Path2D();\n          region.rect(bbox[0], bbox[1], width, height);\n          ctx.clip(region);\n        }\n\n        class BaseShadingPattern {\n          constructor() {\n            if (this.constructor === BaseShadingPattern) {\n              (0, _util.unreachable)(\"Cannot initialize BaseShadingPattern.\");\n            }\n          }\n\n          getPattern() {\n            (0, _util.unreachable)(\"Abstract method `getPattern` called.\");\n          }\n\n        }\n\n        class RadialAxialShadingPattern extends BaseShadingPattern {\n          constructor(IR) {\n            super();\n            this._type = IR[1];\n            this._bbox = IR[2];\n            this._colorStops = IR[3];\n            this._p0 = IR[4];\n            this._p1 = IR[5];\n            this._r0 = IR[6];\n            this._r1 = IR[7];\n            this._matrix = IR[8];\n            this._patternCache = null;\n          }\n\n          _createGradient(ctx) {\n            let grad;\n\n            if (this._type === \"axial\") {\n              grad = ctx.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]);\n            } else if (this._type === \"radial\") {\n              grad = ctx.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1);\n            }\n\n            for (const colorStop of this._colorStops) {\n              grad.addColorStop(colorStop[0], colorStop[1]);\n            }\n\n            return grad;\n          }\n\n          getPattern(ctx, owner, inverse) {\n            let shadingFill = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n            let pattern;\n\n            if (this._patternCache) {\n              pattern = this._patternCache;\n            } else {\n              if (!shadingFill) {\n                const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", owner.ctx.canvas.width, owner.ctx.canvas.height, true);\n                const tmpCtx = tmpCanvas.context;\n                tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n                tmpCtx.beginPath();\n                tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n                tmpCtx.setTransform.apply(tmpCtx, owner.baseTransform);\n\n                if (this._matrix) {\n                  tmpCtx.transform.apply(tmpCtx, this._matrix);\n                }\n\n                applyBoundingBox(tmpCtx, this._bbox);\n                tmpCtx.fillStyle = this._createGradient(tmpCtx);\n                tmpCtx.fill();\n                pattern = ctx.createPattern(tmpCanvas.canvas, \"repeat\");\n              } else {\n                applyBoundingBox(ctx, this._bbox);\n                pattern = this._createGradient(ctx);\n              }\n\n              this._patternCache = pattern;\n            }\n\n            if (!shadingFill) {\n              const domMatrix = new DOMMatrix(inverse);\n\n              try {\n                pattern.setTransform(domMatrix);\n              } catch (ex) {\n                (0, _util.warn)(`RadialAxialShadingPattern.getPattern: \"${ex?.message}\".`);\n              }\n            }\n\n            return pattern;\n          }\n\n        }\n\n        function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n          const coords = context.coords,\n                colors = context.colors;\n          const bytes = data.data,\n                rowSize = data.width * 4;\n          let tmp;\n\n          if (coords[p1 + 1] > coords[p2 + 1]) {\n            tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n            tmp = c1;\n            c1 = c2;\n            c2 = tmp;\n          }\n\n          if (coords[p2 + 1] > coords[p3 + 1]) {\n            tmp = p2;\n            p2 = p3;\n            p3 = tmp;\n            tmp = c2;\n            c2 = c3;\n            c3 = tmp;\n          }\n\n          if (coords[p1 + 1] > coords[p2 + 1]) {\n            tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n            tmp = c1;\n            c1 = c2;\n            c2 = tmp;\n          }\n\n          const x1 = (coords[p1] + context.offsetX) * context.scaleX;\n          const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n          const x2 = (coords[p2] + context.offsetX) * context.scaleX;\n          const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n          const x3 = (coords[p3] + context.offsetX) * context.scaleX;\n          const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n\n          if (y1 >= y3) {\n            return;\n          }\n\n          const c1r = colors[c1],\n                c1g = colors[c1 + 1],\n                c1b = colors[c1 + 2];\n          const c2r = colors[c2],\n                c2g = colors[c2 + 1],\n                c2b = colors[c2 + 2];\n          const c3r = colors[c3],\n                c3g = colors[c3 + 1],\n                c3b = colors[c3 + 2];\n          const minY = Math.round(y1),\n                maxY = Math.round(y3);\n          let xa, car, cag, cab;\n          let xb, cbr, cbg, cbb;\n\n          for (let y = minY; y <= maxY; y++) {\n            if (y < y2) {\n              let k;\n\n              if (y < y1) {\n                k = 0;\n              } else {\n                k = (y1 - y) / (y1 - y2);\n              }\n\n              xa = x1 - (x1 - x2) * k;\n              car = c1r - (c1r - c2r) * k;\n              cag = c1g - (c1g - c2g) * k;\n              cab = c1b - (c1b - c2b) * k;\n            } else {\n              let k;\n\n              if (y > y3) {\n                k = 1;\n              } else if (y2 === y3) {\n                k = 0;\n              } else {\n                k = (y2 - y) / (y2 - y3);\n              }\n\n              xa = x2 - (x2 - x3) * k;\n              car = c2r - (c2r - c3r) * k;\n              cag = c2g - (c2g - c3g) * k;\n              cab = c2b - (c2b - c3b) * k;\n            }\n\n            let k;\n\n            if (y < y1) {\n              k = 0;\n            } else if (y > y3) {\n              k = 1;\n            } else {\n              k = (y1 - y) / (y1 - y3);\n            }\n\n            xb = x1 - (x1 - x3) * k;\n            cbr = c1r - (c1r - c3r) * k;\n            cbg = c1g - (c1g - c3g) * k;\n            cbb = c1b - (c1b - c3b) * k;\n            const x1_ = Math.round(Math.min(xa, xb));\n            const x2_ = Math.round(Math.max(xa, xb));\n            let j = rowSize * y + x1_ * 4;\n\n            for (let x = x1_; x <= x2_; x++) {\n              k = (xa - x) / (xa - xb);\n\n              if (k < 0) {\n                k = 0;\n              } else if (k > 1) {\n                k = 1;\n              }\n\n              bytes[j++] = car - (car - cbr) * k | 0;\n              bytes[j++] = cag - (cag - cbg) * k | 0;\n              bytes[j++] = cab - (cab - cbb) * k | 0;\n              bytes[j++] = 255;\n            }\n          }\n        }\n\n        function drawFigure(data, figure, context) {\n          const ps = figure.coords;\n          const cs = figure.colors;\n          let i, ii;\n\n          switch (figure.type) {\n            case \"lattice\":\n              const verticesPerRow = figure.verticesPerRow;\n              const rows = Math.floor(ps.length / verticesPerRow) - 1;\n              const cols = verticesPerRow - 1;\n\n              for (i = 0; i < rows; i++) {\n                let q = i * verticesPerRow;\n\n                for (let j = 0; j < cols; j++, q++) {\n                  drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);\n                  drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);\n                }\n              }\n\n              break;\n\n            case \"triangles\":\n              for (i = 0, ii = ps.length; i < ii; i += 3) {\n                drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);\n              }\n\n              break;\n\n            default:\n              throw new Error(\"illegal figure\");\n          }\n        }\n\n        class MeshShadingPattern extends BaseShadingPattern {\n          constructor(IR) {\n            super();\n            this._coords = IR[2];\n            this._colors = IR[3];\n            this._figures = IR[4];\n            this._bounds = IR[5];\n            this._matrix = IR[6];\n            this._bbox = IR[7];\n            this._background = IR[8];\n          }\n\n          _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {\n            const EXPECTED_SCALE = 1.1;\n            const MAX_PATTERN_SIZE = 3000;\n            const BORDER_SIZE = 2;\n            const offsetX = Math.floor(this._bounds[0]);\n            const offsetY = Math.floor(this._bounds[1]);\n            const boundsWidth = Math.ceil(this._bounds[2]) - offsetX;\n            const boundsHeight = Math.ceil(this._bounds[3]) - offsetY;\n            const width = Math.min(Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n            const height = Math.min(Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n            const scaleX = boundsWidth / width;\n            const scaleY = boundsHeight / height;\n            const context = {\n              coords: this._coords,\n              colors: this._colors,\n              offsetX: -offsetX,\n              offsetY: -offsetY,\n              scaleX: 1 / scaleX,\n              scaleY: 1 / scaleY\n            };\n            const paddedWidth = width + BORDER_SIZE * 2;\n            const paddedHeight = height + BORDER_SIZE * 2;\n            const tmpCanvas = cachedCanvases.getCanvas(\"mesh\", paddedWidth, paddedHeight, false);\n            const tmpCtx = tmpCanvas.context;\n            const data = tmpCtx.createImageData(width, height);\n\n            if (backgroundColor) {\n              const bytes = data.data;\n\n              for (let i = 0, ii = bytes.length; i < ii; i += 4) {\n                bytes[i] = backgroundColor[0];\n                bytes[i + 1] = backgroundColor[1];\n                bytes[i + 2] = backgroundColor[2];\n                bytes[i + 3] = 255;\n              }\n            }\n\n            for (const figure of this._figures) {\n              drawFigure(data, figure, context);\n            }\n\n            tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n            const canvas = tmpCanvas.canvas;\n            return {\n              canvas,\n              offsetX: offsetX - BORDER_SIZE * scaleX,\n              offsetY: offsetY - BORDER_SIZE * scaleY,\n              scaleX,\n              scaleY\n            };\n          }\n\n          getPattern(ctx, owner, inverse) {\n            let shadingFill = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n            applyBoundingBox(ctx, this._bbox);\n            let scale;\n\n            if (shadingFill) {\n              scale = _util.Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);\n            } else {\n              scale = _util.Util.singularValueDecompose2dScale(owner.baseTransform);\n\n              if (this._matrix) {\n                const matrixScale = _util.Util.singularValueDecompose2dScale(this._matrix);\n\n                scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n              }\n            }\n\n            const temporaryPatternCanvas = this._createMeshCanvas(scale, shadingFill ? null : this._background, owner.cachedCanvases);\n\n            if (!shadingFill) {\n              ctx.setTransform.apply(ctx, owner.baseTransform);\n\n              if (this._matrix) {\n                ctx.transform.apply(ctx, this._matrix);\n              }\n            }\n\n            ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n            ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n            return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n          }\n\n        }\n\n        class DummyShadingPattern extends BaseShadingPattern {\n          getPattern() {\n            return \"hotpink\";\n          }\n\n        }\n\n        function getShadingPattern(IR) {\n          switch (IR[0]) {\n            case \"RadialAxial\":\n              return new RadialAxialShadingPattern(IR);\n\n            case \"Mesh\":\n              return new MeshShadingPattern(IR);\n\n            case \"Dummy\":\n              return new DummyShadingPattern();\n          }\n\n          throw new Error(`Unknown IR type: ${IR[0]}`);\n        }\n\n        const PaintType = {\n          COLORED: 1,\n          UNCOLORED: 2\n        };\n\n        class TilingPattern {\n          static get MAX_PATTERN_SIZE() {\n            return (0, _util.shadow)(this, \"MAX_PATTERN_SIZE\", 3000);\n          }\n\n          constructor(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n            this.operatorList = IR[2];\n            this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];\n            this.bbox = IR[4];\n            this.xstep = IR[5];\n            this.ystep = IR[6];\n            this.paintType = IR[7];\n            this.tilingType = IR[8];\n            this.color = color;\n            this.ctx = ctx;\n            this.canvasGraphicsFactory = canvasGraphicsFactory;\n            this.baseTransform = baseTransform;\n          }\n\n          createPatternCanvas(owner) {\n            const operatorList = this.operatorList;\n            const bbox = this.bbox;\n            const xstep = this.xstep;\n            const ystep = this.ystep;\n            const paintType = this.paintType;\n            const tilingType = this.tilingType;\n            const color = this.color;\n            const canvasGraphicsFactory = this.canvasGraphicsFactory;\n            (0, _util.info)(\"TilingType: \" + tilingType);\n            const x0 = bbox[0],\n                  y0 = bbox[1],\n                  x1 = bbox[2],\n                  y1 = bbox[3];\n\n            const matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);\n\n            const curMatrixScale = _util.Util.singularValueDecompose2dScale(this.baseTransform);\n\n            const combinedScale = [matrixScale[0] * curMatrixScale[0], matrixScale[1] * curMatrixScale[1]];\n            const dimx = this.getSizeAndScale(xstep, this.ctx.canvas.width, combinedScale[0]);\n            const dimy = this.getSizeAndScale(ystep, this.ctx.canvas.height, combinedScale[1]);\n            const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", dimx.size, dimy.size, true);\n            const tmpCtx = tmpCanvas.context;\n            const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n            graphics.groupLevel = owner.groupLevel;\n            this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n            let adjustedX0 = x0;\n            let adjustedY0 = y0;\n            let adjustedX1 = x1;\n            let adjustedY1 = y1;\n\n            if (x0 < 0) {\n              adjustedX0 = 0;\n              adjustedX1 += Math.abs(x0);\n            }\n\n            if (y0 < 0) {\n              adjustedY0 = 0;\n              adjustedY1 += Math.abs(y0);\n            }\n\n            tmpCtx.translate(-(dimx.scale * adjustedX0), -(dimy.scale * adjustedY0));\n            graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n            this.clipBbox(graphics, adjustedX0, adjustedY0, adjustedX1, adjustedY1);\n            graphics.baseTransform = graphics.ctx.mozCurrentTransform.slice();\n            graphics.executeOperatorList(operatorList);\n            graphics.endDrawing();\n            return {\n              canvas: tmpCanvas.canvas,\n              scaleX: dimx.scale,\n              scaleY: dimy.scale,\n              offsetX: adjustedX0,\n              offsetY: adjustedY0\n            };\n          }\n\n          getSizeAndScale(step, realOutputSize, scale) {\n            step = Math.abs(step);\n            const maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);\n            let size = Math.ceil(step * scale);\n\n            if (size >= maxSize) {\n              size = maxSize;\n            } else {\n              scale = size / step;\n            }\n\n            return {\n              scale,\n              size\n            };\n          }\n\n          clipBbox(graphics, x0, y0, x1, y1) {\n            const bboxWidth = x1 - x0;\n            const bboxHeight = y1 - y0;\n            graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n            graphics.clip();\n            graphics.endPath();\n          }\n\n          setFillAndStrokeStyleToContext(graphics, paintType, color) {\n            const context = graphics.ctx,\n                  current = graphics.current;\n\n            switch (paintType) {\n              case PaintType.COLORED:\n                const ctx = this.ctx;\n                context.fillStyle = ctx.fillStyle;\n                context.strokeStyle = ctx.strokeStyle;\n                current.fillColor = ctx.fillStyle;\n                current.strokeColor = ctx.strokeStyle;\n                break;\n\n              case PaintType.UNCOLORED:\n                const cssColor = _util.Util.makeHexColor(color[0], color[1], color[2]);\n\n                context.fillStyle = cssColor;\n                context.strokeStyle = cssColor;\n                current.fillColor = cssColor;\n                current.strokeColor = cssColor;\n                break;\n\n              default:\n                throw new _util.FormatError(`Unsupported paint type: ${paintType}`);\n            }\n          }\n\n          getPattern(ctx, owner, inverse) {\n            let shadingFill = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n            let matrix = inverse;\n\n            if (!shadingFill) {\n              matrix = _util.Util.transform(matrix, owner.baseTransform);\n\n              if (this.matrix) {\n                matrix = _util.Util.transform(matrix, this.matrix);\n              }\n            }\n\n            const temporaryPatternCanvas = this.createPatternCanvas(owner);\n            let domMatrix = new DOMMatrix(matrix);\n            domMatrix = domMatrix.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n            domMatrix = domMatrix.scale(1 / temporaryPatternCanvas.scaleX, 1 / temporaryPatternCanvas.scaleY);\n            const pattern = ctx.createPattern(temporaryPatternCanvas.canvas, \"repeat\");\n\n            try {\n              pattern.setTransform(domMatrix);\n            } catch (ex) {\n              (0, _util.warn)(`TilingPattern.getPattern: \"${ex?.message}\".`);\n            }\n\n            return pattern;\n          }\n\n        }\n\n        exports.TilingPattern = TilingPattern;\n        /***/\n      },\n      /* 12 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.GlobalWorkerOptions = void 0;\n        const GlobalWorkerOptions = Object.create(null);\n        exports.GlobalWorkerOptions = GlobalWorkerOptions;\n        GlobalWorkerOptions.workerPort = GlobalWorkerOptions.workerPort === undefined ? null : GlobalWorkerOptions.workerPort;\n        GlobalWorkerOptions.workerSrc = GlobalWorkerOptions.workerSrc === undefined ? \"\" : GlobalWorkerOptions.workerSrc;\n        /***/\n      },\n      /* 13 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.MessageHandler = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        const CallbackKind = {\n          UNKNOWN: 0,\n          DATA: 1,\n          ERROR: 2\n        };\n        const StreamKind = {\n          UNKNOWN: 0,\n          CANCEL: 1,\n          CANCEL_COMPLETE: 2,\n          CLOSE: 3,\n          ENQUEUE: 4,\n          ERROR: 5,\n          PULL: 6,\n          PULL_COMPLETE: 7,\n          START_COMPLETE: 8\n        };\n\n        function wrapReason(reason) {\n          if (typeof reason !== \"object\" || reason === null) {\n            return reason;\n          }\n\n          switch (reason.name) {\n            case \"AbortException\":\n              return new _util.AbortException(reason.message);\n\n            case \"MissingPDFException\":\n              return new _util.MissingPDFException(reason.message);\n\n            case \"UnexpectedResponseException\":\n              return new _util.UnexpectedResponseException(reason.message, reason.status);\n\n            case \"UnknownErrorException\":\n              return new _util.UnknownErrorException(reason.message, reason.details);\n\n            default:\n              return new _util.UnknownErrorException(reason.message, reason.toString());\n          }\n        }\n\n        class MessageHandler {\n          constructor(sourceName, targetName, comObj) {\n            this.sourceName = sourceName;\n            this.targetName = targetName;\n            this.comObj = comObj;\n            this.callbackId = 1;\n            this.streamId = 1;\n            this.postMessageTransfers = true;\n            this.streamSinks = Object.create(null);\n            this.streamControllers = Object.create(null);\n            this.callbackCapabilities = Object.create(null);\n            this.actionHandler = Object.create(null);\n\n            this._onComObjOnMessage = event => {\n              const data = event.data;\n\n              if (data.targetName !== this.sourceName) {\n                return;\n              }\n\n              if (data.stream) {\n                this._processStreamMessage(data);\n\n                return;\n              }\n\n              if (data.callback) {\n                const callbackId = data.callbackId;\n                const capability = this.callbackCapabilities[callbackId];\n\n                if (!capability) {\n                  throw new Error(`Cannot resolve callback ${callbackId}`);\n                }\n\n                delete this.callbackCapabilities[callbackId];\n\n                if (data.callback === CallbackKind.DATA) {\n                  capability.resolve(data.data);\n                } else if (data.callback === CallbackKind.ERROR) {\n                  capability.reject(wrapReason(data.reason));\n                } else {\n                  throw new Error(\"Unexpected callback case\");\n                }\n\n                return;\n              }\n\n              const action = this.actionHandler[data.action];\n\n              if (!action) {\n                throw new Error(`Unknown action from worker: ${data.action}`);\n              }\n\n              if (data.callbackId) {\n                const cbSourceName = this.sourceName;\n                const cbTargetName = data.sourceName;\n                new Promise(function (resolve) {\n                  resolve(action(data.data));\n                }).then(function (result) {\n                  comObj.postMessage({\n                    sourceName: cbSourceName,\n                    targetName: cbTargetName,\n                    callback: CallbackKind.DATA,\n                    callbackId: data.callbackId,\n                    data: result\n                  });\n                }, function (reason) {\n                  comObj.postMessage({\n                    sourceName: cbSourceName,\n                    targetName: cbTargetName,\n                    callback: CallbackKind.ERROR,\n                    callbackId: data.callbackId,\n                    reason: wrapReason(reason)\n                  });\n                });\n                return;\n              }\n\n              if (data.streamId) {\n                this._createStreamSink(data);\n\n                return;\n              }\n\n              action(data.data);\n            };\n\n            comObj.addEventListener(\"message\", this._onComObjOnMessage);\n          }\n\n          on(actionName, handler) {\n            const ah = this.actionHandler;\n\n            if (ah[actionName]) {\n              throw new Error(`There is already an actionName called \"${actionName}\"`);\n            }\n\n            ah[actionName] = handler;\n          }\n\n          send(actionName, data, transfers) {\n            this._postMessage({\n              sourceName: this.sourceName,\n              targetName: this.targetName,\n              action: actionName,\n              data\n            }, transfers);\n          }\n\n          sendWithPromise(actionName, data, transfers) {\n            const callbackId = this.callbackId++;\n            const capability = (0, _util.createPromiseCapability)();\n            this.callbackCapabilities[callbackId] = capability;\n\n            try {\n              this._postMessage({\n                sourceName: this.sourceName,\n                targetName: this.targetName,\n                action: actionName,\n                callbackId,\n                data\n              }, transfers);\n            } catch (ex) {\n              capability.reject(ex);\n            }\n\n            return capability.promise;\n          }\n\n          sendWithStream(actionName, data, queueingStrategy, transfers) {\n            const streamId = this.streamId++;\n            const sourceName = this.sourceName;\n            const targetName = this.targetName;\n            const comObj = this.comObj;\n            return new ReadableStream({\n              start: controller => {\n                const startCapability = (0, _util.createPromiseCapability)();\n                this.streamControllers[streamId] = {\n                  controller,\n                  startCall: startCapability,\n                  pullCall: null,\n                  cancelCall: null,\n                  isClosed: false\n                };\n\n                this._postMessage({\n                  sourceName,\n                  targetName,\n                  action: actionName,\n                  streamId,\n                  data,\n                  desiredSize: controller.desiredSize\n                }, transfers);\n\n                return startCapability.promise;\n              },\n              pull: controller => {\n                const pullCapability = (0, _util.createPromiseCapability)();\n                this.streamControllers[streamId].pullCall = pullCapability;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.PULL,\n                  streamId,\n                  desiredSize: controller.desiredSize\n                });\n                return pullCapability.promise;\n              },\n              cancel: reason => {\n                (0, _util.assert)(reason instanceof Error, \"cancel must have a valid reason\");\n                const cancelCapability = (0, _util.createPromiseCapability)();\n                this.streamControllers[streamId].cancelCall = cancelCapability;\n                this.streamControllers[streamId].isClosed = true;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.CANCEL,\n                  streamId,\n                  reason: wrapReason(reason)\n                });\n                return cancelCapability.promise;\n              }\n            }, queueingStrategy);\n          }\n\n          _createStreamSink(data) {\n            const self = this;\n            const action = this.actionHandler[data.action];\n            const streamId = data.streamId;\n            const sourceName = this.sourceName;\n            const targetName = data.sourceName;\n            const comObj = this.comObj;\n            const streamSink = {\n              enqueue(chunk) {\n                let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n                let transfers = arguments.length > 2 ? arguments[2] : undefined;\n\n                if (this.isCancelled) {\n                  return;\n                }\n\n                const lastDesiredSize = this.desiredSize;\n                this.desiredSize -= size;\n\n                if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n                  this.sinkCapability = (0, _util.createPromiseCapability)();\n                  this.ready = this.sinkCapability.promise;\n                }\n\n                self._postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.ENQUEUE,\n                  streamId,\n                  chunk\n                }, transfers);\n              },\n\n              close() {\n                if (this.isCancelled) {\n                  return;\n                }\n\n                this.isCancelled = true;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.CLOSE,\n                  streamId\n                });\n                delete self.streamSinks[streamId];\n              },\n\n              error(reason) {\n                (0, _util.assert)(reason instanceof Error, \"error must have a valid reason\");\n\n                if (this.isCancelled) {\n                  return;\n                }\n\n                this.isCancelled = true;\n                comObj.postMessage({\n                  sourceName,\n                  targetName,\n                  stream: StreamKind.ERROR,\n                  streamId,\n                  reason: wrapReason(reason)\n                });\n              },\n\n              sinkCapability: (0, _util.createPromiseCapability)(),\n              onPull: null,\n              onCancel: null,\n              isCancelled: false,\n              desiredSize: data.desiredSize,\n              ready: null\n            };\n            streamSink.sinkCapability.resolve();\n            streamSink.ready = streamSink.sinkCapability.promise;\n            this.streamSinks[streamId] = streamSink;\n            new Promise(function (resolve) {\n              resolve(action(data.data, streamSink));\n            }).then(function () {\n              comObj.postMessage({\n                sourceName,\n                targetName,\n                stream: StreamKind.START_COMPLETE,\n                streamId,\n                success: true\n              });\n            }, function (reason) {\n              comObj.postMessage({\n                sourceName,\n                targetName,\n                stream: StreamKind.START_COMPLETE,\n                streamId,\n                reason: wrapReason(reason)\n              });\n            });\n          }\n\n          _processStreamMessage(data) {\n            const streamId = data.streamId;\n            const sourceName = this.sourceName;\n            const targetName = data.sourceName;\n            const comObj = this.comObj;\n\n            switch (data.stream) {\n              case StreamKind.START_COMPLETE:\n                if (data.success) {\n                  this.streamControllers[streamId].startCall.resolve();\n                } else {\n                  this.streamControllers[streamId].startCall.reject(wrapReason(data.reason));\n                }\n\n                break;\n\n              case StreamKind.PULL_COMPLETE:\n                if (data.success) {\n                  this.streamControllers[streamId].pullCall.resolve();\n                } else {\n                  this.streamControllers[streamId].pullCall.reject(wrapReason(data.reason));\n                }\n\n                break;\n\n              case StreamKind.PULL:\n                if (!this.streamSinks[streamId]) {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.PULL_COMPLETE,\n                    streamId,\n                    success: true\n                  });\n                  break;\n                }\n\n                if (this.streamSinks[streamId].desiredSize <= 0 && data.desiredSize > 0) {\n                  this.streamSinks[streamId].sinkCapability.resolve();\n                }\n\n                this.streamSinks[streamId].desiredSize = data.desiredSize;\n                const {\n                  onPull\n                } = this.streamSinks[data.streamId];\n                new Promise(function (resolve) {\n                  resolve(onPull && onPull());\n                }).then(function () {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.PULL_COMPLETE,\n                    streamId,\n                    success: true\n                  });\n                }, function (reason) {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.PULL_COMPLETE,\n                    streamId,\n                    reason: wrapReason(reason)\n                  });\n                });\n                break;\n\n              case StreamKind.ENQUEUE:\n                (0, _util.assert)(this.streamControllers[streamId], \"enqueue should have stream controller\");\n\n                if (this.streamControllers[streamId].isClosed) {\n                  break;\n                }\n\n                this.streamControllers[streamId].controller.enqueue(data.chunk);\n                break;\n\n              case StreamKind.CLOSE:\n                (0, _util.assert)(this.streamControllers[streamId], \"close should have stream controller\");\n\n                if (this.streamControllers[streamId].isClosed) {\n                  break;\n                }\n\n                this.streamControllers[streamId].isClosed = true;\n                this.streamControllers[streamId].controller.close();\n\n                this._deleteStreamController(streamId);\n\n                break;\n\n              case StreamKind.ERROR:\n                (0, _util.assert)(this.streamControllers[streamId], \"error should have stream controller\");\n                this.streamControllers[streamId].controller.error(wrapReason(data.reason));\n\n                this._deleteStreamController(streamId);\n\n                break;\n\n              case StreamKind.CANCEL_COMPLETE:\n                if (data.success) {\n                  this.streamControllers[streamId].cancelCall.resolve();\n                } else {\n                  this.streamControllers[streamId].cancelCall.reject(wrapReason(data.reason));\n                }\n\n                this._deleteStreamController(streamId);\n\n                break;\n\n              case StreamKind.CANCEL:\n                if (!this.streamSinks[streamId]) {\n                  break;\n                }\n\n                const {\n                  onCancel\n                } = this.streamSinks[data.streamId];\n                new Promise(function (resolve) {\n                  resolve(onCancel && onCancel(wrapReason(data.reason)));\n                }).then(function () {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.CANCEL_COMPLETE,\n                    streamId,\n                    success: true\n                  });\n                }, function (reason) {\n                  comObj.postMessage({\n                    sourceName,\n                    targetName,\n                    stream: StreamKind.CANCEL_COMPLETE,\n                    streamId,\n                    reason: wrapReason(reason)\n                  });\n                });\n                this.streamSinks[streamId].sinkCapability.reject(wrapReason(data.reason));\n                this.streamSinks[streamId].isCancelled = true;\n                delete this.streamSinks[streamId];\n                break;\n\n              default:\n                throw new Error(\"Unexpected stream case\");\n            }\n          }\n\n          async _deleteStreamController(streamId) {\n            await Promise.allSettled([this.streamControllers[streamId].startCall, this.streamControllers[streamId].pullCall, this.streamControllers[streamId].cancelCall].map(function (capability) {\n              return capability && capability.promise;\n            }));\n            delete this.streamControllers[streamId];\n          }\n\n          _postMessage(message, transfers) {\n            if (transfers && this.postMessageTransfers) {\n              this.comObj.postMessage(message, transfers);\n            } else {\n              this.comObj.postMessage(message);\n            }\n          }\n\n          destroy() {\n            this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n          }\n\n        }\n\n        exports.MessageHandler = MessageHandler;\n        /***/\n      },\n      /* 14 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Metadata = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class Metadata {\n          constructor(_ref22) {\n            let {\n              parsedData,\n              rawData\n            } = _ref22;\n            this._metadataMap = parsedData;\n            this._data = rawData;\n          }\n\n          getRaw() {\n            return this._data;\n          }\n\n          get(name) {\n            return this._metadataMap.get(name) ?? null;\n          }\n\n          getAll() {\n            return (0, _util.objectFromMap)(this._metadataMap);\n          }\n\n          has(name) {\n            return this._metadataMap.has(name);\n          }\n\n        }\n\n        exports.Metadata = Metadata;\n        /***/\n      },\n      /* 15 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.OptionalContentConfig = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        class OptionalContentGroup {\n          constructor(name, intent) {\n            this.visible = true;\n            this.name = name;\n            this.intent = intent;\n          }\n\n        }\n\n        class OptionalContentConfig {\n          constructor(data) {\n            this.name = null;\n            this.creator = null;\n            this._order = null;\n            this._groups = new Map();\n\n            if (data === null) {\n              return;\n            }\n\n            this.name = data.name;\n            this.creator = data.creator;\n            this._order = data.order;\n\n            for (const group of data.groups) {\n              this._groups.set(group.id, new OptionalContentGroup(group.name, group.intent));\n            }\n\n            if (data.baseState === \"OFF\") {\n              for (const group of this._groups) {\n                group.visible = false;\n              }\n            }\n\n            for (const on of data.on) {\n              this._groups.get(on).visible = true;\n            }\n\n            for (const off of data.off) {\n              this._groups.get(off).visible = false;\n            }\n          }\n\n          _evaluateVisibilityExpression(array) {\n            const length = array.length;\n\n            if (length < 2) {\n              return true;\n            }\n\n            const operator = array[0];\n\n            for (let i = 1; i < length; i++) {\n              const element = array[i];\n              let state;\n\n              if (Array.isArray(element)) {\n                state = this._evaluateVisibilityExpression(element);\n              } else if (this._groups.has(element)) {\n                state = this._groups.get(element).visible;\n              } else {\n                (0, _util.warn)(`Optional content group not found: ${element}`);\n                return true;\n              }\n\n              switch (operator) {\n                case \"And\":\n                  if (!state) {\n                    return false;\n                  }\n\n                  break;\n\n                case \"Or\":\n                  if (state) {\n                    return true;\n                  }\n\n                  break;\n\n                case \"Not\":\n                  return !state;\n\n                default:\n                  return true;\n              }\n            }\n\n            return operator === \"And\";\n          }\n\n          isVisible(group) {\n            if (group.type === \"OCG\") {\n              if (!this._groups.has(group.id)) {\n                (0, _util.warn)(`Optional content group not found: ${group.id}`);\n                return true;\n              }\n\n              return this._groups.get(group.id).visible;\n            } else if (group.type === \"OCMD\") {\n              if (group.expression) {\n                return this._evaluateVisibilityExpression(group.expression);\n              }\n\n              if (!group.policy || group.policy === \"AnyOn\") {\n                for (const id of group.ids) {\n                  if (!this._groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (this._groups.get(id).visible) {\n                    return true;\n                  }\n                }\n\n                return false;\n              } else if (group.policy === \"AllOn\") {\n                for (const id of group.ids) {\n                  if (!this._groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (!this._groups.get(id).visible) {\n                    return false;\n                  }\n                }\n\n                return true;\n              } else if (group.policy === \"AnyOff\") {\n                for (const id of group.ids) {\n                  if (!this._groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (!this._groups.get(id).visible) {\n                    return true;\n                  }\n                }\n\n                return false;\n              } else if (group.policy === \"AllOff\") {\n                for (const id of group.ids) {\n                  if (!this._groups.has(id)) {\n                    (0, _util.warn)(`Optional content group not found: ${id}`);\n                    return true;\n                  }\n\n                  if (this._groups.get(id).visible) {\n                    return false;\n                  }\n                }\n\n                return true;\n              }\n\n              (0, _util.warn)(`Unknown optional content policy ${group.policy}.`);\n              return true;\n            }\n\n            (0, _util.warn)(`Unknown group type ${group.type}.`);\n            return true;\n          }\n\n          setVisibility(id) {\n            let visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n            if (!this._groups.has(id)) {\n              (0, _util.warn)(`Optional content group not found: ${id}`);\n              return;\n            }\n\n            this._groups.get(id).visible = !!visible;\n          }\n\n          getOrder() {\n            if (!this._groups.size) {\n              return null;\n            }\n\n            if (this._order) {\n              return this._order.slice();\n            }\n\n            return Array.from(this._groups.keys());\n          }\n\n          getGroups() {\n            return this._groups.size > 0 ? (0, _util.objectFromMap)(this._groups) : null;\n          }\n\n          getGroup(id) {\n            return this._groups.get(id) || null;\n          }\n\n        }\n\n        exports.OptionalContentConfig = OptionalContentConfig;\n        /***/\n      },\n      /* 16 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFDataTransportStream = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        class PDFDataTransportStream {\n          constructor(params, pdfDataRangeTransport) {\n            (0, _util.assert)(pdfDataRangeTransport, 'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.');\n            this._queuedChunks = [];\n            this._progressiveDone = params.progressiveDone || false;\n            this._contentDispositionFilename = params.contentDispositionFilename || null;\n            const initialData = params.initialData;\n\n            if (initialData?.length > 0) {\n              const buffer = new Uint8Array(initialData).buffer;\n\n              this._queuedChunks.push(buffer);\n            }\n\n            this._pdfDataRangeTransport = pdfDataRangeTransport;\n            this._isStreamingSupported = !params.disableStream;\n            this._isRangeSupported = !params.disableRange;\n            this._contentLength = params.length;\n            this._fullRequestReader = null;\n            this._rangeReaders = [];\n\n            this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {\n              this._onReceiveData({\n                begin,\n                chunk\n              });\n            });\n\n            this._pdfDataRangeTransport.addProgressListener((loaded, total) => {\n              this._onProgress({\n                loaded,\n                total\n              });\n            });\n\n            this._pdfDataRangeTransport.addProgressiveReadListener(chunk => {\n              this._onReceiveData({\n                chunk\n              });\n            });\n\n            this._pdfDataRangeTransport.addProgressiveDoneListener(() => {\n              this._onProgressiveDone();\n            });\n\n            this._pdfDataRangeTransport.transportReady();\n          }\n\n          _onReceiveData(args) {\n            const buffer = new Uint8Array(args.chunk).buffer;\n\n            if (args.begin === undefined) {\n              if (this._fullRequestReader) {\n                this._fullRequestReader._enqueue(buffer);\n              } else {\n                this._queuedChunks.push(buffer);\n              }\n            } else {\n              const found = this._rangeReaders.some(function (rangeReader) {\n                if (rangeReader._begin !== args.begin) {\n                  return false;\n                }\n\n                rangeReader._enqueue(buffer);\n\n                return true;\n              });\n\n              (0, _util.assert)(found, \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\");\n            }\n          }\n\n          get _progressiveDataLength() {\n            return this._fullRequestReader?._loaded ?? 0;\n          }\n\n          _onProgress(evt) {\n            if (evt.total === undefined) {\n              const firstReader = this._rangeReaders[0];\n\n              if (firstReader?.onProgress) {\n                firstReader.onProgress({\n                  loaded: evt.loaded\n                });\n              }\n            } else {\n              const fullReader = this._fullRequestReader;\n\n              if (fullReader?.onProgress) {\n                fullReader.onProgress({\n                  loaded: evt.loaded,\n                  total: evt.total\n                });\n              }\n            }\n          }\n\n          _onProgressiveDone() {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.progressiveDone();\n            }\n\n            this._progressiveDone = true;\n          }\n\n          _removeRangeReader(reader) {\n            const i = this._rangeReaders.indexOf(reader);\n\n            if (i >= 0) {\n              this._rangeReaders.splice(i, 1);\n            }\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFDataTransportStream.getFullReader can only be called once.\");\n            const queuedChunks = this._queuedChunks;\n            this._queuedChunks = null;\n            return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone, this._contentDispositionFilename);\n          }\n\n          getRangeReader(begin, end) {\n            if (end <= this._progressiveDataLength) {\n              return null;\n            }\n\n            const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n\n            this._pdfDataRangeTransport.requestDataRange(begin, end);\n\n            this._rangeReaders.push(reader);\n\n            return reader;\n          }\n\n          cancelAllRequests(reason) {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.cancel(reason);\n            }\n\n            for (const reader of this._rangeReaders.slice(0)) {\n              reader.cancel(reason);\n            }\n\n            this._pdfDataRangeTransport.abort();\n          }\n\n        }\n\n        exports.PDFDataTransportStream = PDFDataTransportStream;\n\n        class PDFDataTransportStreamReader {\n          constructor(stream, queuedChunks) {\n            let progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            let contentDispositionFilename = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n            this._stream = stream;\n            this._done = progressiveDone || false;\n            this._filename = (0, _display_utils.isPdfFile)(contentDispositionFilename) ? contentDispositionFilename : null;\n            this._queuedChunks = queuedChunks || [];\n            this._loaded = 0;\n\n            for (const chunk of this._queuedChunks) {\n              this._loaded += chunk.byteLength;\n            }\n\n            this._requests = [];\n            this._headersReady = Promise.resolve();\n            stream._fullRequestReader = this;\n            this.onProgress = null;\n          }\n\n          _enqueue(chunk) {\n            if (this._done) {\n              return;\n            }\n\n            if (this._requests.length > 0) {\n              const requestCapability = this._requests.shift();\n\n              requestCapability.resolve({\n                value: chunk,\n                done: false\n              });\n            } else {\n              this._queuedChunks.push(chunk);\n            }\n\n            this._loaded += chunk.byteLength;\n          }\n\n          get headersReady() {\n            return this._headersReady;\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get isRangeSupported() {\n            return this._stream._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._stream._isStreamingSupported;\n          }\n\n          get contentLength() {\n            return this._stream._contentLength;\n          }\n\n          async read() {\n            if (this._queuedChunks.length > 0) {\n              const chunk = this._queuedChunks.shift();\n\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = (0, _util.createPromiseCapability)();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n          }\n\n          progressiveDone() {\n            if (this._done) {\n              return;\n            }\n\n            this._done = true;\n          }\n\n        }\n\n        class PDFDataTransportStreamRangeReader {\n          constructor(stream, begin, end) {\n            this._stream = stream;\n            this._begin = begin;\n            this._end = end;\n            this._queuedChunk = null;\n            this._requests = [];\n            this._done = false;\n            this.onProgress = null;\n          }\n\n          _enqueue(chunk) {\n            if (this._done) {\n              return;\n            }\n\n            if (this._requests.length === 0) {\n              this._queuedChunk = chunk;\n            } else {\n              const requestsCapability = this._requests.shift();\n\n              requestsCapability.resolve({\n                value: chunk,\n                done: false\n              });\n\n              for (const requestCapability of this._requests) {\n                requestCapability.resolve({\n                  value: undefined,\n                  done: true\n                });\n              }\n\n              this._requests.length = 0;\n            }\n\n            this._done = true;\n\n            this._stream._removeRangeReader(this);\n          }\n\n          get isStreamingSupported() {\n            return false;\n          }\n\n          async read() {\n            if (this._queuedChunk) {\n              const chunk = this._queuedChunk;\n              this._queuedChunk = null;\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = (0, _util.createPromiseCapability)();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n\n            this._stream._removeRangeReader(this);\n          }\n\n        }\n        /***/\n\n      },\n      /* 17 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.AnnotationLayer = void 0;\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _annotation_storage = __w_pdfjs_require__(9);\n\n        var _scripting_utils = __w_pdfjs_require__(18);\n\n        class AnnotationElementFactory {\n          static create(parameters) {\n            const subtype = parameters.data.annotationType;\n\n            switch (subtype) {\n              case _util.AnnotationType.LINK:\n                return new LinkAnnotationElement(parameters);\n\n              case _util.AnnotationType.TEXT:\n                return new TextAnnotationElement(parameters);\n\n              case _util.AnnotationType.WIDGET:\n                const fieldType = parameters.data.fieldType;\n\n                switch (fieldType) {\n                  case \"Tx\":\n                    return new TextWidgetAnnotationElement(parameters);\n\n                  case \"Btn\":\n                    if (parameters.data.radioButton) {\n                      return new RadioButtonWidgetAnnotationElement(parameters);\n                    } else if (parameters.data.checkBox) {\n                      return new CheckboxWidgetAnnotationElement(parameters);\n                    }\n\n                    return new PushButtonWidgetAnnotationElement(parameters);\n\n                  case \"Ch\":\n                    return new ChoiceWidgetAnnotationElement(parameters);\n                }\n\n                return new WidgetAnnotationElement(parameters);\n\n              case _util.AnnotationType.POPUP:\n                return new PopupAnnotationElement(parameters);\n\n              case _util.AnnotationType.FREETEXT:\n                return new FreeTextAnnotationElement(parameters);\n\n              case _util.AnnotationType.LINE:\n                return new LineAnnotationElement(parameters);\n\n              case _util.AnnotationType.SQUARE:\n                return new SquareAnnotationElement(parameters);\n\n              case _util.AnnotationType.CIRCLE:\n                return new CircleAnnotationElement(parameters);\n\n              case _util.AnnotationType.POLYLINE:\n                return new PolylineAnnotationElement(parameters);\n\n              case _util.AnnotationType.CARET:\n                return new CaretAnnotationElement(parameters);\n\n              case _util.AnnotationType.INK:\n                return new InkAnnotationElement(parameters);\n\n              case _util.AnnotationType.POLYGON:\n                return new PolygonAnnotationElement(parameters);\n\n              case _util.AnnotationType.HIGHLIGHT:\n                return new HighlightAnnotationElement(parameters);\n\n              case _util.AnnotationType.UNDERLINE:\n                return new UnderlineAnnotationElement(parameters);\n\n              case _util.AnnotationType.SQUIGGLY:\n                return new SquigglyAnnotationElement(parameters);\n\n              case _util.AnnotationType.STRIKEOUT:\n                return new StrikeOutAnnotationElement(parameters);\n\n              case _util.AnnotationType.STAMP:\n                return new StampAnnotationElement(parameters);\n\n              case _util.AnnotationType.FILEATTACHMENT:\n                return new FileAttachmentAnnotationElement(parameters);\n\n              default:\n                return new AnnotationElement(parameters);\n            }\n          }\n\n        }\n\n        class AnnotationElement {\n          constructor(parameters) {\n            let {\n              isRenderable = false,\n              ignoreBorder = false,\n              createQuadrilaterals = false\n            } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n            this.isRenderable = isRenderable;\n            this.data = parameters.data;\n            this.layer = parameters.layer;\n            this.page = parameters.page;\n            this.viewport = parameters.viewport;\n            this.linkService = parameters.linkService;\n            this.downloadManager = parameters.downloadManager;\n            this.imageResourcesPath = parameters.imageResourcesPath;\n            this.renderInteractiveForms = parameters.renderInteractiveForms;\n            this.svgFactory = parameters.svgFactory;\n            this.annotationStorage = parameters.annotationStorage;\n            this.enableScripting = parameters.enableScripting;\n            this.hasJSActions = parameters.hasJSActions;\n            this._mouseState = parameters.mouseState;\n\n            if (isRenderable) {\n              this.container = this._createContainer(ignoreBorder);\n            }\n\n            if (createQuadrilaterals) {\n              this.quadrilaterals = this._createQuadrilaterals(ignoreBorder);\n            }\n          }\n\n          _createContainer() {\n            let ignoreBorder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n            const data = this.data,\n                  page = this.page,\n                  viewport = this.viewport;\n            const container = document.createElement(\"section\");\n            let width = data.rect[2] - data.rect[0];\n            let height = data.rect[3] - data.rect[1];\n            container.setAttribute(\"data-annotation-id\", data.id);\n\n            const rect = _util.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);\n\n            container.style.transform = `matrix(${viewport.transform.join(\",\")})`;\n            container.style.transformOrigin = `${-rect[0]}px ${-rect[1]}px`;\n\n            if (!ignoreBorder && data.borderStyle.width > 0) {\n              container.style.borderWidth = `${data.borderStyle.width}px`;\n\n              if (data.borderStyle.style !== _util.AnnotationBorderStyleType.UNDERLINE) {\n                width -= 2 * data.borderStyle.width;\n                height -= 2 * data.borderStyle.width;\n              }\n\n              const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n              const verticalRadius = data.borderStyle.verticalCornerRadius;\n\n              if (horizontalRadius > 0 || verticalRadius > 0) {\n                const radius = `${horizontalRadius}px / ${verticalRadius}px`;\n                container.style.borderRadius = radius;\n              }\n\n              switch (data.borderStyle.style) {\n                case _util.AnnotationBorderStyleType.SOLID:\n                  container.style.borderStyle = \"solid\";\n                  break;\n\n                case _util.AnnotationBorderStyleType.DASHED:\n                  container.style.borderStyle = \"dashed\";\n                  break;\n\n                case _util.AnnotationBorderStyleType.BEVELED:\n                  (0, _util.warn)(\"Unimplemented border style: beveled\");\n                  break;\n\n                case _util.AnnotationBorderStyleType.INSET:\n                  (0, _util.warn)(\"Unimplemented border style: inset\");\n                  break;\n\n                case _util.AnnotationBorderStyleType.UNDERLINE:\n                  container.style.borderBottomStyle = \"solid\";\n                  break;\n\n                default:\n                  break;\n              }\n\n              if (data.color) {\n                container.style.borderColor = _util.Util.makeHexColor(data.color[0] | 0, data.color[1] | 0, data.color[2] | 0);\n              } else {\n                container.style.borderWidth = 0;\n              }\n            }\n\n            container.style.left = `${rect[0]}px`;\n            container.style.top = `${rect[1]}px`;\n            container.style.width = `${width}px`;\n            container.style.height = `${height}px`;\n            return container;\n          }\n\n          _createQuadrilaterals() {\n            let ignoreBorder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (!this.data.quadPoints) {\n              return null;\n            }\n\n            const quadrilaterals = [];\n            const savedRect = this.data.rect;\n\n            for (const quadPoint of this.data.quadPoints) {\n              this.data.rect = [quadPoint[2].x, quadPoint[2].y, quadPoint[1].x, quadPoint[1].y];\n              quadrilaterals.push(this._createContainer(ignoreBorder));\n            }\n\n            this.data.rect = savedRect;\n            return quadrilaterals;\n          }\n\n          _createPopup(trigger, data) {\n            let container = this.container;\n\n            if (this.quadrilaterals) {\n              trigger = trigger || this.quadrilaterals;\n              container = this.quadrilaterals[0];\n            }\n\n            if (!trigger) {\n              trigger = document.createElement(\"div\");\n              trigger.style.height = container.style.height;\n              trigger.style.width = container.style.width;\n              container.appendChild(trigger);\n            }\n\n            const popupElement = new PopupElement({\n              container,\n              trigger,\n              color: data.color,\n              title: data.title,\n              modificationDate: data.modificationDate,\n              contents: data.contents,\n              hideWrapper: true\n            });\n            const popup = popupElement.render();\n            popup.style.left = container.style.width;\n            container.appendChild(popup);\n          }\n\n          _renderQuadrilaterals(className) {\n            for (const quadrilateral of this.quadrilaterals) {\n              quadrilateral.className = className;\n            }\n\n            return this.quadrilaterals;\n          }\n\n          render() {\n            (0, _util.unreachable)(\"Abstract method `AnnotationElement.render` called\");\n          }\n\n        }\n\n        class LinkAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.url || parameters.data.dest || parameters.data.action || parameters.data.isTooltipOnly || parameters.data.actions && (parameters.data.actions.Action || parameters.data.actions[\"Mouse Up\"] || parameters.data.actions[\"Mouse Down\"]));\n            super(parameters, {\n              isRenderable,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            const {\n              data,\n              linkService\n            } = this;\n            const link = document.createElement(\"a\");\n\n            if (data.url) {\n              (0, _display_utils.addLinkAttributes)(link, {\n                url: data.url,\n                target: data.newWindow ? _display_utils.LinkTarget.BLANK : linkService.externalLinkTarget,\n                rel: linkService.externalLinkRel,\n                enabled: linkService.externalLinkEnabled\n              });\n            } else if (data.action) {\n              this._bindNamedAction(link, data.action);\n            } else if (data.dest) {\n              this._bindLink(link, data.dest);\n            } else if (data.actions && (data.actions.Action || data.actions[\"Mouse Up\"] || data.actions[\"Mouse Down\"]) && this.enableScripting && this.hasJSActions) {\n              this._bindJSAction(link, data);\n            } else {\n              this._bindLink(link, \"\");\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"linkAnnotation\").map((quadrilateral, index) => {\n                const linkElement = index === 0 ? link : link.cloneNode();\n                quadrilateral.appendChild(linkElement);\n                return quadrilateral;\n              });\n            }\n\n            this.container.className = \"linkAnnotation\";\n            this.container.appendChild(link);\n            return this.container;\n          }\n\n          _bindLink(link, destination) {\n            link.href = this.linkService.getDestinationHash(destination);\n\n            link.onclick = () => {\n              if (destination) {\n                this.linkService.goToDestination(destination);\n              }\n\n              return false;\n            };\n\n            if (destination || destination === \"\") {\n              link.className = \"internalLink\";\n            }\n          }\n\n          _bindNamedAction(link, action) {\n            link.href = this.linkService.getAnchorUrl(\"\");\n\n            link.onclick = () => {\n              this.linkService.executeNamedAction(action);\n              return false;\n            };\n\n            link.className = \"internalLink\";\n          }\n\n          _bindJSAction(link, data) {\n            link.href = this.linkService.getAnchorUrl(\"\");\n            const map = new Map([[\"Action\", \"onclick\"], [\"Mouse Up\", \"onmouseup\"], [\"Mouse Down\", \"onmousedown\"]]);\n\n            for (const name of Object.keys(data.actions)) {\n              const jsName = map.get(name);\n\n              if (!jsName) {\n                continue;\n              }\n\n              link[jsName] = () => {\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: data.id,\n                    name\n                  }\n                });\n                return false;\n              };\n            }\n\n            link.className = \"internalLink\";\n          }\n\n        }\n\n        class TextAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable\n            });\n          }\n\n          render() {\n            this.container.className = \"textAnnotation\";\n            const image = document.createElement(\"img\");\n            image.style.height = this.container.style.height;\n            image.style.width = this.container.style.width;\n            image.src = this.imageResourcesPath + \"annotation-\" + this.data.name.toLowerCase() + \".svg\";\n            image.alt = \"[{{type}} Annotation]\";\n            image.dataset.l10nId = \"text_annotation_type\";\n            image.dataset.l10nArgs = JSON.stringify({\n              type: this.data.name\n            });\n\n            if (!this.data.hasPopup) {\n              this._createPopup(image, this.data);\n            }\n\n            this.container.appendChild(image);\n            return this.container;\n          }\n\n        }\n\n        class WidgetAnnotationElement extends AnnotationElement {\n          render() {\n            if (this.data.alternativeText) {\n              this.container.title = this.data.alternativeText;\n            }\n\n            return this.container;\n          }\n\n          _getKeyModifier(event) {\n            return navigator.platform.includes(\"Win\") && event.ctrlKey || navigator.platform.includes(\"Mac\") && event.metaKey;\n          }\n\n          _setEventListener(element, baseName, eventName, valueGetter) {\n            if (baseName.includes(\"mouse\")) {\n              element.addEventListener(baseName, event => {\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: this.data.id,\n                    name: eventName,\n                    value: valueGetter(event),\n                    shift: event.shiftKey,\n                    modifier: this._getKeyModifier(event)\n                  }\n                });\n              });\n            } else {\n              element.addEventListener(baseName, event => {\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id: this.data.id,\n                    name: eventName,\n                    value: event.target.checked\n                  }\n                });\n              });\n            }\n          }\n\n          _setEventListeners(element, names, getter) {\n            for (const [baseName, eventName] of names) {\n              if (eventName === \"Action\" || this.data.actions?.[eventName]) {\n                this._setEventListener(element, baseName, eventName, getter);\n              }\n            }\n          }\n\n          _dispatchEventFromSandbox(actions, jsEvent) {\n            const setColor = (jsName, styleName, event) => {\n              const color = event.detail[jsName];\n              event.target.style[styleName] = _scripting_utils.ColorConverters[`${color[0]}_HTML`](color.slice(1));\n            };\n\n            const commonActions = {\n              display: event => {\n                const hidden = event.detail.display % 2 === 1;\n                event.target.style.visibility = hidden ? \"hidden\" : \"visible\";\n                this.annotationStorage.setValue(this.data.id, {\n                  hidden,\n                  print: event.detail.display === 0 || event.detail.display === 3\n                });\n              },\n              print: event => {\n                this.annotationStorage.setValue(this.data.id, {\n                  print: event.detail.print\n                });\n              },\n              hidden: event => {\n                event.target.style.visibility = event.detail.hidden ? \"hidden\" : \"visible\";\n                this.annotationStorage.setValue(this.data.id, {\n                  hidden: event.detail.hidden\n                });\n              },\n              focus: event => {\n                setTimeout(() => event.target.focus({\n                  preventScroll: false\n                }), 0);\n              },\n              userName: event => {\n                event.target.title = event.detail.userName;\n              },\n              readonly: event => {\n                if (event.detail.readonly) {\n                  event.target.setAttribute(\"readonly\", \"\");\n                } else {\n                  event.target.removeAttribute(\"readonly\");\n                }\n              },\n              required: event => {\n                if (event.detail.required) {\n                  event.target.setAttribute(\"required\", \"\");\n                } else {\n                  event.target.removeAttribute(\"required\");\n                }\n              },\n              bgColor: event => {\n                setColor(\"bgColor\", \"backgroundColor\", event);\n              },\n              fillColor: event => {\n                setColor(\"fillColor\", \"backgroundColor\", event);\n              },\n              fgColor: event => {\n                setColor(\"fgColor\", \"color\", event);\n              },\n              textColor: event => {\n                setColor(\"textColor\", \"color\", event);\n              },\n              borderColor: event => {\n                setColor(\"borderColor\", \"borderColor\", event);\n              },\n              strokeColor: event => {\n                setColor(\"strokeColor\", \"borderColor\", event);\n              }\n            };\n\n            for (const name of Object.keys(jsEvent.detail)) {\n              const action = actions[name] || commonActions[name];\n\n              if (action) {\n                action(jsEvent);\n              }\n            }\n          }\n\n        }\n\n        class TextWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            const isRenderable = parameters.renderInteractiveForms || !parameters.data.hasAppearance && !!parameters.data.fieldValue;\n            super(parameters, {\n              isRenderable\n            });\n          }\n\n          setPropertyOnSiblings(base, key, value, keyInStorage) {\n            const storage = this.annotationStorage;\n\n            for (const element of document.getElementsByName(base.name)) {\n              if (element !== base) {\n                element[key] = value;\n                const data = Object.create(null);\n                data[keyInStorage] = value;\n                storage.setValue(element.getAttribute(\"id\"), data);\n              }\n            }\n          }\n\n          render() {\n            const storage = this.annotationStorage;\n            const id = this.data.id;\n            this.container.className = \"textWidgetAnnotation\";\n            let element = null;\n\n            if (this.renderInteractiveForms) {\n              const storedData = storage.getValue(id, {\n                value: this.data.fieldValue,\n                valueAsString: this.data.fieldValue\n              });\n              const textContent = storedData.valueAsString || storedData.value || \"\";\n              const elementData = {\n                userValue: null,\n                formattedValue: null,\n                beforeInputSelectionRange: null,\n                beforeInputValue: null\n              };\n\n              if (this.data.multiLine) {\n                element = document.createElement(\"textarea\");\n                element.textContent = textContent;\n              } else {\n                element = document.createElement(\"input\");\n                element.type = \"text\";\n                element.setAttribute(\"value\", textContent);\n              }\n\n              elementData.userValue = textContent;\n              element.setAttribute(\"id\", id);\n              element.addEventListener(\"input\", event => {\n                storage.setValue(id, {\n                  value: event.target.value\n                });\n                this.setPropertyOnSiblings(element, \"value\", event.target.value, \"value\");\n              });\n\n              let blurListener = event => {\n                if (elementData.formattedValue) {\n                  event.target.value = elementData.formattedValue;\n                }\n\n                event.target.scrollLeft = 0;\n                elementData.beforeInputSelectionRange = null;\n              };\n\n              if (this.enableScripting && this.hasJSActions) {\n                element.addEventListener(\"focus\", event => {\n                  if (elementData.userValue) {\n                    event.target.value = elementData.userValue;\n                  }\n                });\n                element.addEventListener(\"updatefromsandbox\", jsEvent => {\n                  const actions = {\n                    value(event) {\n                      elementData.userValue = event.detail.value || \"\";\n                      storage.setValue(id, {\n                        value: elementData.userValue.toString()\n                      });\n\n                      if (!elementData.formattedValue) {\n                        event.target.value = elementData.userValue;\n                      }\n                    },\n\n                    valueAsString(event) {\n                      elementData.formattedValue = event.detail.valueAsString || \"\";\n\n                      if (event.target !== document.activeElement) {\n                        event.target.value = elementData.formattedValue;\n                      }\n\n                      storage.setValue(id, {\n                        formattedValue: elementData.formattedValue\n                      });\n                    },\n\n                    selRange(event) {\n                      const [selStart, selEnd] = event.detail.selRange;\n\n                      if (selStart >= 0 && selEnd < event.target.value.length) {\n                        event.target.setSelectionRange(selStart, selEnd);\n                      }\n                    }\n\n                  };\n\n                  this._dispatchEventFromSandbox(actions, jsEvent);\n                });\n                element.addEventListener(\"keydown\", event => {\n                  elementData.beforeInputValue = event.target.value;\n                  let commitKey = -1;\n\n                  if (event.key === \"Escape\") {\n                    commitKey = 0;\n                  } else if (event.key === \"Enter\") {\n                    commitKey = 2;\n                  } else if (event.key === \"Tab\") {\n                    commitKey = 3;\n                  }\n\n                  if (commitKey === -1) {\n                    return;\n                  }\n\n                  elementData.userValue = event.target.value;\n                  this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                    source: this,\n                    detail: {\n                      id,\n                      name: \"Keystroke\",\n                      value: event.target.value,\n                      willCommit: true,\n                      commitKey,\n                      selStart: event.target.selectionStart,\n                      selEnd: event.target.selectionEnd\n                    }\n                  });\n                });\n                const _blurListener = blurListener;\n                blurListener = null;\n                element.addEventListener(\"blur\", event => {\n                  if (this._mouseState.isDown) {\n                    elementData.userValue = event.target.value;\n                    this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                      source: this,\n                      detail: {\n                        id,\n                        name: \"Keystroke\",\n                        value: event.target.value,\n                        willCommit: true,\n                        commitKey: 1,\n                        selStart: event.target.selectionStart,\n                        selEnd: event.target.selectionEnd\n                      }\n                    });\n                  }\n\n                  _blurListener(event);\n                });\n                element.addEventListener(\"mousedown\", event => {\n                  elementData.beforeInputValue = event.target.value;\n                  elementData.beforeInputSelectionRange = null;\n                });\n                element.addEventListener(\"keyup\", event => {\n                  if (event.target.selectionStart === event.target.selectionEnd) {\n                    elementData.beforeInputSelectionRange = null;\n                  }\n                });\n                element.addEventListener(\"select\", event => {\n                  elementData.beforeInputSelectionRange = [event.target.selectionStart, event.target.selectionEnd];\n                });\n\n                if (this.data.actions?.Keystroke) {\n                  element.addEventListener(\"input\", event => {\n                    let selStart = -1;\n                    let selEnd = -1;\n\n                    if (elementData.beforeInputSelectionRange) {\n                      [selStart, selEnd] = elementData.beforeInputSelectionRange;\n                    }\n\n                    this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                      source: this,\n                      detail: {\n                        id,\n                        name: \"Keystroke\",\n                        value: elementData.beforeInputValue,\n                        change: event.data,\n                        willCommit: false,\n                        selStart,\n                        selEnd\n                      }\n                    });\n                  });\n                }\n\n                this._setEventListeners(element, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.value);\n              }\n\n              if (blurListener) {\n                element.addEventListener(\"blur\", blurListener);\n              }\n\n              element.disabled = this.data.readOnly;\n              element.name = this.data.fieldName;\n\n              if (this.data.maxLen !== null) {\n                element.maxLength = this.data.maxLen;\n              }\n\n              if (this.data.comb) {\n                const fieldWidth = this.data.rect[2] - this.data.rect[0];\n                const combWidth = fieldWidth / this.data.maxLen;\n                element.classList.add(\"comb\");\n                element.style.letterSpacing = `calc(${combWidth}px - 1ch)`;\n              }\n            } else {\n              element = document.createElement(\"div\");\n              element.textContent = this.data.fieldValue;\n              element.style.verticalAlign = \"middle\";\n              element.style.display = \"table-cell\";\n            }\n\n            this._setTextStyle(element);\n\n            this.container.appendChild(element);\n            return this.container;\n          }\n\n          _setTextStyle(element) {\n            const TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\n            const {\n              fontSize,\n              fontColor\n            } = this.data.defaultAppearanceData;\n            const style = element.style;\n\n            if (fontSize) {\n              style.fontSize = `${fontSize}px`;\n            }\n\n            style.color = _util.Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n\n            if (this.data.textAlignment !== null) {\n              style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n            }\n          }\n\n        }\n\n        class CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: parameters.renderInteractiveForms\n            });\n          }\n\n          render() {\n            const storage = this.annotationStorage;\n            const data = this.data;\n            const id = data.id;\n            let value = storage.getValue(id, {\n              value: data.fieldValue && (data.exportValue && data.exportValue === data.fieldValue || !data.exportValue && data.fieldValue !== \"Off\")\n            }).value;\n\n            if (typeof value === \"string\") {\n              value = value !== \"Off\";\n              storage.setValue(id, {\n                value\n              });\n            }\n\n            this.container.className = \"buttonWidgetAnnotation checkBox\";\n            const element = document.createElement(\"input\");\n            element.disabled = data.readOnly;\n            element.type = \"checkbox\";\n            element.name = this.data.fieldName;\n\n            if (value) {\n              element.setAttribute(\"checked\", true);\n            }\n\n            element.setAttribute(\"id\", id);\n            element.addEventListener(\"change\", function (event) {\n              const name = event.target.name;\n\n              for (const checkbox of document.getElementsByName(name)) {\n                if (checkbox !== event.target) {\n                  checkbox.checked = false;\n                  storage.setValue(checkbox.parentNode.getAttribute(\"data-annotation-id\"), {\n                    value: false\n                  });\n                }\n              }\n\n              storage.setValue(id, {\n                value: event.target.checked\n              });\n            });\n\n            if (this.enableScripting && this.hasJSActions) {\n              element.addEventListener(\"updatefromsandbox\", jsEvent => {\n                const actions = {\n                  value(event) {\n                    event.target.checked = event.detail.value !== \"Off\";\n                    storage.setValue(id, {\n                      value: event.target.checked\n                    });\n                  }\n\n                };\n\n                this._dispatchEventFromSandbox(actions, jsEvent);\n              });\n\n              this._setEventListeners(element, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n            }\n\n            this.container.appendChild(element);\n            return this.container;\n          }\n\n        }\n\n        class RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: parameters.renderInteractiveForms\n            });\n          }\n\n          render() {\n            this.container.className = \"buttonWidgetAnnotation radioButton\";\n            const storage = this.annotationStorage;\n            const data = this.data;\n            const id = data.id;\n            let value = storage.getValue(id, {\n              value: data.fieldValue === data.buttonValue\n            }).value;\n\n            if (typeof value === \"string\") {\n              value = value !== data.buttonValue;\n              storage.setValue(id, {\n                value\n              });\n            }\n\n            const element = document.createElement(\"input\");\n            element.disabled = data.readOnly;\n            element.type = \"radio\";\n            element.name = data.fieldName;\n\n            if (value) {\n              element.setAttribute(\"checked\", true);\n            }\n\n            element.setAttribute(\"id\", id);\n            element.addEventListener(\"change\", function (event) {\n              const {\n                target\n              } = event;\n\n              for (const radio of document.getElementsByName(target.name)) {\n                if (radio !== target) {\n                  storage.setValue(radio.getAttribute(\"id\"), {\n                    value: false\n                  });\n                }\n              }\n\n              storage.setValue(id, {\n                value: target.checked\n              });\n            });\n\n            if (this.enableScripting && this.hasJSActions) {\n              const pdfButtonValue = data.buttonValue;\n              element.addEventListener(\"updatefromsandbox\", jsEvent => {\n                const actions = {\n                  value(event) {\n                    const checked = pdfButtonValue === event.detail.value;\n\n                    for (const radio of document.getElementsByName(event.target.name)) {\n                      const radioId = radio.getAttribute(\"id\");\n                      radio.checked = radioId === id && checked;\n                      storage.setValue(radioId, {\n                        value: radio.checked\n                      });\n                    }\n                  }\n\n                };\n\n                this._dispatchEventFromSandbox(actions, jsEvent);\n              });\n\n              this._setEventListeners(element, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n            }\n\n            this.container.appendChild(element);\n            return this.container;\n          }\n\n        }\n\n        class PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n          render() {\n            const container = super.render();\n            container.className = \"buttonWidgetAnnotation pushButton\";\n\n            if (this.data.alternativeText) {\n              container.title = this.data.alternativeText;\n            }\n\n            return container;\n          }\n\n        }\n\n        class ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: parameters.renderInteractiveForms\n            });\n          }\n\n          render() {\n            this.container.className = \"choiceWidgetAnnotation\";\n            const storage = this.annotationStorage;\n            const id = this.data.id;\n            storage.getValue(id, {\n              value: this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : undefined\n            });\n            const selectElement = document.createElement(\"select\");\n            selectElement.disabled = this.data.readOnly;\n            selectElement.name = this.data.fieldName;\n            selectElement.setAttribute(\"id\", id);\n\n            if (!this.data.combo) {\n              selectElement.size = this.data.options.length;\n\n              if (this.data.multiSelect) {\n                selectElement.multiple = true;\n              }\n            }\n\n            for (const option of this.data.options) {\n              const optionElement = document.createElement(\"option\");\n              optionElement.textContent = option.displayValue;\n              optionElement.value = option.exportValue;\n\n              if (this.data.fieldValue.includes(option.exportValue)) {\n                optionElement.setAttribute(\"selected\", true);\n              }\n\n              selectElement.appendChild(optionElement);\n            }\n\n            const getValue = (event, isExport) => {\n              const name = isExport ? \"value\" : \"textContent\";\n              const options = event.target.options;\n\n              if (!event.target.multiple) {\n                return options.selectedIndex === -1 ? null : options[options.selectedIndex][name];\n              }\n\n              return Array.prototype.filter.call(options, option => option.selected).map(option => option[name]);\n            };\n\n            const getItems = event => {\n              const options = event.target.options;\n              return Array.prototype.map.call(options, option => {\n                return {\n                  displayValue: option.textContent,\n                  exportValue: option.value\n                };\n              });\n            };\n\n            if (this.enableScripting && this.hasJSActions) {\n              selectElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n                const actions = {\n                  value(event) {\n                    const options = selectElement.options;\n                    const value = event.detail.value;\n                    const values = new Set(Array.isArray(value) ? value : [value]);\n                    Array.prototype.forEach.call(options, option => {\n                      option.selected = values.has(option.value);\n                    });\n                    storage.setValue(id, {\n                      value: getValue(event, true)\n                    });\n                  },\n\n                  multipleSelection(event) {\n                    selectElement.multiple = true;\n                  },\n\n                  remove(event) {\n                    const options = selectElement.options;\n                    const index = event.detail.remove;\n                    options[index].selected = false;\n                    selectElement.remove(index);\n\n                    if (options.length > 0) {\n                      const i = Array.prototype.findIndex.call(options, option => option.selected);\n\n                      if (i === -1) {\n                        options[0].selected = true;\n                      }\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(event, true),\n                      items: getItems(event)\n                    });\n                  },\n\n                  clear(event) {\n                    while (selectElement.length !== 0) {\n                      selectElement.remove(0);\n                    }\n\n                    storage.setValue(id, {\n                      value: null,\n                      items: []\n                    });\n                  },\n\n                  insert(event) {\n                    const {\n                      index,\n                      displayValue,\n                      exportValue\n                    } = event.detail.insert;\n                    const optionElement = document.createElement(\"option\");\n                    optionElement.textContent = displayValue;\n                    optionElement.value = exportValue;\n                    selectElement.insertBefore(optionElement, selectElement.children[index]);\n                    storage.setValue(id, {\n                      value: getValue(event, true),\n                      items: getItems(event)\n                    });\n                  },\n\n                  items(event) {\n                    const {\n                      items\n                    } = event.detail;\n\n                    while (selectElement.length !== 0) {\n                      selectElement.remove(0);\n                    }\n\n                    for (const item of items) {\n                      const {\n                        displayValue,\n                        exportValue\n                      } = item;\n                      const optionElement = document.createElement(\"option\");\n                      optionElement.textContent = displayValue;\n                      optionElement.value = exportValue;\n                      selectElement.appendChild(optionElement);\n                    }\n\n                    if (selectElement.options.length > 0) {\n                      selectElement.options[0].selected = true;\n                    }\n\n                    storage.setValue(id, {\n                      value: getValue(event, true),\n                      items: getItems(event)\n                    });\n                  },\n\n                  indices(event) {\n                    const indices = new Set(event.detail.indices);\n                    const options = event.target.options;\n                    Array.prototype.forEach.call(options, (option, i) => {\n                      option.selected = indices.has(i);\n                    });\n                    storage.setValue(id, {\n                      value: getValue(event, true)\n                    });\n                  },\n\n                  editable(event) {\n                    event.target.disabled = !event.detail.editable;\n                  }\n\n                };\n\n                this._dispatchEventFromSandbox(actions, jsEvent);\n              });\n              selectElement.addEventListener(\"input\", event => {\n                const exportValue = getValue(event, true);\n                const value = getValue(event, false);\n                storage.setValue(id, {\n                  value: exportValue\n                });\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id,\n                    name: \"Keystroke\",\n                    value,\n                    changeEx: exportValue,\n                    willCommit: true,\n                    commitKey: 1,\n                    keyDown: false\n                  }\n                });\n              });\n\n              this._setEventListeners(selectElement, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"], [\"input\", \"Action\"]], event => event.target.checked);\n            } else {\n              selectElement.addEventListener(\"input\", function (event) {\n                storage.setValue(id, {\n                  value: getValue(event)\n                });\n              });\n            }\n\n            this.container.appendChild(selectElement);\n            return this.container;\n          }\n\n        }\n\n        class PopupAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable\n            });\n          }\n\n          render() {\n            const IGNORE_TYPES = [\"Line\", \"Square\", \"Circle\", \"PolyLine\", \"Polygon\", \"Ink\"];\n            this.container.className = \"popupAnnotation\";\n\n            if (IGNORE_TYPES.includes(this.data.parentType)) {\n              return this.container;\n            }\n\n            const selector = `[data-annotation-id=\"${this.data.parentId}\"]`;\n            const parentElements = this.layer.querySelectorAll(selector);\n\n            if (parentElements.length === 0) {\n              return this.container;\n            }\n\n            const popup = new PopupElement({\n              container: this.container,\n              trigger: Array.from(parentElements),\n              color: this.data.color,\n              title: this.data.title,\n              modificationDate: this.data.modificationDate,\n              contents: this.data.contents\n            });\n            const page = this.page;\n\n            const rect = _util.Util.normalizeRect([this.data.parentRect[0], page.view[3] - this.data.parentRect[1] + page.view[1], this.data.parentRect[2], page.view[3] - this.data.parentRect[3] + page.view[1]]);\n\n            const popupLeft = rect[0] + this.data.parentRect[2] - this.data.parentRect[0];\n            const popupTop = rect[1];\n            this.container.style.transformOrigin = `${-popupLeft}px ${-popupTop}px`;\n            this.container.style.left = `${popupLeft}px`;\n            this.container.style.top = `${popupTop}px`;\n            this.container.appendChild(popup.render());\n            return this.container;\n          }\n\n        }\n\n        class PopupElement {\n          constructor(parameters) {\n            this.container = parameters.container;\n            this.trigger = parameters.trigger;\n            this.color = parameters.color;\n            this.title = parameters.title;\n            this.modificationDate = parameters.modificationDate;\n            this.contents = parameters.contents;\n            this.hideWrapper = parameters.hideWrapper || false;\n            this.pinned = false;\n          }\n\n          render() {\n            const BACKGROUND_ENLIGHT = 0.7;\n            const wrapper = document.createElement(\"div\");\n            wrapper.className = \"popupWrapper\";\n            this.hideElement = this.hideWrapper ? wrapper : this.container;\n            this.hideElement.hidden = true;\n            const popup = document.createElement(\"div\");\n            popup.className = \"popup\";\n            const color = this.color;\n\n            if (color) {\n              const r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];\n              const g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];\n              const b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];\n              popup.style.backgroundColor = _util.Util.makeHexColor(r | 0, g | 0, b | 0);\n            }\n\n            const title = document.createElement(\"h1\");\n            title.textContent = this.title;\n            popup.appendChild(title);\n\n            const dateObject = _display_utils.PDFDateString.toDateObject(this.modificationDate);\n\n            if (dateObject) {\n              const modificationDate = document.createElement(\"span\");\n              modificationDate.textContent = \"{{date}}, {{time}}\";\n              modificationDate.dataset.l10nId = \"annotation_date_string\";\n              modificationDate.dataset.l10nArgs = JSON.stringify({\n                date: dateObject.toLocaleDateString(),\n                time: dateObject.toLocaleTimeString()\n              });\n              popup.appendChild(modificationDate);\n            }\n\n            const contents = this._formatContents(this.contents);\n\n            popup.appendChild(contents);\n\n            if (!Array.isArray(this.trigger)) {\n              this.trigger = [this.trigger];\n            }\n\n            for (const element of this.trigger) {\n              element.addEventListener(\"click\", this._toggle.bind(this));\n              element.addEventListener(\"mouseover\", this._show.bind(this, false));\n              element.addEventListener(\"mouseout\", this._hide.bind(this, false));\n            }\n\n            popup.addEventListener(\"click\", this._hide.bind(this, true));\n            wrapper.appendChild(popup);\n            return wrapper;\n          }\n\n          _formatContents(contents) {\n            const p = document.createElement(\"p\");\n            const lines = contents.split(/(?:\\r\\n?|\\n)/);\n\n            for (let i = 0, ii = lines.length; i < ii; ++i) {\n              const line = lines[i];\n              p.appendChild(document.createTextNode(line));\n\n              if (i < ii - 1) {\n                p.appendChild(document.createElement(\"br\"));\n              }\n            }\n\n            return p;\n          }\n\n          _toggle() {\n            if (this.pinned) {\n              this._hide(true);\n            } else {\n              this._show(true);\n            }\n          }\n\n          _show() {\n            let pin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (pin) {\n              this.pinned = true;\n            }\n\n            if (this.hideElement.hidden) {\n              this.hideElement.hidden = false;\n              this.container.style.zIndex += 1;\n            }\n          }\n\n          _hide() {\n            let unpin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n            if (unpin) {\n              this.pinned = false;\n            }\n\n            if (!this.hideElement.hidden && !this.pinned) {\n              this.hideElement.hidden = true;\n              this.container.style.zIndex -= 1;\n            }\n          }\n\n        }\n\n        class FreeTextAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"freeTextAnnotation\";\n\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            return this.container;\n          }\n\n        }\n\n        class LineAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"lineAnnotation\";\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n            const line = this.svgFactory.createElement(\"svg:line\");\n            line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n            line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n            line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n            line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n            line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n            line.setAttribute(\"stroke\", \"transparent\");\n            svg.appendChild(line);\n            this.container.append(svg);\n\n            this._createPopup(line, data);\n\n            return this.container;\n          }\n\n        }\n\n        class SquareAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"squareAnnotation\";\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n            const borderWidth = data.borderStyle.width;\n            const square = this.svgFactory.createElement(\"svg:rect\");\n            square.setAttribute(\"x\", borderWidth / 2);\n            square.setAttribute(\"y\", borderWidth / 2);\n            square.setAttribute(\"width\", width - borderWidth);\n            square.setAttribute(\"height\", height - borderWidth);\n            square.setAttribute(\"stroke-width\", borderWidth || 1);\n            square.setAttribute(\"stroke\", \"transparent\");\n            square.setAttribute(\"fill\", \"none\");\n            svg.appendChild(square);\n            this.container.append(svg);\n\n            this._createPopup(square, data);\n\n            return this.container;\n          }\n\n        }\n\n        class CircleAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"circleAnnotation\";\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n            const borderWidth = data.borderStyle.width;\n            const circle = this.svgFactory.createElement(\"svg:ellipse\");\n            circle.setAttribute(\"cx\", width / 2);\n            circle.setAttribute(\"cy\", height / 2);\n            circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n            circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n            circle.setAttribute(\"stroke-width\", borderWidth || 1);\n            circle.setAttribute(\"stroke\", \"transparent\");\n            circle.setAttribute(\"fill\", \"none\");\n            svg.appendChild(circle);\n            this.container.append(svg);\n\n            this._createPopup(circle, data);\n\n            return this.container;\n          }\n\n        }\n\n        class PolylineAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n            this.containerClassName = \"polylineAnnotation\";\n            this.svgElementName = \"svg:polyline\";\n          }\n\n          render() {\n            this.container.className = this.containerClassName;\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n            let points = [];\n\n            for (const coordinate of data.vertices) {\n              const x = coordinate.x - data.rect[0];\n              const y = data.rect[3] - coordinate.y;\n              points.push(x + \",\" + y);\n            }\n\n            points = points.join(\" \");\n            const polyline = this.svgFactory.createElement(this.svgElementName);\n            polyline.setAttribute(\"points\", points);\n            polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n            polyline.setAttribute(\"stroke\", \"transparent\");\n            polyline.setAttribute(\"fill\", \"none\");\n            svg.appendChild(polyline);\n            this.container.append(svg);\n\n            this._createPopup(polyline, data);\n\n            return this.container;\n          }\n\n        }\n\n        class PolygonAnnotationElement extends PolylineAnnotationElement {\n          constructor(parameters) {\n            super(parameters);\n            this.containerClassName = \"polygonAnnotation\";\n            this.svgElementName = \"svg:polygon\";\n          }\n\n        }\n\n        class CaretAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"caretAnnotation\";\n\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            return this.container;\n          }\n\n        }\n\n        class InkAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n            this.containerClassName = \"inkAnnotation\";\n            this.svgElementName = \"svg:polyline\";\n          }\n\n          render() {\n            this.container.className = this.containerClassName;\n            const data = this.data;\n            const width = data.rect[2] - data.rect[0];\n            const height = data.rect[3] - data.rect[1];\n            const svg = this.svgFactory.create(width, height);\n\n            for (const inkList of data.inkLists) {\n              let points = [];\n\n              for (const coordinate of inkList) {\n                const x = coordinate.x - data.rect[0];\n                const y = data.rect[3] - coordinate.y;\n                points.push(`${x},${y}`);\n              }\n\n              points = points.join(\" \");\n              const polyline = this.svgFactory.createElement(this.svgElementName);\n              polyline.setAttribute(\"points\", points);\n              polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n              polyline.setAttribute(\"stroke\", \"transparent\");\n              polyline.setAttribute(\"fill\", \"none\");\n\n              this._createPopup(polyline, data);\n\n              svg.appendChild(polyline);\n            }\n\n            this.container.append(svg);\n            return this.container;\n          }\n\n        }\n\n        class HighlightAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"highlightAnnotation\");\n            }\n\n            this.container.className = \"highlightAnnotation\";\n            return this.container;\n          }\n\n        }\n\n        class UnderlineAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"underlineAnnotation\");\n            }\n\n            this.container.className = \"underlineAnnotation\";\n            return this.container;\n          }\n\n        }\n\n        class SquigglyAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"squigglyAnnotation\");\n            }\n\n            this.container.className = \"squigglyAnnotation\";\n            return this.container;\n          }\n\n        }\n\n        class StrikeOutAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true,\n              createQuadrilaterals: true\n            });\n          }\n\n          render() {\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            if (this.quadrilaterals) {\n              return this._renderQuadrilaterals(\"strikeoutAnnotation\");\n            }\n\n            this.container.className = \"strikeoutAnnotation\";\n            return this.container;\n          }\n\n        }\n\n        class StampAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            const isRenderable = !!(parameters.data.hasPopup || parameters.data.title || parameters.data.contents);\n            super(parameters, {\n              isRenderable,\n              ignoreBorder: true\n            });\n          }\n\n          render() {\n            this.container.className = \"stampAnnotation\";\n\n            if (!this.data.hasPopup) {\n              this._createPopup(null, this.data);\n            }\n\n            return this.container;\n          }\n\n        }\n\n        class FileAttachmentAnnotationElement extends AnnotationElement {\n          constructor(parameters) {\n            super(parameters, {\n              isRenderable: true\n            });\n            const {\n              filename,\n              content\n            } = this.data.file;\n            this.filename = (0, _display_utils.getFilenameFromUrl)(filename);\n            this.content = content;\n            this.linkService.eventBus?.dispatch(\"fileattachmentannotation\", {\n              source: this,\n              id: (0, _util.stringToPDFString)(filename),\n              filename,\n              content\n            });\n          }\n\n          render() {\n            this.container.className = \"fileAttachmentAnnotation\";\n            const trigger = document.createElement(\"div\");\n            trigger.style.height = this.container.style.height;\n            trigger.style.width = this.container.style.width;\n            trigger.addEventListener(\"dblclick\", this._download.bind(this));\n\n            if (!this.data.hasPopup && (this.data.title || this.data.contents)) {\n              this._createPopup(trigger, this.data);\n            }\n\n            this.container.appendChild(trigger);\n            return this.container;\n          }\n\n          _download() {\n            this.downloadManager?.openOrDownloadData(this.container, this.content, this.filename);\n          }\n\n        }\n\n        class AnnotationLayer {\n          static render(parameters) {\n            const sortedAnnotations = [],\n                  popupAnnotations = [];\n\n            for (const data of parameters.annotations) {\n              if (!data) {\n                continue;\n              }\n\n              if (data.annotationType === _util.AnnotationType.POPUP) {\n                popupAnnotations.push(data);\n                continue;\n              }\n\n              sortedAnnotations.push(data);\n            }\n\n            if (popupAnnotations.length) {\n              sortedAnnotations.push(...popupAnnotations);\n            }\n\n            for (const data of sortedAnnotations) {\n              const element = AnnotationElementFactory.create({\n                data,\n                layer: parameters.div,\n                page: parameters.page,\n                viewport: parameters.viewport,\n                linkService: parameters.linkService,\n                downloadManager: parameters.downloadManager,\n                imageResourcesPath: parameters.imageResourcesPath || \"\",\n                renderInteractiveForms: parameters.renderInteractiveForms !== false,\n                svgFactory: new _display_utils.DOMSVGFactory(),\n                annotationStorage: parameters.annotationStorage || new _annotation_storage.AnnotationStorage(),\n                enableScripting: parameters.enableScripting,\n                hasJSActions: parameters.hasJSActions,\n                mouseState: parameters.mouseState || {\n                  isDown: false\n                }\n              });\n\n              if (element.isRenderable) {\n                const rendered = element.render();\n\n                if (data.hidden) {\n                  rendered.style.visibility = \"hidden\";\n                }\n\n                if (Array.isArray(rendered)) {\n                  for (const renderedElement of rendered) {\n                    parameters.div.appendChild(renderedElement);\n                  }\n                } else {\n                  if (element instanceof PopupAnnotationElement) {\n                    parameters.div.prepend(rendered);\n                  } else {\n                    parameters.div.appendChild(rendered);\n                  }\n                }\n              }\n            }\n          }\n\n          static update(parameters) {\n            const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n\n            for (const data of parameters.annotations) {\n              const elements = parameters.div.querySelectorAll(`[data-annotation-id=\"${data.id}\"]`);\n\n              if (elements) {\n                for (const element of elements) {\n                  element.style.transform = transform;\n                }\n              }\n            }\n\n            parameters.div.hidden = false;\n          }\n\n        }\n\n        exports.AnnotationLayer = AnnotationLayer;\n        /***/\n      },\n      /* 18 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.ColorConverters = void 0;\n\n        function makeColorComp(n) {\n          return Math.floor(Math.max(0, Math.min(1, n)) * 255).toString(16).padStart(2, \"0\");\n        }\n\n        class ColorConverters {\n          static CMYK_G(_ref23) {\n            let [c, y, m, k] = _ref23;\n            return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\n          }\n\n          static G_CMYK(_ref24) {\n            let [g] = _ref24;\n            return [\"CMYK\", 0, 0, 0, 1 - g];\n          }\n\n          static G_RGB(_ref25) {\n            let [g] = _ref25;\n            return [\"RGB\", g, g, g];\n          }\n\n          static G_HTML(_ref26) {\n            let [g] = _ref26;\n            const G = makeColorComp(g);\n            return `#${G}${G}${G}`;\n          }\n\n          static RGB_G(_ref27) {\n            let [r, g, b] = _ref27;\n            return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\n          }\n\n          static RGB_HTML(_ref28) {\n            let [r, g, b] = _ref28;\n            const R = makeColorComp(r);\n            const G = makeColorComp(g);\n            const B = makeColorComp(b);\n            return `#${R}${G}${B}`;\n          }\n\n          static T_HTML() {\n            return \"#00000000\";\n          }\n\n          static CMYK_RGB(_ref29) {\n            let [c, y, m, k] = _ref29;\n            return [\"RGB\", 1 - Math.min(1, c + k), 1 - Math.min(1, m + k), 1 - Math.min(1, y + k)];\n          }\n\n          static CMYK_HTML(components) {\n            return this.RGB_HTML(this.CMYK_RGB(components));\n          }\n\n          static RGB_CMYK(_ref30) {\n            let [r, g, b] = _ref30;\n            const c = 1 - r;\n            const m = 1 - g;\n            const y = 1 - b;\n            const k = Math.min(c, m, y);\n            return [\"CMYK\", c, m, y, k];\n          }\n\n        }\n\n        exports.ColorConverters = ColorConverters;\n        /***/\n      },\n      /* 19 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.renderTextLayer = renderTextLayer;\n\n        var _util = __w_pdfjs_require__(2);\n\n        const MAX_TEXT_DIVS_TO_RENDER = 100000;\n        const DEFAULT_FONT_SIZE = 30;\n        const DEFAULT_FONT_ASCENT = 0.8;\n        const ascentCache = new Map();\n        const AllWhitespaceRegexp = /^\\s+$/g;\n\n        function getAscent(fontFamily, ctx) {\n          const cachedAscent = ascentCache.get(fontFamily);\n\n          if (cachedAscent) {\n            return cachedAscent;\n          }\n\n          ctx.save();\n          ctx.font = `${DEFAULT_FONT_SIZE}px ${fontFamily}`;\n          const metrics = ctx.measureText(\"\");\n          let ascent = metrics.fontBoundingBoxAscent;\n          let descent = Math.abs(metrics.fontBoundingBoxDescent);\n\n          if (ascent) {\n            ctx.restore();\n            const ratio = ascent / (ascent + descent);\n            ascentCache.set(fontFamily, ratio);\n            return ratio;\n          }\n\n          ctx.strokeStyle = \"red\";\n          ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n          ctx.strokeText(\"g\", 0, 0);\n          let pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n          descent = 0;\n\n          for (let i = pixels.length - 1 - 3; i >= 0; i -= 4) {\n            if (pixels[i] > 0) {\n              descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);\n              break;\n            }\n          }\n\n          ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n          ctx.strokeText(\"A\", 0, DEFAULT_FONT_SIZE);\n          pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n          ascent = 0;\n\n          for (let i = 0, ii = pixels.length; i < ii; i += 4) {\n            if (pixels[i] > 0) {\n              ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);\n              break;\n            }\n          }\n\n          ctx.restore();\n\n          if (ascent) {\n            const ratio = ascent / (ascent + descent);\n            ascentCache.set(fontFamily, ratio);\n            return ratio;\n          }\n\n          ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);\n          return DEFAULT_FONT_ASCENT;\n        }\n\n        function appendText(task, geom, styles, ctx) {\n          const textDiv = document.createElement(\"span\");\n          const textDivProperties = {\n            angle: 0,\n            canvasWidth: 0,\n            hasText: geom.str !== \"\",\n            hasEOL: geom.hasEOL,\n            originalTransform: null,\n            paddingBottom: 0,\n            paddingLeft: 0,\n            paddingRight: 0,\n            paddingTop: 0,\n            scale: 1\n          };\n\n          task._textDivs.push(textDiv);\n\n          const tx = _util.Util.transform(task._viewport.transform, geom.transform);\n\n          let angle = Math.atan2(tx[1], tx[0]);\n          const style = styles[geom.fontName];\n\n          if (style.vertical) {\n            angle += Math.PI / 2;\n          }\n\n          const fontHeight = Math.hypot(tx[2], tx[3]);\n          const fontAscent = fontHeight * getAscent(style.fontFamily, ctx);\n          let left, top;\n\n          if (angle === 0) {\n            left = tx[4];\n            top = tx[5] - fontAscent;\n          } else {\n            left = tx[4] + fontAscent * Math.sin(angle);\n            top = tx[5] - fontAscent * Math.cos(angle);\n          }\n\n          textDiv.style.left = `${left}px`;\n          textDiv.style.top = `${top}px`;\n          textDiv.style.fontSize = `${fontHeight}px`;\n          textDiv.style.fontFamily = style.fontFamily;\n          textDiv.setAttribute(\"role\", \"presentation\");\n          textDiv.textContent = geom.str;\n          textDiv.dir = geom.dir;\n\n          if (task._fontInspectorEnabled) {\n            textDiv.dataset.fontName = geom.fontName;\n          }\n\n          if (angle !== 0) {\n            textDivProperties.angle = angle * (180 / Math.PI);\n          }\n\n          let shouldScaleText = false;\n\n          if (geom.str.length > 1 || task._enhanceTextSelection && AllWhitespaceRegexp.test(geom.str)) {\n            shouldScaleText = true;\n          } else if (geom.transform[0] !== geom.transform[3]) {\n            const absScaleX = Math.abs(geom.transform[0]),\n                  absScaleY = Math.abs(geom.transform[3]);\n\n            if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {\n              shouldScaleText = true;\n            }\n          }\n\n          if (shouldScaleText) {\n            if (style.vertical) {\n              textDivProperties.canvasWidth = geom.height * task._viewport.scale;\n            } else {\n              textDivProperties.canvasWidth = geom.width * task._viewport.scale;\n            }\n          }\n\n          task._textDivProperties.set(textDiv, textDivProperties);\n\n          if (task._textContentStream) {\n            task._layoutText(textDiv);\n          }\n\n          if (task._enhanceTextSelection && textDivProperties.hasText) {\n            let angleCos = 1,\n                angleSin = 0;\n\n            if (angle !== 0) {\n              angleCos = Math.cos(angle);\n              angleSin = Math.sin(angle);\n            }\n\n            const divWidth = (style.vertical ? geom.height : geom.width) * task._viewport.scale;\n            const divHeight = fontHeight;\n            let m, b;\n\n            if (angle !== 0) {\n              m = [angleCos, angleSin, -angleSin, angleCos, left, top];\n              b = _util.Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);\n            } else {\n              b = [left, top, left + divWidth, top + divHeight];\n            }\n\n            task._bounds.push({\n              left: b[0],\n              top: b[1],\n              right: b[2],\n              bottom: b[3],\n              div: textDiv,\n              size: [divWidth, divHeight],\n              m\n            });\n          }\n        }\n\n        function render(task) {\n          if (task._canceled) {\n            return;\n          }\n\n          const textDivs = task._textDivs;\n          const capability = task._capability;\n          const textDivsLength = textDivs.length;\n\n          if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n            task._renderingDone = true;\n            capability.resolve();\n            return;\n          }\n\n          if (!task._textContentStream) {\n            for (let i = 0; i < textDivsLength; i++) {\n              task._layoutText(textDivs[i]);\n            }\n          }\n\n          task._renderingDone = true;\n          capability.resolve();\n        }\n\n        function findPositiveMin(ts, offset, count) {\n          let result = 0;\n\n          for (let i = 0; i < count; i++) {\n            const t = ts[offset++];\n\n            if (t > 0) {\n              result = result ? Math.min(t, result) : t;\n            }\n          }\n\n          return result;\n        }\n\n        function expand(task) {\n          const bounds = task._bounds;\n          const viewport = task._viewport;\n          const expanded = expandBounds(viewport.width, viewport.height, bounds);\n\n          for (let i = 0; i < expanded.length; i++) {\n            const div = bounds[i].div;\n\n            const divProperties = task._textDivProperties.get(div);\n\n            if (divProperties.angle === 0) {\n              divProperties.paddingLeft = bounds[i].left - expanded[i].left;\n              divProperties.paddingTop = bounds[i].top - expanded[i].top;\n              divProperties.paddingRight = expanded[i].right - bounds[i].right;\n              divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;\n\n              task._textDivProperties.set(div, divProperties);\n\n              continue;\n            }\n\n            const e = expanded[i],\n                  b = bounds[i];\n            const m = b.m,\n                  c = m[0],\n                  s = m[1];\n            const points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];\n            const ts = new Float64Array(64);\n\n            for (let j = 0, jj = points.length; j < jj; j++) {\n              const t = _util.Util.applyTransform(points[j], m);\n\n              ts[j + 0] = c && (e.left - t[0]) / c;\n              ts[j + 4] = s && (e.top - t[1]) / s;\n              ts[j + 8] = c && (e.right - t[0]) / c;\n              ts[j + 12] = s && (e.bottom - t[1]) / s;\n              ts[j + 16] = s && (e.left - t[0]) / -s;\n              ts[j + 20] = c && (e.top - t[1]) / c;\n              ts[j + 24] = s && (e.right - t[0]) / -s;\n              ts[j + 28] = c && (e.bottom - t[1]) / c;\n              ts[j + 32] = c && (e.left - t[0]) / -c;\n              ts[j + 36] = s && (e.top - t[1]) / -s;\n              ts[j + 40] = c && (e.right - t[0]) / -c;\n              ts[j + 44] = s && (e.bottom - t[1]) / -s;\n              ts[j + 48] = s && (e.left - t[0]) / s;\n              ts[j + 52] = c && (e.top - t[1]) / -c;\n              ts[j + 56] = s && (e.right - t[0]) / s;\n              ts[j + 60] = c && (e.bottom - t[1]) / -c;\n            }\n\n            const boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));\n            divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;\n            divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;\n            divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;\n            divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;\n\n            task._textDivProperties.set(div, divProperties);\n          }\n        }\n\n        function expandBounds(width, height, boxes) {\n          const bounds = boxes.map(function (box, i) {\n            return {\n              x1: box.left,\n              y1: box.top,\n              x2: box.right,\n              y2: box.bottom,\n              index: i,\n              x1New: undefined,\n              x2New: undefined\n            };\n          });\n          expandBoundsLTR(width, bounds);\n          const expanded = new Array(boxes.length);\n\n          for (const b of bounds) {\n            const i = b.index;\n            expanded[i] = {\n              left: b.x1New,\n              top: 0,\n              right: b.x2New,\n              bottom: 0\n            };\n          }\n\n          boxes.map(function (box, i) {\n            const e = expanded[i],\n                  b = bounds[i];\n            b.x1 = box.top;\n            b.y1 = width - e.right;\n            b.x2 = box.bottom;\n            b.y2 = width - e.left;\n            b.index = i;\n            b.x1New = undefined;\n            b.x2New = undefined;\n          });\n          expandBoundsLTR(height, bounds);\n\n          for (const b of bounds) {\n            const i = b.index;\n            expanded[i].top = b.x1New;\n            expanded[i].bottom = b.x2New;\n          }\n\n          return expanded;\n        }\n\n        function expandBoundsLTR(width, bounds) {\n          bounds.sort(function (a, b) {\n            return a.x1 - b.x1 || a.index - b.index;\n          });\n          const fakeBoundary = {\n            x1: -Infinity,\n            y1: -Infinity,\n            x2: 0,\n            y2: Infinity,\n            index: -1,\n            x1New: 0,\n            x2New: 0\n          };\n          const horizon = [{\n            start: -Infinity,\n            end: Infinity,\n            boundary: fakeBoundary\n          }];\n\n          for (const boundary of bounds) {\n            let i = 0;\n\n            while (i < horizon.length && horizon[i].end <= boundary.y1) {\n              i++;\n            }\n\n            let j = horizon.length - 1;\n\n            while (j >= 0 && horizon[j].start >= boundary.y2) {\n              j--;\n            }\n\n            let horizonPart, affectedBoundary;\n            let q,\n                k,\n                maxXNew = -Infinity;\n\n            for (q = i; q <= j; q++) {\n              horizonPart = horizon[q];\n              affectedBoundary = horizonPart.boundary;\n              let xNew;\n\n              if (affectedBoundary.x2 > boundary.x1) {\n                xNew = affectedBoundary.index > boundary.index ? affectedBoundary.x1New : boundary.x1;\n              } else if (affectedBoundary.x2New === undefined) {\n                xNew = (affectedBoundary.x2 + boundary.x1) / 2;\n              } else {\n                xNew = affectedBoundary.x2New;\n              }\n\n              if (xNew > maxXNew) {\n                maxXNew = xNew;\n              }\n            }\n\n            boundary.x1New = maxXNew;\n\n            for (q = i; q <= j; q++) {\n              horizonPart = horizon[q];\n              affectedBoundary = horizonPart.boundary;\n\n              if (affectedBoundary.x2New === undefined) {\n                if (affectedBoundary.x2 > boundary.x1) {\n                  if (affectedBoundary.index > boundary.index) {\n                    affectedBoundary.x2New = affectedBoundary.x2;\n                  }\n                } else {\n                  affectedBoundary.x2New = maxXNew;\n                }\n              } else if (affectedBoundary.x2New > maxXNew) {\n                affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);\n              }\n            }\n\n            const changedHorizon = [];\n            let lastBoundary = null;\n\n            for (q = i; q <= j; q++) {\n              horizonPart = horizon[q];\n              affectedBoundary = horizonPart.boundary;\n              const useBoundary = affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;\n\n              if (lastBoundary === useBoundary) {\n                changedHorizon[changedHorizon.length - 1].end = horizonPart.end;\n              } else {\n                changedHorizon.push({\n                  start: horizonPart.start,\n                  end: horizonPart.end,\n                  boundary: useBoundary\n                });\n                lastBoundary = useBoundary;\n              }\n            }\n\n            if (horizon[i].start < boundary.y1) {\n              changedHorizon[0].start = boundary.y1;\n              changedHorizon.unshift({\n                start: horizon[i].start,\n                end: boundary.y1,\n                boundary: horizon[i].boundary\n              });\n            }\n\n            if (boundary.y2 < horizon[j].end) {\n              changedHorizon[changedHorizon.length - 1].end = boundary.y2;\n              changedHorizon.push({\n                start: boundary.y2,\n                end: horizon[j].end,\n                boundary: horizon[j].boundary\n              });\n            }\n\n            for (q = i; q <= j; q++) {\n              horizonPart = horizon[q];\n              affectedBoundary = horizonPart.boundary;\n\n              if (affectedBoundary.x2New !== undefined) {\n                continue;\n              }\n\n              let used = false;\n\n              for (k = i - 1; !used && k >= 0 && horizon[k].start >= affectedBoundary.y1; k--) {\n                used = horizon[k].boundary === affectedBoundary;\n              }\n\n              for (k = j + 1; !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2; k++) {\n                used = horizon[k].boundary === affectedBoundary;\n              }\n\n              for (k = 0; !used && k < changedHorizon.length; k++) {\n                used = changedHorizon[k].boundary === affectedBoundary;\n              }\n\n              if (!used) {\n                affectedBoundary.x2New = maxXNew;\n              }\n            }\n\n            Array.prototype.splice.apply(horizon, [i, j - i + 1].concat(changedHorizon));\n          }\n\n          for (const horizonPart of horizon) {\n            const affectedBoundary = horizonPart.boundary;\n\n            if (affectedBoundary.x2New === undefined) {\n              affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);\n            }\n          }\n        }\n\n        class TextLayerRenderTask {\n          constructor(_ref31) {\n            let {\n              textContent,\n              textContentStream,\n              container,\n              viewport,\n              textDivs,\n              textContentItemsStr,\n              enhanceTextSelection\n            } = _ref31;\n            this._textContent = textContent;\n            this._textContentStream = textContentStream;\n            this._container = container;\n            this._document = container.ownerDocument;\n            this._viewport = viewport;\n            this._textDivs = textDivs || [];\n            this._textContentItemsStr = textContentItemsStr || [];\n            this._enhanceTextSelection = !!enhanceTextSelection;\n            this._fontInspectorEnabled = !!globalThis.FontInspector?.enabled;\n            this._reader = null;\n            this._layoutTextLastFontSize = null;\n            this._layoutTextLastFontFamily = null;\n            this._layoutTextCtx = null;\n            this._textDivProperties = new WeakMap();\n            this._renderingDone = false;\n            this._canceled = false;\n            this._capability = (0, _util.createPromiseCapability)();\n            this._renderTimer = null;\n            this._bounds = [];\n\n            this._capability.promise.finally(() => {\n              if (this._layoutTextCtx) {\n                this._layoutTextCtx.canvas.width = 0;\n                this._layoutTextCtx.canvas.height = 0;\n                this._layoutTextCtx = null;\n              }\n            }).catch(() => {});\n          }\n\n          get promise() {\n            return this._capability.promise;\n          }\n\n          cancel() {\n            this._canceled = true;\n\n            if (this._reader) {\n              this._reader.cancel(new _util.AbortException(\"TextLayer task cancelled.\"));\n\n              this._reader = null;\n            }\n\n            if (this._renderTimer !== null) {\n              clearTimeout(this._renderTimer);\n              this._renderTimer = null;\n            }\n\n            this._capability.reject(new Error(\"TextLayer task cancelled.\"));\n          }\n\n          _processItems(items, styleCache) {\n            for (let i = 0, len = items.length; i < len; i++) {\n              if (items[i].str === undefined) {\n                if (items[i].type === \"beginMarkedContentProps\" || items[i].type === \"beginMarkedContent\") {\n                  const parent = this._container;\n                  this._container = document.createElement(\"span\");\n\n                  this._container.classList.add(\"markedContent\");\n\n                  if (items[i].id !== null) {\n                    this._container.setAttribute(\"id\", `${items[i].id}`);\n                  }\n\n                  parent.appendChild(this._container);\n                } else if (items[i].type === \"endMarkedContent\") {\n                  this._container = this._container.parentNode;\n                }\n\n                continue;\n              }\n\n              this._textContentItemsStr.push(items[i].str);\n\n              appendText(this, items[i], styleCache, this._layoutTextCtx);\n            }\n          }\n\n          _layoutText(textDiv) {\n            const textDivProperties = this._textDivProperties.get(textDiv);\n\n            let transform = \"\";\n\n            if (textDivProperties.canvasWidth !== 0 && textDivProperties.hasText) {\n              const {\n                fontSize,\n                fontFamily\n              } = textDiv.style;\n\n              if (fontSize !== this._layoutTextLastFontSize || fontFamily !== this._layoutTextLastFontFamily) {\n                this._layoutTextCtx.font = `${fontSize} ${fontFamily}`;\n                this._layoutTextLastFontSize = fontSize;\n                this._layoutTextLastFontFamily = fontFamily;\n              }\n\n              const {\n                width\n              } = this._layoutTextCtx.measureText(textDiv.textContent);\n\n              if (width > 0) {\n                textDivProperties.scale = textDivProperties.canvasWidth / width;\n                transform = `scaleX(${textDivProperties.scale})`;\n              }\n            }\n\n            if (textDivProperties.angle !== 0) {\n              transform = `rotate(${textDivProperties.angle}deg) ${transform}`;\n            }\n\n            if (transform.length > 0) {\n              if (this._enhanceTextSelection) {\n                textDivProperties.originalTransform = transform;\n              }\n\n              textDiv.style.transform = transform;\n            }\n\n            if (textDivProperties.hasText) {\n              this._container.appendChild(textDiv);\n            }\n\n            if (textDivProperties.hasEOL) {\n              const br = document.createElement(\"br\");\n              br.setAttribute(\"role\", \"presentation\");\n\n              this._container.appendChild(br);\n            }\n          }\n\n          _render() {\n            let timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n            const capability = (0, _util.createPromiseCapability)();\n            let styleCache = Object.create(null);\n\n            const canvas = this._document.createElement(\"canvas\");\n\n            canvas.height = canvas.width = DEFAULT_FONT_SIZE;\n            canvas.mozOpaque = true;\n            this._layoutTextCtx = canvas.getContext(\"2d\", {\n              alpha: false\n            });\n\n            if (this._textContent) {\n              const textItems = this._textContent.items;\n              const textStyles = this._textContent.styles;\n\n              this._processItems(textItems, textStyles);\n\n              capability.resolve();\n            } else if (this._textContentStream) {\n              const pump = () => {\n                this._reader.read().then(_ref32 => {\n                  let {\n                    value,\n                    done\n                  } = _ref32;\n\n                  if (done) {\n                    capability.resolve();\n                    return;\n                  }\n\n                  Object.assign(styleCache, value.styles);\n\n                  this._processItems(value.items, styleCache);\n\n                  pump();\n                }, capability.reject);\n              };\n\n              this._reader = this._textContentStream.getReader();\n              pump();\n            } else {\n              throw new Error('Neither \"textContent\" nor \"textContentStream\"' + \" parameters specified.\");\n            }\n\n            capability.promise.then(() => {\n              styleCache = null;\n\n              if (!timeout) {\n                render(this);\n              } else {\n                this._renderTimer = setTimeout(() => {\n                  render(this);\n                  this._renderTimer = null;\n                }, timeout);\n              }\n            }, this._capability.reject);\n          }\n\n          expandTextDivs() {\n            let expandDivs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n            if (!this._enhanceTextSelection || !this._renderingDone) {\n              return;\n            }\n\n            if (this._bounds !== null) {\n              expand(this);\n              this._bounds = null;\n            }\n\n            const transformBuf = [],\n                  paddingBuf = [];\n\n            for (let i = 0, ii = this._textDivs.length; i < ii; i++) {\n              const div = this._textDivs[i];\n\n              const divProps = this._textDivProperties.get(div);\n\n              if (!divProps.hasText) {\n                continue;\n              }\n\n              if (expandDivs) {\n                transformBuf.length = 0;\n                paddingBuf.length = 0;\n\n                if (divProps.originalTransform) {\n                  transformBuf.push(divProps.originalTransform);\n                }\n\n                if (divProps.paddingTop > 0) {\n                  paddingBuf.push(`${divProps.paddingTop}px`);\n                  transformBuf.push(`translateY(${-divProps.paddingTop}px)`);\n                } else {\n                  paddingBuf.push(0);\n                }\n\n                if (divProps.paddingRight > 0) {\n                  paddingBuf.push(`${divProps.paddingRight / divProps.scale}px`);\n                } else {\n                  paddingBuf.push(0);\n                }\n\n                if (divProps.paddingBottom > 0) {\n                  paddingBuf.push(`${divProps.paddingBottom}px`);\n                } else {\n                  paddingBuf.push(0);\n                }\n\n                if (divProps.paddingLeft > 0) {\n                  paddingBuf.push(`${divProps.paddingLeft / divProps.scale}px`);\n                  transformBuf.push(`translateX(${-divProps.paddingLeft / divProps.scale}px)`);\n                } else {\n                  paddingBuf.push(0);\n                }\n\n                div.style.padding = paddingBuf.join(\" \");\n\n                if (transformBuf.length) {\n                  div.style.transform = transformBuf.join(\" \");\n                }\n              } else {\n                div.style.padding = null;\n                div.style.transform = divProps.originalTransform;\n              }\n            }\n          }\n\n        }\n\n        function renderTextLayer(renderParameters) {\n          const task = new TextLayerRenderTask({\n            textContent: renderParameters.textContent,\n            textContentStream: renderParameters.textContentStream,\n            container: renderParameters.container,\n            viewport: renderParameters.viewport,\n            textDivs: renderParameters.textDivs,\n            textContentItemsStr: renderParameters.textContentItemsStr,\n            enhanceTextSelection: renderParameters.enhanceTextSelection\n          });\n\n          task._render(renderParameters.timeout);\n\n          return task;\n        }\n        /***/\n\n      },\n      /* 20 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.SVGGraphics = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _is_node = __w_pdfjs_require__(4);\n\n        let SVGGraphics = class {\n          constructor() {\n            (0, _util.unreachable)(\"Not implemented: SVGGraphics\");\n          }\n\n        };\n        exports.SVGGraphics = SVGGraphics;\n        {\n          const SVG_DEFAULTS = {\n            fontStyle: \"normal\",\n            fontWeight: \"normal\",\n            fillColor: \"#000000\"\n          };\n          const XML_NS = \"http://www.w3.org/XML/1998/namespace\";\n          const XLINK_NS = \"http://www.w3.org/1999/xlink\";\n          const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n          const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n\n          const convertImgDataToPng = function () {\n            const PNG_HEADER = new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]);\n            const CHUNK_WRAPPER_SIZE = 12;\n            const crcTable = new Int32Array(256);\n\n            for (let i = 0; i < 256; i++) {\n              let c = i;\n\n              for (let h = 0; h < 8; h++) {\n                if (c & 1) {\n                  c = 0xedb88320 ^ c >> 1 & 0x7fffffff;\n                } else {\n                  c = c >> 1 & 0x7fffffff;\n                }\n              }\n\n              crcTable[i] = c;\n            }\n\n            function crc32(data, start, end) {\n              let crc = -1;\n\n              for (let i = start; i < end; i++) {\n                const a = (crc ^ data[i]) & 0xff;\n                const b = crcTable[a];\n                crc = crc >>> 8 ^ b;\n              }\n\n              return crc ^ -1;\n            }\n\n            function writePngChunk(type, body, data, offset) {\n              let p = offset;\n              const len = body.length;\n              data[p] = len >> 24 & 0xff;\n              data[p + 1] = len >> 16 & 0xff;\n              data[p + 2] = len >> 8 & 0xff;\n              data[p + 3] = len & 0xff;\n              p += 4;\n              data[p] = type.charCodeAt(0) & 0xff;\n              data[p + 1] = type.charCodeAt(1) & 0xff;\n              data[p + 2] = type.charCodeAt(2) & 0xff;\n              data[p + 3] = type.charCodeAt(3) & 0xff;\n              p += 4;\n              data.set(body, p);\n              p += body.length;\n              const crc = crc32(data, offset + 4, p);\n              data[p] = crc >> 24 & 0xff;\n              data[p + 1] = crc >> 16 & 0xff;\n              data[p + 2] = crc >> 8 & 0xff;\n              data[p + 3] = crc & 0xff;\n            }\n\n            function adler32(data, start, end) {\n              let a = 1;\n              let b = 0;\n\n              for (let i = start; i < end; ++i) {\n                a = (a + (data[i] & 0xff)) % 65521;\n                b = (b + a) % 65521;\n              }\n\n              return b << 16 | a;\n            }\n\n            function deflateSync(literals) {\n              if (!_is_node.isNodeJS) {\n                return deflateSyncUncompressed(literals);\n              }\n\n              try {\n                let input;\n\n                if (parseInt(process.versions.node) >= 8) {\n                  input = literals;\n                } else {\n                  input = Buffer.from(literals);\n                }\n\n                const output = require(\"zlib\").deflateSync(input, {\n                  level: 9\n                });\n\n                return output instanceof Uint8Array ? output : new Uint8Array(output);\n              } catch (e) {\n                (0, _util.warn)(\"Not compressing PNG because zlib.deflateSync is unavailable: \" + e);\n              }\n\n              return deflateSyncUncompressed(literals);\n            }\n\n            function deflateSyncUncompressed(literals) {\n              let len = literals.length;\n              const maxBlockLength = 0xffff;\n              const deflateBlocks = Math.ceil(len / maxBlockLength);\n              const idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);\n              let pi = 0;\n              idat[pi++] = 0x78;\n              idat[pi++] = 0x9c;\n              let pos = 0;\n\n              while (len > maxBlockLength) {\n                idat[pi++] = 0x00;\n                idat[pi++] = 0xff;\n                idat[pi++] = 0xff;\n                idat[pi++] = 0x00;\n                idat[pi++] = 0x00;\n                idat.set(literals.subarray(pos, pos + maxBlockLength), pi);\n                pi += maxBlockLength;\n                pos += maxBlockLength;\n                len -= maxBlockLength;\n              }\n\n              idat[pi++] = 0x01;\n              idat[pi++] = len & 0xff;\n              idat[pi++] = len >> 8 & 0xff;\n              idat[pi++] = ~len & 0xffff & 0xff;\n              idat[pi++] = (~len & 0xffff) >> 8 & 0xff;\n              idat.set(literals.subarray(pos), pi);\n              pi += literals.length - pos;\n              const adler = adler32(literals, 0, literals.length);\n              idat[pi++] = adler >> 24 & 0xff;\n              idat[pi++] = adler >> 16 & 0xff;\n              idat[pi++] = adler >> 8 & 0xff;\n              idat[pi++] = adler & 0xff;\n              return idat;\n            }\n\n            function encode(imgData, kind, forceDataSchema, isMask) {\n              const width = imgData.width;\n              const height = imgData.height;\n              let bitDepth, colorType, lineSize;\n              const bytes = imgData.data;\n\n              switch (kind) {\n                case _util.ImageKind.GRAYSCALE_1BPP:\n                  colorType = 0;\n                  bitDepth = 1;\n                  lineSize = width + 7 >> 3;\n                  break;\n\n                case _util.ImageKind.RGB_24BPP:\n                  colorType = 2;\n                  bitDepth = 8;\n                  lineSize = width * 3;\n                  break;\n\n                case _util.ImageKind.RGBA_32BPP:\n                  colorType = 6;\n                  bitDepth = 8;\n                  lineSize = width * 4;\n                  break;\n\n                default:\n                  throw new Error(\"invalid format\");\n              }\n\n              const literals = new Uint8Array((1 + lineSize) * height);\n              let offsetLiterals = 0,\n                  offsetBytes = 0;\n\n              for (let y = 0; y < height; ++y) {\n                literals[offsetLiterals++] = 0;\n                literals.set(bytes.subarray(offsetBytes, offsetBytes + lineSize), offsetLiterals);\n                offsetBytes += lineSize;\n                offsetLiterals += lineSize;\n              }\n\n              if (kind === _util.ImageKind.GRAYSCALE_1BPP && isMask) {\n                offsetLiterals = 0;\n\n                for (let y = 0; y < height; y++) {\n                  offsetLiterals++;\n\n                  for (let i = 0; i < lineSize; i++) {\n                    literals[offsetLiterals++] ^= 0xff;\n                  }\n                }\n              }\n\n              const ihdr = new Uint8Array([width >> 24 & 0xff, width >> 16 & 0xff, width >> 8 & 0xff, width & 0xff, height >> 24 & 0xff, height >> 16 & 0xff, height >> 8 & 0xff, height & 0xff, bitDepth, colorType, 0x00, 0x00, 0x00]);\n              const idat = deflateSync(literals);\n              const pngLength = PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;\n              const data = new Uint8Array(pngLength);\n              let offset = 0;\n              data.set(PNG_HEADER, offset);\n              offset += PNG_HEADER.length;\n              writePngChunk(\"IHDR\", ihdr, data, offset);\n              offset += CHUNK_WRAPPER_SIZE + ihdr.length;\n              writePngChunk(\"IDATA\", idat, data, offset);\n              offset += CHUNK_WRAPPER_SIZE + idat.length;\n              writePngChunk(\"IEND\", new Uint8Array(0), data, offset);\n              return (0, _util.createObjectURL)(data, \"image/png\", forceDataSchema);\n            }\n\n            return function convertImgDataToPng(imgData, forceDataSchema, isMask) {\n              const kind = imgData.kind === undefined ? _util.ImageKind.GRAYSCALE_1BPP : imgData.kind;\n              return encode(imgData, kind, forceDataSchema, isMask);\n            };\n          }();\n\n          class SVGExtraState {\n            constructor() {\n              this.fontSizeScale = 1;\n              this.fontWeight = SVG_DEFAULTS.fontWeight;\n              this.fontSize = 0;\n              this.textMatrix = _util.IDENTITY_MATRIX;\n              this.fontMatrix = _util.FONT_IDENTITY_MATRIX;\n              this.leading = 0;\n              this.textRenderingMode = _util.TextRenderingMode.FILL;\n              this.textMatrixScale = 1;\n              this.x = 0;\n              this.y = 0;\n              this.lineX = 0;\n              this.lineY = 0;\n              this.charSpacing = 0;\n              this.wordSpacing = 0;\n              this.textHScale = 1;\n              this.textRise = 0;\n              this.fillColor = SVG_DEFAULTS.fillColor;\n              this.strokeColor = \"#000000\";\n              this.fillAlpha = 1;\n              this.strokeAlpha = 1;\n              this.lineWidth = 1;\n              this.lineJoin = \"\";\n              this.lineCap = \"\";\n              this.miterLimit = 0;\n              this.dashArray = [];\n              this.dashPhase = 0;\n              this.dependencies = [];\n              this.activeClipUrl = null;\n              this.clipGroup = null;\n              this.maskId = \"\";\n            }\n\n            clone() {\n              return Object.create(this);\n            }\n\n            setCurrentPoint(x, y) {\n              this.x = x;\n              this.y = y;\n            }\n\n          }\n\n          function opListToTree(opList) {\n            let opTree = [];\n            const tmp = [];\n\n            for (const opListElement of opList) {\n              if (opListElement.fn === \"save\") {\n                opTree.push({\n                  fnId: 92,\n                  fn: \"group\",\n                  items: []\n                });\n                tmp.push(opTree);\n                opTree = opTree[opTree.length - 1].items;\n                continue;\n              }\n\n              if (opListElement.fn === \"restore\") {\n                opTree = tmp.pop();\n              } else {\n                opTree.push(opListElement);\n              }\n            }\n\n            return opTree;\n          }\n\n          function pf(value) {\n            if (Number.isInteger(value)) {\n              return value.toString();\n            }\n\n            const s = value.toFixed(10);\n            let i = s.length - 1;\n\n            if (s[i] !== \"0\") {\n              return s;\n            }\n\n            do {\n              i--;\n            } while (s[i] === \"0\");\n\n            return s.substring(0, s[i] === \".\" ? i : i + 1);\n          }\n\n          function pm(m) {\n            if (m[4] === 0 && m[5] === 0) {\n              if (m[1] === 0 && m[2] === 0) {\n                if (m[0] === 1 && m[3] === 1) {\n                  return \"\";\n                }\n\n                return `scale(${pf(m[0])} ${pf(m[3])})`;\n              }\n\n              if (m[0] === m[3] && m[1] === -m[2]) {\n                const a = Math.acos(m[0]) * 180 / Math.PI;\n                return `rotate(${pf(a)})`;\n              }\n            } else {\n              if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {\n                return `translate(${pf(m[4])} ${pf(m[5])})`;\n              }\n            }\n\n            return `matrix(${pf(m[0])} ${pf(m[1])} ${pf(m[2])} ${pf(m[3])} ${pf(m[4])} ` + `${pf(m[5])})`;\n          }\n\n          let clipCount = 0;\n          let maskCount = 0;\n          let shadingCount = 0;\n          exports.SVGGraphics = SVGGraphics = class {\n            constructor(commonObjs, objs) {\n              let forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n              this.svgFactory = new _display_utils.DOMSVGFactory();\n              this.current = new SVGExtraState();\n              this.transformMatrix = _util.IDENTITY_MATRIX;\n              this.transformStack = [];\n              this.extraStack = [];\n              this.commonObjs = commonObjs;\n              this.objs = objs;\n              this.pendingClip = null;\n              this.pendingEOFill = false;\n              this.embedFonts = false;\n              this.embeddedFonts = Object.create(null);\n              this.cssStyle = null;\n              this.forceDataSchema = !!forceDataSchema;\n              this._operatorIdMapping = [];\n\n              for (const op in _util.OPS) {\n                this._operatorIdMapping[_util.OPS[op]] = op;\n              }\n            }\n\n            save() {\n              this.transformStack.push(this.transformMatrix);\n              const old = this.current;\n              this.extraStack.push(old);\n              this.current = old.clone();\n            }\n\n            restore() {\n              this.transformMatrix = this.transformStack.pop();\n              this.current = this.extraStack.pop();\n              this.pendingClip = null;\n              this.tgrp = null;\n            }\n\n            group(items) {\n              this.save();\n              this.executeOpTree(items);\n              this.restore();\n            }\n\n            loadDependencies(operatorList) {\n              const fnArray = operatorList.fnArray;\n              const argsArray = operatorList.argsArray;\n\n              for (let i = 0, ii = fnArray.length; i < ii; i++) {\n                if (fnArray[i] !== _util.OPS.dependency) {\n                  continue;\n                }\n\n                for (const obj of argsArray[i]) {\n                  const objsPool = obj.startsWith(\"g_\") ? this.commonObjs : this.objs;\n                  const promise = new Promise(resolve => {\n                    objsPool.get(obj, resolve);\n                  });\n                  this.current.dependencies.push(promise);\n                }\n              }\n\n              return Promise.all(this.current.dependencies);\n            }\n\n            transform(a, b, c, d, e, f) {\n              const transformMatrix = [a, b, c, d, e, f];\n              this.transformMatrix = _util.Util.transform(this.transformMatrix, transformMatrix);\n              this.tgrp = null;\n            }\n\n            getSVG(operatorList, viewport) {\n              this.viewport = viewport;\n\n              const svgElement = this._initialize(viewport);\n\n              return this.loadDependencies(operatorList).then(() => {\n                this.transformMatrix = _util.IDENTITY_MATRIX;\n                this.executeOpTree(this.convertOpList(operatorList));\n                return svgElement;\n              });\n            }\n\n            convertOpList(operatorList) {\n              const operatorIdMapping = this._operatorIdMapping;\n              const argsArray = operatorList.argsArray;\n              const fnArray = operatorList.fnArray;\n              const opList = [];\n\n              for (let i = 0, ii = fnArray.length; i < ii; i++) {\n                const fnId = fnArray[i];\n                opList.push({\n                  fnId,\n                  fn: operatorIdMapping[fnId],\n                  args: argsArray[i]\n                });\n              }\n\n              return opListToTree(opList);\n            }\n\n            executeOpTree(opTree) {\n              for (const opTreeElement of opTree) {\n                const fn = opTreeElement.fn;\n                const fnId = opTreeElement.fnId;\n                const args = opTreeElement.args;\n\n                switch (fnId | 0) {\n                  case _util.OPS.beginText:\n                    this.beginText();\n                    break;\n\n                  case _util.OPS.dependency:\n                    break;\n\n                  case _util.OPS.setLeading:\n                    this.setLeading(args);\n                    break;\n\n                  case _util.OPS.setLeadingMoveText:\n                    this.setLeadingMoveText(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.setFont:\n                    this.setFont(args);\n                    break;\n\n                  case _util.OPS.showText:\n                    this.showText(args[0]);\n                    break;\n\n                  case _util.OPS.showSpacedText:\n                    this.showText(args[0]);\n                    break;\n\n                  case _util.OPS.endText:\n                    this.endText();\n                    break;\n\n                  case _util.OPS.moveText:\n                    this.moveText(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.setCharSpacing:\n                    this.setCharSpacing(args[0]);\n                    break;\n\n                  case _util.OPS.setWordSpacing:\n                    this.setWordSpacing(args[0]);\n                    break;\n\n                  case _util.OPS.setHScale:\n                    this.setHScale(args[0]);\n                    break;\n\n                  case _util.OPS.setTextMatrix:\n                    this.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);\n                    break;\n\n                  case _util.OPS.setTextRise:\n                    this.setTextRise(args[0]);\n                    break;\n\n                  case _util.OPS.setTextRenderingMode:\n                    this.setTextRenderingMode(args[0]);\n                    break;\n\n                  case _util.OPS.setLineWidth:\n                    this.setLineWidth(args[0]);\n                    break;\n\n                  case _util.OPS.setLineJoin:\n                    this.setLineJoin(args[0]);\n                    break;\n\n                  case _util.OPS.setLineCap:\n                    this.setLineCap(args[0]);\n                    break;\n\n                  case _util.OPS.setMiterLimit:\n                    this.setMiterLimit(args[0]);\n                    break;\n\n                  case _util.OPS.setFillRGBColor:\n                    this.setFillRGBColor(args[0], args[1], args[2]);\n                    break;\n\n                  case _util.OPS.setStrokeRGBColor:\n                    this.setStrokeRGBColor(args[0], args[1], args[2]);\n                    break;\n\n                  case _util.OPS.setStrokeColorN:\n                    this.setStrokeColorN(args);\n                    break;\n\n                  case _util.OPS.setFillColorN:\n                    this.setFillColorN(args);\n                    break;\n\n                  case _util.OPS.shadingFill:\n                    this.shadingFill(args[0]);\n                    break;\n\n                  case _util.OPS.setDash:\n                    this.setDash(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.setRenderingIntent:\n                    this.setRenderingIntent(args[0]);\n                    break;\n\n                  case _util.OPS.setFlatness:\n                    this.setFlatness(args[0]);\n                    break;\n\n                  case _util.OPS.setGState:\n                    this.setGState(args[0]);\n                    break;\n\n                  case _util.OPS.fill:\n                    this.fill();\n                    break;\n\n                  case _util.OPS.eoFill:\n                    this.eoFill();\n                    break;\n\n                  case _util.OPS.stroke:\n                    this.stroke();\n                    break;\n\n                  case _util.OPS.fillStroke:\n                    this.fillStroke();\n                    break;\n\n                  case _util.OPS.eoFillStroke:\n                    this.eoFillStroke();\n                    break;\n\n                  case _util.OPS.clip:\n                    this.clip(\"nonzero\");\n                    break;\n\n                  case _util.OPS.eoClip:\n                    this.clip(\"evenodd\");\n                    break;\n\n                  case _util.OPS.paintSolidColorImageMask:\n                    this.paintSolidColorImageMask();\n                    break;\n\n                  case _util.OPS.paintImageXObject:\n                    this.paintImageXObject(args[0]);\n                    break;\n\n                  case _util.OPS.paintInlineImageXObject:\n                    this.paintInlineImageXObject(args[0]);\n                    break;\n\n                  case _util.OPS.paintImageMaskXObject:\n                    this.paintImageMaskXObject(args[0]);\n                    break;\n\n                  case _util.OPS.paintFormXObjectBegin:\n                    this.paintFormXObjectBegin(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.paintFormXObjectEnd:\n                    this.paintFormXObjectEnd();\n                    break;\n\n                  case _util.OPS.closePath:\n                    this.closePath();\n                    break;\n\n                  case _util.OPS.closeStroke:\n                    this.closeStroke();\n                    break;\n\n                  case _util.OPS.closeFillStroke:\n                    this.closeFillStroke();\n                    break;\n\n                  case _util.OPS.closeEOFillStroke:\n                    this.closeEOFillStroke();\n                    break;\n\n                  case _util.OPS.nextLine:\n                    this.nextLine();\n                    break;\n\n                  case _util.OPS.transform:\n                    this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);\n                    break;\n\n                  case _util.OPS.constructPath:\n                    this.constructPath(args[0], args[1]);\n                    break;\n\n                  case _util.OPS.endPath:\n                    this.endPath();\n                    break;\n\n                  case 92:\n                    this.group(opTreeElement.items);\n                    break;\n\n                  default:\n                    (0, _util.warn)(`Unimplemented operator ${fn}`);\n                    break;\n                }\n              }\n            }\n\n            setWordSpacing(wordSpacing) {\n              this.current.wordSpacing = wordSpacing;\n            }\n\n            setCharSpacing(charSpacing) {\n              this.current.charSpacing = charSpacing;\n            }\n\n            nextLine() {\n              this.moveText(0, this.current.leading);\n            }\n\n            setTextMatrix(a, b, c, d, e, f) {\n              const current = this.current;\n              current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];\n              current.textMatrixScale = Math.hypot(a, b);\n              current.x = current.lineX = 0;\n              current.y = current.lineY = 0;\n              current.xcoords = [];\n              current.ycoords = [];\n              current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n              current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n              current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n              current.txtElement = this.svgFactory.createElement(\"svg:text\");\n              current.txtElement.appendChild(current.tspan);\n            }\n\n            beginText() {\n              const current = this.current;\n              current.x = current.lineX = 0;\n              current.y = current.lineY = 0;\n              current.textMatrix = _util.IDENTITY_MATRIX;\n              current.lineMatrix = _util.IDENTITY_MATRIX;\n              current.textMatrixScale = 1;\n              current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              current.txtElement = this.svgFactory.createElement(\"svg:text\");\n              current.txtgrp = this.svgFactory.createElement(\"svg:g\");\n              current.xcoords = [];\n              current.ycoords = [];\n            }\n\n            moveText(x, y) {\n              const current = this.current;\n              current.x = current.lineX += x;\n              current.y = current.lineY += y;\n              current.xcoords = [];\n              current.ycoords = [];\n              current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n              current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n              current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n            }\n\n            showText(glyphs) {\n              const current = this.current;\n              const font = current.font;\n              const fontSize = current.fontSize;\n\n              if (fontSize === 0) {\n                return;\n              }\n\n              const fontSizeScale = current.fontSizeScale;\n              const charSpacing = current.charSpacing;\n              const wordSpacing = current.wordSpacing;\n              const fontDirection = current.fontDirection;\n              const textHScale = current.textHScale * fontDirection;\n              const vertical = font.vertical;\n              const spacingDir = vertical ? 1 : -1;\n              const defaultVMetrics = font.defaultVMetrics;\n              const widthAdvanceScale = fontSize * current.fontMatrix[0];\n              let x = 0;\n\n              for (const glyph of glyphs) {\n                if (glyph === null) {\n                  x += fontDirection * wordSpacing;\n                  continue;\n                } else if ((0, _util.isNum)(glyph)) {\n                  x += spacingDir * glyph * fontSize / 1000;\n                  continue;\n                }\n\n                const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n                const character = glyph.fontChar;\n                let scaledX, scaledY;\n                let width = glyph.width;\n\n                if (vertical) {\n                  let vx;\n                  const vmetric = glyph.vmetric || defaultVMetrics;\n                  vx = glyph.vmetric ? vmetric[1] : width * 0.5;\n                  vx = -vx * widthAdvanceScale;\n                  const vy = vmetric[2] * widthAdvanceScale;\n                  width = vmetric ? -vmetric[0] : width;\n                  scaledX = vx / fontSizeScale;\n                  scaledY = (x + vy) / fontSizeScale;\n                } else {\n                  scaledX = x / fontSizeScale;\n                  scaledY = 0;\n                }\n\n                if (glyph.isInFont || font.missingFile) {\n                  current.xcoords.push(current.x + scaledX);\n\n                  if (vertical) {\n                    current.ycoords.push(-current.y + scaledY);\n                  }\n\n                  current.tspan.textContent += character;\n                } else {}\n\n                let charWidth;\n\n                if (vertical) {\n                  charWidth = width * widthAdvanceScale - spacing * fontDirection;\n                } else {\n                  charWidth = width * widthAdvanceScale + spacing * fontDirection;\n                }\n\n                x += charWidth;\n              }\n\n              current.tspan.setAttributeNS(null, \"x\", current.xcoords.map(pf).join(\" \"));\n\n              if (vertical) {\n                current.tspan.setAttributeNS(null, \"y\", current.ycoords.map(pf).join(\" \"));\n              } else {\n                current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n              }\n\n              if (vertical) {\n                current.y -= x;\n              } else {\n                current.x += x * textHScale;\n              }\n\n              current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n              current.tspan.setAttributeNS(null, \"font-size\", `${pf(current.fontSize)}px`);\n\n              if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {\n                current.tspan.setAttributeNS(null, \"font-style\", current.fontStyle);\n              }\n\n              if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {\n                current.tspan.setAttributeNS(null, \"font-weight\", current.fontWeight);\n              }\n\n              const fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;\n\n              if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                if (current.fillColor !== SVG_DEFAULTS.fillColor) {\n                  current.tspan.setAttributeNS(null, \"fill\", current.fillColor);\n                }\n\n                if (current.fillAlpha < 1) {\n                  current.tspan.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n                }\n              } else if (current.textRenderingMode === _util.TextRenderingMode.ADD_TO_PATH) {\n                current.tspan.setAttributeNS(null, \"fill\", \"transparent\");\n              } else {\n                current.tspan.setAttributeNS(null, \"fill\", \"none\");\n              }\n\n              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {\n                const lineWidthScale = 1 / (current.textMatrixScale || 1);\n\n                this._setStrokeAttributes(current.tspan, lineWidthScale);\n              }\n\n              let textMatrix = current.textMatrix;\n\n              if (current.textRise !== 0) {\n                textMatrix = textMatrix.slice();\n                textMatrix[5] += current.textRise;\n              }\n\n              current.txtElement.setAttributeNS(null, \"transform\", `${pm(textMatrix)} scale(${pf(textHScale)}, -1)`);\n              current.txtElement.setAttributeNS(XML_NS, \"xml:space\", \"preserve\");\n              current.txtElement.appendChild(current.tspan);\n              current.txtgrp.appendChild(current.txtElement);\n\n              this._ensureTransformGroup().appendChild(current.txtElement);\n            }\n\n            setLeadingMoveText(x, y) {\n              this.setLeading(-y);\n              this.moveText(x, y);\n            }\n\n            addFontStyle(fontObj) {\n              if (!fontObj.data) {\n                throw new Error(\"addFontStyle: No font data available, \" + 'ensure that the \"fontExtraProperties\" API parameter is set.');\n              }\n\n              if (!this.cssStyle) {\n                this.cssStyle = this.svgFactory.createElement(\"svg:style\");\n                this.cssStyle.setAttributeNS(null, \"type\", \"text/css\");\n                this.defs.appendChild(this.cssStyle);\n              }\n\n              const url = (0, _util.createObjectURL)(fontObj.data, fontObj.mimetype, this.forceDataSchema);\n              this.cssStyle.textContent += `@font-face { font-family: \"${fontObj.loadedName}\";` + ` src: url(${url}); }\\n`;\n            }\n\n            setFont(details) {\n              const current = this.current;\n              const fontObj = this.commonObjs.get(details[0]);\n              let size = details[1];\n              current.font = fontObj;\n\n              if (this.embedFonts && !fontObj.missingFile && !this.embeddedFonts[fontObj.loadedName]) {\n                this.addFontStyle(fontObj);\n                this.embeddedFonts[fontObj.loadedName] = fontObj;\n              }\n\n              current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;\n              let bold = \"normal\";\n\n              if (fontObj.black) {\n                bold = \"900\";\n              } else if (fontObj.bold) {\n                bold = \"bold\";\n              }\n\n              const italic = fontObj.italic ? \"italic\" : \"normal\";\n\n              if (size < 0) {\n                size = -size;\n                current.fontDirection = -1;\n              } else {\n                current.fontDirection = 1;\n              }\n\n              current.fontSize = size;\n              current.fontFamily = fontObj.loadedName;\n              current.fontWeight = bold;\n              current.fontStyle = italic;\n              current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n              current.xcoords = [];\n              current.ycoords = [];\n            }\n\n            endText() {\n              const current = this.current;\n\n              if (current.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG && current.txtElement?.hasChildNodes()) {\n                current.element = current.txtElement;\n                this.clip(\"nonzero\");\n                this.endPath();\n              }\n            }\n\n            setLineWidth(width) {\n              if (width > 0) {\n                this.current.lineWidth = width;\n              }\n            }\n\n            setLineCap(style) {\n              this.current.lineCap = LINE_CAP_STYLES[style];\n            }\n\n            setLineJoin(style) {\n              this.current.lineJoin = LINE_JOIN_STYLES[style];\n            }\n\n            setMiterLimit(limit) {\n              this.current.miterLimit = limit;\n            }\n\n            setStrokeAlpha(strokeAlpha) {\n              this.current.strokeAlpha = strokeAlpha;\n            }\n\n            setStrokeRGBColor(r, g, b) {\n              this.current.strokeColor = _util.Util.makeHexColor(r, g, b);\n            }\n\n            setFillAlpha(fillAlpha) {\n              this.current.fillAlpha = fillAlpha;\n            }\n\n            setFillRGBColor(r, g, b) {\n              this.current.fillColor = _util.Util.makeHexColor(r, g, b);\n              this.current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n              this.current.xcoords = [];\n              this.current.ycoords = [];\n            }\n\n            setStrokeColorN(args) {\n              this.current.strokeColor = this._makeColorN_Pattern(args);\n            }\n\n            setFillColorN(args) {\n              this.current.fillColor = this._makeColorN_Pattern(args);\n            }\n\n            shadingFill(args) {\n              const width = this.viewport.width;\n              const height = this.viewport.height;\n\n              const inv = _util.Util.inverseTransform(this.transformMatrix);\n\n              const bl = _util.Util.applyTransform([0, 0], inv);\n\n              const br = _util.Util.applyTransform([0, height], inv);\n\n              const ul = _util.Util.applyTransform([width, 0], inv);\n\n              const ur = _util.Util.applyTransform([width, height], inv);\n\n              const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n              const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n              const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n              const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n              const rect = this.svgFactory.createElement(\"svg:rect\");\n              rect.setAttributeNS(null, \"x\", x0);\n              rect.setAttributeNS(null, \"y\", y0);\n              rect.setAttributeNS(null, \"width\", x1 - x0);\n              rect.setAttributeNS(null, \"height\", y1 - y0);\n              rect.setAttributeNS(null, \"fill\", this._makeShadingPattern(args));\n\n              if (this.current.fillAlpha < 1) {\n                rect.setAttributeNS(null, \"fill-opacity\", this.current.fillAlpha);\n              }\n\n              this._ensureTransformGroup().appendChild(rect);\n            }\n\n            _makeColorN_Pattern(args) {\n              if (args[0] === \"TilingPattern\") {\n                return this._makeTilingPattern(args);\n              }\n\n              return this._makeShadingPattern(args);\n            }\n\n            _makeTilingPattern(args) {\n              const color = args[1];\n              const operatorList = args[2];\n              const matrix = args[3] || _util.IDENTITY_MATRIX;\n              const [x0, y0, x1, y1] = args[4];\n              const xstep = args[5];\n              const ystep = args[6];\n              const paintType = args[7];\n              const tilingId = `shading${shadingCount++}`;\n\n              const [tx0, ty0, tx1, ty1] = _util.Util.normalizeRect([..._util.Util.applyTransform([x0, y0], matrix), ..._util.Util.applyTransform([x1, y1], matrix)]);\n\n              const [xscale, yscale] = _util.Util.singularValueDecompose2dScale(matrix);\n\n              const txstep = xstep * xscale;\n              const tystep = ystep * yscale;\n              const tiling = this.svgFactory.createElement(\"svg:pattern\");\n              tiling.setAttributeNS(null, \"id\", tilingId);\n              tiling.setAttributeNS(null, \"patternUnits\", \"userSpaceOnUse\");\n              tiling.setAttributeNS(null, \"width\", txstep);\n              tiling.setAttributeNS(null, \"height\", tystep);\n              tiling.setAttributeNS(null, \"x\", `${tx0}`);\n              tiling.setAttributeNS(null, \"y\", `${ty0}`);\n              const svg = this.svg;\n              const transformMatrix = this.transformMatrix;\n              const fillColor = this.current.fillColor;\n              const strokeColor = this.current.strokeColor;\n              const bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);\n              this.svg = bbox;\n              this.transformMatrix = matrix;\n\n              if (paintType === 2) {\n                const cssColor = _util.Util.makeHexColor(...color);\n\n                this.current.fillColor = cssColor;\n                this.current.strokeColor = cssColor;\n              }\n\n              this.executeOpTree(this.convertOpList(operatorList));\n              this.svg = svg;\n              this.transformMatrix = transformMatrix;\n              this.current.fillColor = fillColor;\n              this.current.strokeColor = strokeColor;\n              tiling.appendChild(bbox.childNodes[0]);\n              this.defs.appendChild(tiling);\n              return `url(#${tilingId})`;\n            }\n\n            _makeShadingPattern(args) {\n              switch (args[0]) {\n                case \"RadialAxial\":\n                  const shadingId = `shading${shadingCount++}`;\n                  const colorStops = args[3];\n                  let gradient;\n\n                  switch (args[1]) {\n                    case \"axial\":\n                      const point0 = args[4];\n                      const point1 = args[5];\n                      gradient = this.svgFactory.createElement(\"svg:linearGradient\");\n                      gradient.setAttributeNS(null, \"id\", shadingId);\n                      gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n                      gradient.setAttributeNS(null, \"x1\", point0[0]);\n                      gradient.setAttributeNS(null, \"y1\", point0[1]);\n                      gradient.setAttributeNS(null, \"x2\", point1[0]);\n                      gradient.setAttributeNS(null, \"y2\", point1[1]);\n                      break;\n\n                    case \"radial\":\n                      const focalPoint = args[4];\n                      const circlePoint = args[5];\n                      const focalRadius = args[6];\n                      const circleRadius = args[7];\n                      gradient = this.svgFactory.createElement(\"svg:radialGradient\");\n                      gradient.setAttributeNS(null, \"id\", shadingId);\n                      gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n                      gradient.setAttributeNS(null, \"cx\", circlePoint[0]);\n                      gradient.setAttributeNS(null, \"cy\", circlePoint[1]);\n                      gradient.setAttributeNS(null, \"r\", circleRadius);\n                      gradient.setAttributeNS(null, \"fx\", focalPoint[0]);\n                      gradient.setAttributeNS(null, \"fy\", focalPoint[1]);\n                      gradient.setAttributeNS(null, \"fr\", focalRadius);\n                      break;\n\n                    default:\n                      throw new Error(`Unknown RadialAxial type: ${args[1]}`);\n                  }\n\n                  for (const colorStop of colorStops) {\n                    const stop = this.svgFactory.createElement(\"svg:stop\");\n                    stop.setAttributeNS(null, \"offset\", colorStop[0]);\n                    stop.setAttributeNS(null, \"stop-color\", colorStop[1]);\n                    gradient.appendChild(stop);\n                  }\n\n                  this.defs.appendChild(gradient);\n                  return `url(#${shadingId})`;\n\n                case \"Mesh\":\n                  (0, _util.warn)(\"Unimplemented pattern Mesh\");\n                  return null;\n\n                case \"Dummy\":\n                  return \"hotpink\";\n\n                default:\n                  throw new Error(`Unknown IR type: ${args[0]}`);\n              }\n            }\n\n            setDash(dashArray, dashPhase) {\n              this.current.dashArray = dashArray;\n              this.current.dashPhase = dashPhase;\n            }\n\n            constructPath(ops, args) {\n              const current = this.current;\n              let x = current.x,\n                  y = current.y;\n              let d = [];\n              let j = 0;\n\n              for (const op of ops) {\n                switch (op | 0) {\n                  case _util.OPS.rectangle:\n                    x = args[j++];\n                    y = args[j++];\n                    const width = args[j++];\n                    const height = args[j++];\n                    const xw = x + width;\n                    const yh = y + height;\n                    d.push(\"M\", pf(x), pf(y), \"L\", pf(xw), pf(y), \"L\", pf(xw), pf(yh), \"L\", pf(x), pf(yh), \"Z\");\n                    break;\n\n                  case _util.OPS.moveTo:\n                    x = args[j++];\n                    y = args[j++];\n                    d.push(\"M\", pf(x), pf(y));\n                    break;\n\n                  case _util.OPS.lineTo:\n                    x = args[j++];\n                    y = args[j++];\n                    d.push(\"L\", pf(x), pf(y));\n                    break;\n\n                  case _util.OPS.curveTo:\n                    x = args[j + 4];\n                    y = args[j + 5];\n                    d.push(\"C\", pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]), pf(x), pf(y));\n                    j += 6;\n                    break;\n\n                  case _util.OPS.curveTo2:\n                    d.push(\"C\", pf(x), pf(y), pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]));\n                    x = args[j + 2];\n                    y = args[j + 3];\n                    j += 4;\n                    break;\n\n                  case _util.OPS.curveTo3:\n                    x = args[j + 2];\n                    y = args[j + 3];\n                    d.push(\"C\", pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));\n                    j += 4;\n                    break;\n\n                  case _util.OPS.closePath:\n                    d.push(\"Z\");\n                    break;\n                }\n              }\n\n              d = d.join(\" \");\n\n              if (current.path && ops.length > 0 && ops[0] !== _util.OPS.rectangle && ops[0] !== _util.OPS.moveTo) {\n                d = current.path.getAttributeNS(null, \"d\") + d;\n              } else {\n                current.path = this.svgFactory.createElement(\"svg:path\");\n\n                this._ensureTransformGroup().appendChild(current.path);\n              }\n\n              current.path.setAttributeNS(null, \"d\", d);\n              current.path.setAttributeNS(null, \"fill\", \"none\");\n              current.element = current.path;\n              current.setCurrentPoint(x, y);\n            }\n\n            endPath() {\n              const current = this.current;\n              current.path = null;\n\n              if (!this.pendingClip) {\n                return;\n              }\n\n              if (!current.element) {\n                this.pendingClip = null;\n                return;\n              }\n\n              const clipId = `clippath${clipCount++}`;\n              const clipPath = this.svgFactory.createElement(\"svg:clipPath\");\n              clipPath.setAttributeNS(null, \"id\", clipId);\n              clipPath.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n              const clipElement = current.element.cloneNode(true);\n\n              if (this.pendingClip === \"evenodd\") {\n                clipElement.setAttributeNS(null, \"clip-rule\", \"evenodd\");\n              } else {\n                clipElement.setAttributeNS(null, \"clip-rule\", \"nonzero\");\n              }\n\n              this.pendingClip = null;\n              clipPath.appendChild(clipElement);\n              this.defs.appendChild(clipPath);\n\n              if (current.activeClipUrl) {\n                current.clipGroup = null;\n\n                for (const prev of this.extraStack) {\n                  prev.clipGroup = null;\n                }\n\n                clipPath.setAttributeNS(null, \"clip-path\", current.activeClipUrl);\n              }\n\n              current.activeClipUrl = `url(#${clipId})`;\n              this.tgrp = null;\n            }\n\n            clip(type) {\n              this.pendingClip = type;\n            }\n\n            closePath() {\n              const current = this.current;\n\n              if (current.path) {\n                const d = `${current.path.getAttributeNS(null, \"d\")}Z`;\n                current.path.setAttributeNS(null, \"d\", d);\n              }\n            }\n\n            setLeading(leading) {\n              this.current.leading = -leading;\n            }\n\n            setTextRise(textRise) {\n              this.current.textRise = textRise;\n            }\n\n            setTextRenderingMode(textRenderingMode) {\n              this.current.textRenderingMode = textRenderingMode;\n            }\n\n            setHScale(scale) {\n              this.current.textHScale = scale / 100;\n            }\n\n            setRenderingIntent(intent) {}\n\n            setFlatness(flatness) {}\n\n            setGState(states) {\n              for (const [key, value] of states) {\n                switch (key) {\n                  case \"LW\":\n                    this.setLineWidth(value);\n                    break;\n\n                  case \"LC\":\n                    this.setLineCap(value);\n                    break;\n\n                  case \"LJ\":\n                    this.setLineJoin(value);\n                    break;\n\n                  case \"ML\":\n                    this.setMiterLimit(value);\n                    break;\n\n                  case \"D\":\n                    this.setDash(value[0], value[1]);\n                    break;\n\n                  case \"RI\":\n                    this.setRenderingIntent(value);\n                    break;\n\n                  case \"FL\":\n                    this.setFlatness(value);\n                    break;\n\n                  case \"Font\":\n                    this.setFont(value);\n                    break;\n\n                  case \"CA\":\n                    this.setStrokeAlpha(value);\n                    break;\n\n                  case \"ca\":\n                    this.setFillAlpha(value);\n                    break;\n\n                  default:\n                    (0, _util.warn)(`Unimplemented graphic state operator ${key}`);\n                    break;\n                }\n              }\n            }\n\n            fill() {\n              const current = this.current;\n\n              if (current.element) {\n                current.element.setAttributeNS(null, \"fill\", current.fillColor);\n                current.element.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n                this.endPath();\n              }\n            }\n\n            stroke() {\n              const current = this.current;\n\n              if (current.element) {\n                this._setStrokeAttributes(current.element);\n\n                current.element.setAttributeNS(null, \"fill\", \"none\");\n                this.endPath();\n              }\n            }\n\n            _setStrokeAttributes(element) {\n              let lineWidthScale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n              const current = this.current;\n              let dashArray = current.dashArray;\n\n              if (lineWidthScale !== 1 && dashArray.length > 0) {\n                dashArray = dashArray.map(function (value) {\n                  return lineWidthScale * value;\n                });\n              }\n\n              element.setAttributeNS(null, \"stroke\", current.strokeColor);\n              element.setAttributeNS(null, \"stroke-opacity\", current.strokeAlpha);\n              element.setAttributeNS(null, \"stroke-miterlimit\", pf(current.miterLimit));\n              element.setAttributeNS(null, \"stroke-linecap\", current.lineCap);\n              element.setAttributeNS(null, \"stroke-linejoin\", current.lineJoin);\n              element.setAttributeNS(null, \"stroke-width\", pf(lineWidthScale * current.lineWidth) + \"px\");\n              element.setAttributeNS(null, \"stroke-dasharray\", dashArray.map(pf).join(\" \"));\n              element.setAttributeNS(null, \"stroke-dashoffset\", pf(lineWidthScale * current.dashPhase) + \"px\");\n            }\n\n            eoFill() {\n              if (this.current.element) {\n                this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n              }\n\n              this.fill();\n            }\n\n            fillStroke() {\n              this.stroke();\n              this.fill();\n            }\n\n            eoFillStroke() {\n              if (this.current.element) {\n                this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n              }\n\n              this.fillStroke();\n            }\n\n            closeStroke() {\n              this.closePath();\n              this.stroke();\n            }\n\n            closeFillStroke() {\n              this.closePath();\n              this.fillStroke();\n            }\n\n            closeEOFillStroke() {\n              this.closePath();\n              this.eoFillStroke();\n            }\n\n            paintSolidColorImageMask() {\n              const rect = this.svgFactory.createElement(\"svg:rect\");\n              rect.setAttributeNS(null, \"x\", \"0\");\n              rect.setAttributeNS(null, \"y\", \"0\");\n              rect.setAttributeNS(null, \"width\", \"1px\");\n              rect.setAttributeNS(null, \"height\", \"1px\");\n              rect.setAttributeNS(null, \"fill\", this.current.fillColor);\n\n              this._ensureTransformGroup().appendChild(rect);\n            }\n\n            paintImageXObject(objId) {\n              const imgData = objId.startsWith(\"g_\") ? this.commonObjs.get(objId) : this.objs.get(objId);\n\n              if (!imgData) {\n                (0, _util.warn)(`Dependent image with object ID ${objId} is not ready yet`);\n                return;\n              }\n\n              this.paintInlineImageXObject(imgData);\n            }\n\n            paintInlineImageXObject(imgData, mask) {\n              const width = imgData.width;\n              const height = imgData.height;\n              const imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);\n              const cliprect = this.svgFactory.createElement(\"svg:rect\");\n              cliprect.setAttributeNS(null, \"x\", \"0\");\n              cliprect.setAttributeNS(null, \"y\", \"0\");\n              cliprect.setAttributeNS(null, \"width\", pf(width));\n              cliprect.setAttributeNS(null, \"height\", pf(height));\n              this.current.element = cliprect;\n              this.clip(\"nonzero\");\n              const imgEl = this.svgFactory.createElement(\"svg:image\");\n              imgEl.setAttributeNS(XLINK_NS, \"xlink:href\", imgSrc);\n              imgEl.setAttributeNS(null, \"x\", \"0\");\n              imgEl.setAttributeNS(null, \"y\", pf(-height));\n              imgEl.setAttributeNS(null, \"width\", pf(width) + \"px\");\n              imgEl.setAttributeNS(null, \"height\", pf(height) + \"px\");\n              imgEl.setAttributeNS(null, \"transform\", `scale(${pf(1 / width)} ${pf(-1 / height)})`);\n\n              if (mask) {\n                mask.appendChild(imgEl);\n              } else {\n                this._ensureTransformGroup().appendChild(imgEl);\n              }\n            }\n\n            paintImageMaskXObject(imgData) {\n              const current = this.current;\n              const width = imgData.width;\n              const height = imgData.height;\n              const fillColor = current.fillColor;\n              current.maskId = `mask${maskCount++}`;\n              const mask = this.svgFactory.createElement(\"svg:mask\");\n              mask.setAttributeNS(null, \"id\", current.maskId);\n              const rect = this.svgFactory.createElement(\"svg:rect\");\n              rect.setAttributeNS(null, \"x\", \"0\");\n              rect.setAttributeNS(null, \"y\", \"0\");\n              rect.setAttributeNS(null, \"width\", pf(width));\n              rect.setAttributeNS(null, \"height\", pf(height));\n              rect.setAttributeNS(null, \"fill\", fillColor);\n              rect.setAttributeNS(null, \"mask\", `url(#${current.maskId})`);\n              this.defs.appendChild(mask);\n\n              this._ensureTransformGroup().appendChild(rect);\n\n              this.paintInlineImageXObject(imgData, mask);\n            }\n\n            paintFormXObjectBegin(matrix, bbox) {\n              if (Array.isArray(matrix) && matrix.length === 6) {\n                this.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\n              }\n\n              if (bbox) {\n                const width = bbox[2] - bbox[0];\n                const height = bbox[3] - bbox[1];\n                const cliprect = this.svgFactory.createElement(\"svg:rect\");\n                cliprect.setAttributeNS(null, \"x\", bbox[0]);\n                cliprect.setAttributeNS(null, \"y\", bbox[1]);\n                cliprect.setAttributeNS(null, \"width\", pf(width));\n                cliprect.setAttributeNS(null, \"height\", pf(height));\n                this.current.element = cliprect;\n                this.clip(\"nonzero\");\n                this.endPath();\n              }\n            }\n\n            paintFormXObjectEnd() {}\n\n            _initialize(viewport) {\n              const svg = this.svgFactory.create(viewport.width, viewport.height);\n              const definitions = this.svgFactory.createElement(\"svg:defs\");\n              svg.appendChild(definitions);\n              this.defs = definitions;\n              const rootGroup = this.svgFactory.createElement(\"svg:g\");\n              rootGroup.setAttributeNS(null, \"transform\", pm(viewport.transform));\n              svg.appendChild(rootGroup);\n              this.svg = rootGroup;\n              return svg;\n            }\n\n            _ensureClipGroup() {\n              if (!this.current.clipGroup) {\n                const clipGroup = this.svgFactory.createElement(\"svg:g\");\n                clipGroup.setAttributeNS(null, \"clip-path\", this.current.activeClipUrl);\n                this.svg.appendChild(clipGroup);\n                this.current.clipGroup = clipGroup;\n              }\n\n              return this.current.clipGroup;\n            }\n\n            _ensureTransformGroup() {\n              if (!this.tgrp) {\n                this.tgrp = this.svgFactory.createElement(\"svg:g\");\n                this.tgrp.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n\n                if (this.current.activeClipUrl) {\n                  this._ensureClipGroup().appendChild(this.tgrp);\n                } else {\n                  this.svg.appendChild(this.tgrp);\n                }\n              }\n\n              return this.tgrp;\n            }\n\n          };\n        }\n        /***/\n      },\n      /* 21 */\n\n      /***/\n      (__unused_webpack_module, exports) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.XfaLayer = void 0;\n\n        class XfaLayer {\n          static setupStorage(html, id, element, storage, intent) {\n            const storedData = storage.getValue(id, {\n              value: null\n            });\n\n            switch (element.name) {\n              case \"textarea\":\n                if (storedData.value !== null) {\n                  html.textContent = storedData.value;\n                }\n\n                if (intent === \"print\") {\n                  break;\n                }\n\n                html.addEventListener(\"input\", event => {\n                  storage.setValue(id, {\n                    value: event.target.value\n                  });\n                });\n                break;\n\n              case \"input\":\n                if (element.attributes.type === \"radio\" || element.attributes.type === \"checkbox\") {\n                  if (storedData.value === element.attributes.xfaOn) {\n                    html.setAttribute(\"checked\", true);\n                  }\n\n                  if (intent === \"print\") {\n                    break;\n                  }\n\n                  html.addEventListener(\"change\", event => {\n                    storage.setValue(id, {\n                      value: event.target.getAttribute(\"xfaOn\")\n                    });\n                  });\n                } else {\n                  if (storedData.value !== null) {\n                    html.setAttribute(\"value\", storedData.value);\n                  }\n\n                  if (intent === \"print\") {\n                    break;\n                  }\n\n                  html.addEventListener(\"input\", event => {\n                    storage.setValue(id, {\n                      value: event.target.value\n                    });\n                  });\n                }\n\n                break;\n\n              case \"select\":\n                if (storedData.value !== null) {\n                  for (const option of element.children) {\n                    if (option.attributes.value === storedData.value) {\n                      option.attributes.selected = true;\n                    }\n                  }\n                }\n\n                html.addEventListener(\"input\", event => {\n                  const options = event.target.options;\n                  const value = options.selectedIndex === -1 ? \"\" : options[options.selectedIndex].value;\n                  storage.setValue(id, {\n                    value\n                  });\n                });\n                break;\n            }\n          }\n\n          static setAttributes(html, element, storage, intent) {\n            const {\n              attributes\n            } = element;\n\n            if (attributes.type === \"radio\") {\n              attributes.name = `${attributes.name}-${intent}`;\n            }\n\n            for (const [key, value] of Object.entries(attributes)) {\n              if (value === null || value === undefined || key === \"dataId\") {\n                continue;\n              }\n\n              if (key !== \"style\") {\n                if (key === \"textContent\") {\n                  html.textContent = value;\n                } else if (key === \"class\") {\n                  html.setAttribute(key, value.join(\" \"));\n                } else {\n                  html.setAttribute(key, value);\n                }\n              } else {\n                Object.assign(html.style, value);\n              }\n            }\n\n            if (storage && attributes.dataId) {\n              this.setupStorage(html, attributes.dataId, element, storage);\n            }\n          }\n\n          static render(parameters) {\n            const storage = parameters.annotationStorage;\n            const root = parameters.xfa;\n            const intent = parameters.intent || \"display\";\n            const rootHtml = document.createElement(root.name);\n\n            if (root.attributes) {\n              this.setAttributes(rootHtml, root);\n            }\n\n            const stack = [[root, -1, rootHtml]];\n            const rootDiv = parameters.div;\n            rootDiv.appendChild(rootHtml);\n            const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n            rootDiv.style.transform = transform;\n            rootDiv.setAttribute(\"class\", \"xfaLayer xfaFont\");\n\n            while (stack.length > 0) {\n              const [parent, i, html] = stack[stack.length - 1];\n\n              if (i + 1 === parent.children.length) {\n                stack.pop();\n                continue;\n              }\n\n              const child = parent.children[++stack[stack.length - 1][1]];\n\n              if (child === null) {\n                continue;\n              }\n\n              const {\n                name\n              } = child;\n\n              if (name === \"#text\") {\n                html.appendChild(document.createTextNode(child.value));\n                continue;\n              }\n\n              let childHtml;\n\n              if (child?.attributes?.xmlns) {\n                childHtml = document.createElementNS(child.attributes.xmlns, name);\n              } else {\n                childHtml = document.createElement(name);\n              }\n\n              html.appendChild(childHtml);\n\n              if (child.attributes) {\n                this.setAttributes(childHtml, child, storage, intent);\n              }\n\n              if (child.children && child.children.length > 0) {\n                stack.push([child, -1, childHtml]);\n              } else if (child.value) {\n                childHtml.appendChild(document.createTextNode(child.value));\n              }\n            }\n\n            for (const el of rootDiv.querySelectorAll(\".xfaNonInteractive input, .xfaNonInteractive textarea\")) {\n              el.setAttribute(\"readOnly\", true);\n            }\n          }\n\n          static update(parameters) {\n            const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n            parameters.div.style.transform = transform;\n            parameters.div.hidden = false;\n          }\n\n        }\n\n        exports.XfaLayer = XfaLayer;\n        /***/\n      },\n      /* 22 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFNodeStream = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _network_utils = __w_pdfjs_require__(23);\n\n        ;\n\n        const fs = require(\"fs\");\n\n        const http = require(\"http\");\n\n        const https = require(\"https\");\n\n        const url = require(\"url\");\n\n        const fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n\n        function parseUrl(sourceUrl) {\n          const parsedUrl = url.parse(sourceUrl);\n\n          if (parsedUrl.protocol === \"file:\" || parsedUrl.host) {\n            return parsedUrl;\n          }\n\n          if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\n            return url.parse(`file:///${sourceUrl}`);\n          }\n\n          if (!parsedUrl.host) {\n            parsedUrl.protocol = \"file:\";\n          }\n\n          return parsedUrl;\n        }\n\n        class PDFNodeStream {\n          constructor(source) {\n            this.source = source;\n            this.url = parseUrl(source.url);\n            this.isHttp = this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n            this.isFsUrl = this.url.protocol === \"file:\";\n            this.httpHeaders = this.isHttp && source.httpHeaders || {};\n            this._fullRequestReader = null;\n            this._rangeRequestReaders = [];\n          }\n\n          get _progressiveDataLength() {\n            return this._fullRequestReader?._loaded ?? 0;\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFNodeStream.getFullReader can only be called once.\");\n            this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);\n            return this._fullRequestReader;\n          }\n\n          getRangeReader(start, end) {\n            if (end <= this._progressiveDataLength) {\n              return null;\n            }\n\n            const rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);\n\n            this._rangeRequestReaders.push(rangeReader);\n\n            return rangeReader;\n          }\n\n          cancelAllRequests(reason) {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.cancel(reason);\n            }\n\n            for (const reader of this._rangeRequestReaders.slice(0)) {\n              reader.cancel(reason);\n            }\n          }\n\n        }\n\n        exports.PDFNodeStream = PDFNodeStream;\n\n        class BaseFullReader {\n          constructor(stream) {\n            this._url = stream.url;\n            this._done = false;\n            this._storedError = null;\n            this.onProgress = null;\n            const source = stream.source;\n            this._contentLength = source.length;\n            this._loaded = 0;\n            this._filename = null;\n            this._disableRange = source.disableRange || false;\n            this._rangeChunkSize = source.rangeChunkSize;\n\n            if (!this._rangeChunkSize && !this._disableRange) {\n              this._disableRange = true;\n            }\n\n            this._isStreamingSupported = !source.disableStream;\n            this._isRangeSupported = !source.disableRange;\n            this._readableStream = null;\n            this._readCapability = (0, _util.createPromiseCapability)();\n            this._headersCapability = (0, _util.createPromiseCapability)();\n          }\n\n          get headersReady() {\n            return this._headersCapability.promise;\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get contentLength() {\n            return this._contentLength;\n          }\n\n          get isRangeSupported() {\n            return this._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._readCapability.promise;\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            const chunk = this._readableStream.read();\n\n            if (chunk === null) {\n              this._readCapability = (0, _util.createPromiseCapability)();\n              return this.read();\n            }\n\n            this._loaded += chunk.length;\n\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: this._loaded,\n                total: this._contentLength\n              });\n            }\n\n            const buffer = new Uint8Array(chunk).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (!this._readableStream) {\n              this._error(reason);\n\n              return;\n            }\n\n            this._readableStream.destroy(reason);\n          }\n\n          _error(reason) {\n            this._storedError = reason;\n\n            this._readCapability.resolve();\n          }\n\n          _setReadableStream(readableStream) {\n            this._readableStream = readableStream;\n            readableStream.on(\"readable\", () => {\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"end\", () => {\n              readableStream.destroy();\n              this._done = true;\n\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"error\", reason => {\n              this._error(reason);\n            });\n\n            if (!this._isStreamingSupported && this._isRangeSupported) {\n              this._error(new _util.AbortException(\"streaming is disabled\"));\n            }\n\n            if (this._storedError) {\n              this._readableStream.destroy(this._storedError);\n            }\n          }\n\n        }\n\n        class BaseRangeReader {\n          constructor(stream) {\n            this._url = stream.url;\n            this._done = false;\n            this._storedError = null;\n            this.onProgress = null;\n            this._loaded = 0;\n            this._readableStream = null;\n            this._readCapability = (0, _util.createPromiseCapability)();\n            const source = stream.source;\n            this._isStreamingSupported = !source.disableStream;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._readCapability.promise;\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            const chunk = this._readableStream.read();\n\n            if (chunk === null) {\n              this._readCapability = (0, _util.createPromiseCapability)();\n              return this.read();\n            }\n\n            this._loaded += chunk.length;\n\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: this._loaded\n              });\n            }\n\n            const buffer = new Uint8Array(chunk).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (!this._readableStream) {\n              this._error(reason);\n\n              return;\n            }\n\n            this._readableStream.destroy(reason);\n          }\n\n          _error(reason) {\n            this._storedError = reason;\n\n            this._readCapability.resolve();\n          }\n\n          _setReadableStream(readableStream) {\n            this._readableStream = readableStream;\n            readableStream.on(\"readable\", () => {\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"end\", () => {\n              readableStream.destroy();\n              this._done = true;\n\n              this._readCapability.resolve();\n            });\n            readableStream.on(\"error\", reason => {\n              this._error(reason);\n            });\n\n            if (this._storedError) {\n              this._readableStream.destroy(this._storedError);\n            }\n          }\n\n        }\n\n        function createRequestOptions(parsedUrl, headers) {\n          return {\n            protocol: parsedUrl.protocol,\n            auth: parsedUrl.auth,\n            host: parsedUrl.hostname,\n            port: parsedUrl.port,\n            path: parsedUrl.path,\n            method: \"GET\",\n            headers\n          };\n        }\n\n        class PDFNodeStreamFullReader extends BaseFullReader {\n          constructor(stream) {\n            super(stream);\n\n            const handleResponse = response => {\n              if (response.statusCode === 404) {\n                const error = new _util.MissingPDFException(`Missing PDF \"${this._url}\".`);\n                this._storedError = error;\n\n                this._headersCapability.reject(error);\n\n                return;\n              }\n\n              this._headersCapability.resolve();\n\n              this._setReadableStream(response);\n\n              const getResponseHeader = name => {\n                return this._readableStream.headers[name.toLowerCase()];\n              };\n\n              const {\n                allowRangeRequests,\n                suggestedLength\n              } = (0, _network_utils.validateRangeRequestCapabilities)({\n                getResponseHeader,\n                isHttp: stream.isHttp,\n                rangeChunkSize: this._rangeChunkSize,\n                disableRange: this._disableRange\n              });\n              this._isRangeSupported = allowRangeRequests;\n              this._contentLength = suggestedLength || this._contentLength;\n              this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n            };\n\n            this._request = null;\n\n            if (this._url.protocol === \"http:\") {\n              this._request = http.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\n            } else {\n              this._request = https.request(createRequestOptions(this._url, stream.httpHeaders), handleResponse);\n            }\n\n            this._request.on(\"error\", reason => {\n              this._storedError = reason;\n\n              this._headersCapability.reject(reason);\n            });\n\n            this._request.end();\n          }\n\n        }\n\n        class PDFNodeStreamRangeReader extends BaseRangeReader {\n          constructor(stream, start, end) {\n            super(stream);\n            this._httpHeaders = {};\n\n            for (const property in stream.httpHeaders) {\n              const value = stream.httpHeaders[property];\n\n              if (typeof value === \"undefined\") {\n                continue;\n              }\n\n              this._httpHeaders[property] = value;\n            }\n\n            this._httpHeaders.Range = `bytes=${start}-${end - 1}`;\n\n            const handleResponse = response => {\n              if (response.statusCode === 404) {\n                const error = new _util.MissingPDFException(`Missing PDF \"${this._url}\".`);\n                this._storedError = error;\n                return;\n              }\n\n              this._setReadableStream(response);\n            };\n\n            this._request = null;\n\n            if (this._url.protocol === \"http:\") {\n              this._request = http.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\n            } else {\n              this._request = https.request(createRequestOptions(this._url, this._httpHeaders), handleResponse);\n            }\n\n            this._request.on(\"error\", reason => {\n              this._storedError = reason;\n            });\n\n            this._request.end();\n          }\n\n        }\n\n        class PDFNodeStreamFsFullReader extends BaseFullReader {\n          constructor(stream) {\n            super(stream);\n            let path = decodeURIComponent(this._url.path);\n\n            if (fileUriRegex.test(this._url.href)) {\n              path = path.replace(/^\\//, \"\");\n            }\n\n            fs.lstat(path, (error, stat) => {\n              if (error) {\n                if (error.code === \"ENOENT\") {\n                  error = new _util.MissingPDFException(`Missing PDF \"${path}\".`);\n                }\n\n                this._storedError = error;\n\n                this._headersCapability.reject(error);\n\n                return;\n              }\n\n              this._contentLength = stat.size;\n\n              this._setReadableStream(fs.createReadStream(path));\n\n              this._headersCapability.resolve();\n            });\n          }\n\n        }\n\n        class PDFNodeStreamFsRangeReader extends BaseRangeReader {\n          constructor(stream, start, end) {\n            super(stream);\n            let path = decodeURIComponent(this._url.path);\n\n            if (fileUriRegex.test(this._url.href)) {\n              path = path.replace(/^\\//, \"\");\n            }\n\n            this._setReadableStream(fs.createReadStream(path, {\n              start,\n              end: end - 1\n            }));\n          }\n\n        }\n        /***/\n\n      },\n      /* 23 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.createResponseStatusError = createResponseStatusError;\n        exports.extractFilenameFromHeader = extractFilenameFromHeader;\n        exports.validateRangeRequestCapabilities = validateRangeRequestCapabilities;\n        exports.validateResponseStatus = validateResponseStatus;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _content_disposition = __w_pdfjs_require__(24);\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        function validateRangeRequestCapabilities(_ref33) {\n          let {\n            getResponseHeader,\n            isHttp,\n            rangeChunkSize,\n            disableRange\n          } = _ref33;\n          (0, _util.assert)(rangeChunkSize > 0, \"Range chunk size must be larger than zero\");\n          const returnValues = {\n            allowRangeRequests: false,\n            suggestedLength: undefined\n          };\n          const length = parseInt(getResponseHeader(\"Content-Length\"), 10);\n\n          if (!Number.isInteger(length)) {\n            return returnValues;\n          }\n\n          returnValues.suggestedLength = length;\n\n          if (length <= 2 * rangeChunkSize) {\n            return returnValues;\n          }\n\n          if (disableRange || !isHttp) {\n            return returnValues;\n          }\n\n          if (getResponseHeader(\"Accept-Ranges\") !== \"bytes\") {\n            return returnValues;\n          }\n\n          const contentEncoding = getResponseHeader(\"Content-Encoding\") || \"identity\";\n\n          if (contentEncoding !== \"identity\") {\n            return returnValues;\n          }\n\n          returnValues.allowRangeRequests = true;\n          return returnValues;\n        }\n\n        function extractFilenameFromHeader(getResponseHeader) {\n          const contentDisposition = getResponseHeader(\"Content-Disposition\");\n\n          if (contentDisposition) {\n            let filename = (0, _content_disposition.getFilenameFromContentDispositionHeader)(contentDisposition);\n\n            if (filename.includes(\"%\")) {\n              try {\n                filename = decodeURIComponent(filename);\n              } catch (ex) {}\n            }\n\n            if ((0, _display_utils.isPdfFile)(filename)) {\n              return filename;\n            }\n          }\n\n          return null;\n        }\n\n        function createResponseStatusError(status, url) {\n          if (status === 404 || status === 0 && url.startsWith(\"file:\")) {\n            return new _util.MissingPDFException('Missing PDF \"' + url + '\".');\n          }\n\n          return new _util.UnexpectedResponseException(`Unexpected server response (${status}) while retrieving PDF \"${url}\".`, status);\n        }\n\n        function validateResponseStatus(status) {\n          return status === 200 || status === 206;\n        }\n        /***/\n\n      },\n      /* 24 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.getFilenameFromContentDispositionHeader = getFilenameFromContentDispositionHeader;\n\n        var _util = __w_pdfjs_require__(2);\n\n        function getFilenameFromContentDispositionHeader(contentDisposition) {\n          let needsEncodingFixup = true;\n          let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n\n          if (tmp) {\n            tmp = tmp[1];\n            let filename = rfc2616unquote(tmp);\n            filename = unescape(filename);\n            filename = rfc5987decode(filename);\n            filename = rfc2047decode(filename);\n            return fixupEncoding(filename);\n          }\n\n          tmp = rfc2231getparam(contentDisposition);\n\n          if (tmp) {\n            const filename = rfc2047decode(tmp);\n            return fixupEncoding(filename);\n          }\n\n          tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n\n          if (tmp) {\n            tmp = tmp[1];\n            let filename = rfc2616unquote(tmp);\n            filename = rfc2047decode(filename);\n            return fixupEncoding(filename);\n          }\n\n          function toParamRegExp(attributePattern, flags) {\n            return new RegExp(\"(?:^|;)\\\\s*\" + attributePattern + \"\\\\s*=\\\\s*\" + \"(\" + '[^\";\\\\s][^;\\\\s]*' + \"|\" + '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' + \")\", flags);\n          }\n\n          function textdecode(encoding, value) {\n            if (encoding) {\n              if (!/^[\\x00-\\xFF]+$/.test(value)) {\n                return value;\n              }\n\n              try {\n                const decoder = new TextDecoder(encoding, {\n                  fatal: true\n                });\n                const buffer = (0, _util.stringToBytes)(value);\n                value = decoder.decode(buffer);\n                needsEncodingFixup = false;\n              } catch (e) {\n                if (/^utf-?8$/i.test(encoding)) {\n                  try {\n                    value = decodeURIComponent(escape(value));\n                    needsEncodingFixup = false;\n                  } catch (err) {}\n                }\n              }\n            }\n\n            return value;\n          }\n\n          function fixupEncoding(value) {\n            if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n              value = textdecode(\"utf-8\", value);\n\n              if (needsEncodingFixup) {\n                value = textdecode(\"iso-8859-1\", value);\n              }\n            }\n\n            return value;\n          }\n\n          function rfc2231getparam(contentDispositionStr) {\n            const matches = [];\n            let match;\n            const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n\n            while ((match = iter.exec(contentDispositionStr)) !== null) {\n              let [, n, quot, part] = match;\n              n = parseInt(n, 10);\n\n              if (n in matches) {\n                if (n === 0) {\n                  break;\n                }\n\n                continue;\n              }\n\n              matches[n] = [quot, part];\n            }\n\n            const parts = [];\n\n            for (let n = 0; n < matches.length; ++n) {\n              if (!(n in matches)) {\n                break;\n              }\n\n              let [quot, part] = matches[n];\n              part = rfc2616unquote(part);\n\n              if (quot) {\n                part = unescape(part);\n\n                if (n === 0) {\n                  part = rfc5987decode(part);\n                }\n              }\n\n              parts.push(part);\n            }\n\n            return parts.join(\"\");\n          }\n\n          function rfc2616unquote(value) {\n            if (value.startsWith('\"')) {\n              const parts = value.slice(1).split('\\\\\"');\n\n              for (let i = 0; i < parts.length; ++i) {\n                const quotindex = parts[i].indexOf('\"');\n\n                if (quotindex !== -1) {\n                  parts[i] = parts[i].slice(0, quotindex);\n                  parts.length = i + 1;\n                }\n\n                parts[i] = parts[i].replace(/\\\\(.)/g, \"$1\");\n              }\n\n              value = parts.join('\"');\n            }\n\n            return value;\n          }\n\n          function rfc5987decode(extvalue) {\n            const encodingend = extvalue.indexOf(\"'\");\n\n            if (encodingend === -1) {\n              return extvalue;\n            }\n\n            const encoding = extvalue.slice(0, encodingend);\n            const langvalue = extvalue.slice(encodingend + 1);\n            const value = langvalue.replace(/^[^']*'/, \"\");\n            return textdecode(encoding, value);\n          }\n\n          function rfc2047decode(value) {\n            if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n              return value;\n            }\n\n            return value.replace(/=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g, function (matches, charset, encoding, text) {\n              if (encoding === \"q\" || encoding === \"Q\") {\n                text = text.replace(/_/g, \" \");\n                text = text.replace(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n                  return String.fromCharCode(parseInt(hex, 16));\n                });\n                return textdecode(charset, text);\n              }\n\n              try {\n                text = atob(text);\n              } catch (e) {}\n\n              return textdecode(charset, text);\n            });\n          }\n\n          return \"\";\n        }\n        /***/\n\n      },\n      /* 25 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFNetworkStream = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _network_utils = __w_pdfjs_require__(23);\n\n        ;\n        const OK_RESPONSE = 200;\n        const PARTIAL_CONTENT_RESPONSE = 206;\n\n        function getArrayBuffer(xhr) {\n          const data = xhr.response;\n\n          if (typeof data !== \"string\") {\n            return data;\n          }\n\n          const array = (0, _util.stringToBytes)(data);\n          return array.buffer;\n        }\n\n        class NetworkManager {\n          constructor(url, args) {\n            this.url = url;\n            args = args || {};\n            this.isHttp = /^https?:/i.test(url);\n            this.httpHeaders = this.isHttp && args.httpHeaders || {};\n            this.withCredentials = args.withCredentials || false;\n\n            this.getXhr = args.getXhr || function NetworkManager_getXhr() {\n              return new XMLHttpRequest();\n            };\n\n            this.currXhrId = 0;\n            this.pendingRequests = Object.create(null);\n          }\n\n          requestRange(begin, end, listeners) {\n            const args = {\n              begin,\n              end\n            };\n\n            for (const prop in listeners) {\n              args[prop] = listeners[prop];\n            }\n\n            return this.request(args);\n          }\n\n          requestFull(listeners) {\n            return this.request(listeners);\n          }\n\n          request(args) {\n            const xhr = this.getXhr();\n            const xhrId = this.currXhrId++;\n            const pendingRequest = this.pendingRequests[xhrId] = {\n              xhr\n            };\n            xhr.open(\"GET\", this.url);\n            xhr.withCredentials = this.withCredentials;\n\n            for (const property in this.httpHeaders) {\n              const value = this.httpHeaders[property];\n\n              if (typeof value === \"undefined\") {\n                continue;\n              }\n\n              xhr.setRequestHeader(property, value);\n            }\n\n            if (this.isHttp && \"begin\" in args && \"end\" in args) {\n              xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\n              pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n            } else {\n              pendingRequest.expectedStatus = OK_RESPONSE;\n            }\n\n            xhr.responseType = \"arraybuffer\";\n\n            if (args.onError) {\n              xhr.onerror = function (evt) {\n                args.onError(xhr.status);\n              };\n            }\n\n            xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n            xhr.onprogress = this.onProgress.bind(this, xhrId);\n            pendingRequest.onHeadersReceived = args.onHeadersReceived;\n            pendingRequest.onDone = args.onDone;\n            pendingRequest.onError = args.onError;\n            pendingRequest.onProgress = args.onProgress;\n            xhr.send(null);\n            return xhrId;\n          }\n\n          onProgress(xhrId, evt) {\n            const pendingRequest = this.pendingRequests[xhrId];\n\n            if (!pendingRequest) {\n              return;\n            }\n\n            if (pendingRequest.onProgress) {\n              pendingRequest.onProgress(evt);\n            }\n          }\n\n          onStateChange(xhrId, evt) {\n            const pendingRequest = this.pendingRequests[xhrId];\n\n            if (!pendingRequest) {\n              return;\n            }\n\n            const xhr = pendingRequest.xhr;\n\n            if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n              pendingRequest.onHeadersReceived();\n              delete pendingRequest.onHeadersReceived;\n            }\n\n            if (xhr.readyState !== 4) {\n              return;\n            }\n\n            if (!(xhrId in this.pendingRequests)) {\n              return;\n            }\n\n            delete this.pendingRequests[xhrId];\n\n            if (xhr.status === 0 && this.isHttp) {\n              if (pendingRequest.onError) {\n                pendingRequest.onError(xhr.status);\n              }\n\n              return;\n            }\n\n            const xhrStatus = xhr.status || OK_RESPONSE;\n            const ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n\n            if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {\n              if (pendingRequest.onError) {\n                pendingRequest.onError(xhr.status);\n              }\n\n              return;\n            }\n\n            const chunk = getArrayBuffer(xhr);\n\n            if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n              const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n              const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n              pendingRequest.onDone({\n                begin: parseInt(matches[1], 10),\n                chunk\n              });\n            } else if (chunk) {\n              pendingRequest.onDone({\n                begin: 0,\n                chunk\n              });\n            } else if (pendingRequest.onError) {\n              pendingRequest.onError(xhr.status);\n            }\n          }\n\n          getRequestXhr(xhrId) {\n            return this.pendingRequests[xhrId].xhr;\n          }\n\n          isPendingRequest(xhrId) {\n            return xhrId in this.pendingRequests;\n          }\n\n          abortRequest(xhrId) {\n            const xhr = this.pendingRequests[xhrId].xhr;\n            delete this.pendingRequests[xhrId];\n            xhr.abort();\n          }\n\n        }\n\n        class PDFNetworkStream {\n          constructor(source) {\n            this._source = source;\n            this._manager = new NetworkManager(source.url, {\n              httpHeaders: source.httpHeaders,\n              withCredentials: source.withCredentials\n            });\n            this._rangeChunkSize = source.rangeChunkSize;\n            this._fullRequestReader = null;\n            this._rangeRequestReaders = [];\n          }\n\n          _onRangeRequestReaderClosed(reader) {\n            const i = this._rangeRequestReaders.indexOf(reader);\n\n            if (i >= 0) {\n              this._rangeRequestReaders.splice(i, 1);\n            }\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFNetworkStream.getFullReader can only be called once.\");\n            this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);\n            return this._fullRequestReader;\n          }\n\n          getRangeReader(begin, end) {\n            const reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);\n            reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n\n            this._rangeRequestReaders.push(reader);\n\n            return reader;\n          }\n\n          cancelAllRequests(reason) {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.cancel(reason);\n            }\n\n            for (const reader of this._rangeRequestReaders.slice(0)) {\n              reader.cancel(reason);\n            }\n          }\n\n        }\n\n        exports.PDFNetworkStream = PDFNetworkStream;\n\n        class PDFNetworkStreamFullRequestReader {\n          constructor(manager, source) {\n            this._manager = manager;\n            const args = {\n              onHeadersReceived: this._onHeadersReceived.bind(this),\n              onDone: this._onDone.bind(this),\n              onError: this._onError.bind(this),\n              onProgress: this._onProgress.bind(this)\n            };\n            this._url = source.url;\n            this._fullRequestId = manager.requestFull(args);\n            this._headersReceivedCapability = (0, _util.createPromiseCapability)();\n            this._disableRange = source.disableRange || false;\n            this._contentLength = source.length;\n            this._rangeChunkSize = source.rangeChunkSize;\n\n            if (!this._rangeChunkSize && !this._disableRange) {\n              this._disableRange = true;\n            }\n\n            this._isStreamingSupported = false;\n            this._isRangeSupported = false;\n            this._cachedChunks = [];\n            this._requests = [];\n            this._done = false;\n            this._storedError = undefined;\n            this._filename = null;\n            this.onProgress = null;\n          }\n\n          _onHeadersReceived() {\n            const fullRequestXhrId = this._fullRequestId;\n\n            const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n\n            const getResponseHeader = name => {\n              return fullRequestXhr.getResponseHeader(name);\n            };\n\n            const {\n              allowRangeRequests,\n              suggestedLength\n            } = (0, _network_utils.validateRangeRequestCapabilities)({\n              getResponseHeader,\n              isHttp: this._manager.isHttp,\n              rangeChunkSize: this._rangeChunkSize,\n              disableRange: this._disableRange\n            });\n\n            if (allowRangeRequests) {\n              this._isRangeSupported = true;\n            }\n\n            this._contentLength = suggestedLength || this._contentLength;\n            this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n\n            if (this._isRangeSupported) {\n              this._manager.abortRequest(fullRequestXhrId);\n            }\n\n            this._headersReceivedCapability.resolve();\n          }\n\n          _onDone(args) {\n            if (args) {\n              if (this._requests.length > 0) {\n                const requestCapability = this._requests.shift();\n\n                requestCapability.resolve({\n                  value: args.chunk,\n                  done: false\n                });\n              } else {\n                this._cachedChunks.push(args.chunk);\n              }\n            }\n\n            this._done = true;\n\n            if (this._cachedChunks.length > 0) {\n              return;\n            }\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n          }\n\n          _onError(status) {\n            const url = this._url;\n            const exception = (0, _network_utils.createResponseStatusError)(status, url);\n            this._storedError = exception;\n\n            this._headersReceivedCapability.reject(exception);\n\n            for (const requestCapability of this._requests) {\n              requestCapability.reject(exception);\n            }\n\n            this._requests.length = 0;\n            this._cachedChunks.length = 0;\n          }\n\n          _onProgress(data) {\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: data.loaded,\n                total: data.lengthComputable ? data.total : this._contentLength\n              });\n            }\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get isRangeSupported() {\n            return this._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          get contentLength() {\n            return this._contentLength;\n          }\n\n          get headersReady() {\n            return this._headersReceivedCapability.promise;\n          }\n\n          async read() {\n            if (this._storedError) {\n              throw this._storedError;\n            }\n\n            if (this._cachedChunks.length > 0) {\n              const chunk = this._cachedChunks.shift();\n\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = (0, _util.createPromiseCapability)();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            this._headersReceivedCapability.reject(reason);\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n\n            if (this._manager.isPendingRequest(this._fullRequestId)) {\n              this._manager.abortRequest(this._fullRequestId);\n            }\n\n            this._fullRequestReader = null;\n          }\n\n        }\n\n        class PDFNetworkStreamRangeRequestReader {\n          constructor(manager, begin, end) {\n            this._manager = manager;\n            const args = {\n              onDone: this._onDone.bind(this),\n              onProgress: this._onProgress.bind(this)\n            };\n            this._requestId = manager.requestRange(begin, end, args);\n            this._requests = [];\n            this._queuedChunk = null;\n            this._done = false;\n            this.onProgress = null;\n            this.onClosed = null;\n          }\n\n          _close() {\n            if (this.onClosed) {\n              this.onClosed(this);\n            }\n          }\n\n          _onDone(data) {\n            const chunk = data.chunk;\n\n            if (this._requests.length > 0) {\n              const requestCapability = this._requests.shift();\n\n              requestCapability.resolve({\n                value: chunk,\n                done: false\n              });\n            } else {\n              this._queuedChunk = chunk;\n            }\n\n            this._done = true;\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n\n            this._close();\n          }\n\n          _onProgress(evt) {\n            if (!this.isStreamingSupported && this.onProgress) {\n              this.onProgress({\n                loaded: evt.loaded\n              });\n            }\n          }\n\n          get isStreamingSupported() {\n            return false;\n          }\n\n          async read() {\n            if (this._queuedChunk !== null) {\n              const chunk = this._queuedChunk;\n              this._queuedChunk = null;\n              return {\n                value: chunk,\n                done: false\n              };\n            }\n\n            if (this._done) {\n              return {\n                value: undefined,\n                done: true\n              };\n            }\n\n            const requestCapability = (0, _util.createPromiseCapability)();\n\n            this._requests.push(requestCapability);\n\n            return requestCapability.promise;\n          }\n\n          cancel(reason) {\n            this._done = true;\n\n            for (const requestCapability of this._requests) {\n              requestCapability.resolve({\n                value: undefined,\n                done: true\n              });\n            }\n\n            this._requests.length = 0;\n\n            if (this._manager.isPendingRequest(this._requestId)) {\n              this._manager.abortRequest(this._requestId);\n            }\n\n            this._close();\n          }\n\n        }\n        /***/\n\n      },\n      /* 26 */\n\n      /***/\n      (__unused_webpack_module, exports, __w_pdfjs_require__) => {\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.PDFFetchStream = void 0;\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _network_utils = __w_pdfjs_require__(23);\n\n        ;\n\n        function createFetchOptions(headers, withCredentials, abortController) {\n          return {\n            method: \"GET\",\n            headers,\n            signal: abortController?.signal,\n            mode: \"cors\",\n            credentials: withCredentials ? \"include\" : \"same-origin\",\n            redirect: \"follow\"\n          };\n        }\n\n        function createHeaders(httpHeaders) {\n          const headers = new Headers();\n\n          for (const property in httpHeaders) {\n            const value = httpHeaders[property];\n\n            if (typeof value === \"undefined\") {\n              continue;\n            }\n\n            headers.append(property, value);\n          }\n\n          return headers;\n        }\n\n        class PDFFetchStream {\n          constructor(source) {\n            this.source = source;\n            this.isHttp = /^https?:/i.test(source.url);\n            this.httpHeaders = this.isHttp && source.httpHeaders || {};\n            this._fullRequestReader = null;\n            this._rangeRequestReaders = [];\n          }\n\n          get _progressiveDataLength() {\n            return this._fullRequestReader?._loaded ?? 0;\n          }\n\n          getFullReader() {\n            (0, _util.assert)(!this._fullRequestReader, \"PDFFetchStream.getFullReader can only be called once.\");\n            this._fullRequestReader = new PDFFetchStreamReader(this);\n            return this._fullRequestReader;\n          }\n\n          getRangeReader(begin, end) {\n            if (end <= this._progressiveDataLength) {\n              return null;\n            }\n\n            const reader = new PDFFetchStreamRangeReader(this, begin, end);\n\n            this._rangeRequestReaders.push(reader);\n\n            return reader;\n          }\n\n          cancelAllRequests(reason) {\n            if (this._fullRequestReader) {\n              this._fullRequestReader.cancel(reason);\n            }\n\n            for (const reader of this._rangeRequestReaders.slice(0)) {\n              reader.cancel(reason);\n            }\n          }\n\n        }\n\n        exports.PDFFetchStream = PDFFetchStream;\n\n        class PDFFetchStreamReader {\n          constructor(stream) {\n            this._stream = stream;\n            this._reader = null;\n            this._loaded = 0;\n            this._filename = null;\n            const source = stream.source;\n            this._withCredentials = source.withCredentials || false;\n            this._contentLength = source.length;\n            this._headersCapability = (0, _util.createPromiseCapability)();\n            this._disableRange = source.disableRange || false;\n            this._rangeChunkSize = source.rangeChunkSize;\n\n            if (!this._rangeChunkSize && !this._disableRange) {\n              this._disableRange = true;\n            }\n\n            if (typeof AbortController !== \"undefined\") {\n              this._abortController = new AbortController();\n            }\n\n            this._isStreamingSupported = !source.disableStream;\n            this._isRangeSupported = !source.disableRange;\n            this._headers = createHeaders(this._stream.httpHeaders);\n            const url = source.url;\n            fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\n              if (!(0, _network_utils.validateResponseStatus)(response.status)) {\n                throw (0, _network_utils.createResponseStatusError)(response.status, url);\n              }\n\n              this._reader = response.body.getReader();\n\n              this._headersCapability.resolve();\n\n              const getResponseHeader = name => {\n                return response.headers.get(name);\n              };\n\n              const {\n                allowRangeRequests,\n                suggestedLength\n              } = (0, _network_utils.validateRangeRequestCapabilities)({\n                getResponseHeader,\n                isHttp: this._stream.isHttp,\n                rangeChunkSize: this._rangeChunkSize,\n                disableRange: this._disableRange\n              });\n              this._isRangeSupported = allowRangeRequests;\n              this._contentLength = suggestedLength || this._contentLength;\n              this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);\n\n              if (!this._isStreamingSupported && this._isRangeSupported) {\n                this.cancel(new _util.AbortException(\"Streaming is disabled.\"));\n              }\n            }).catch(this._headersCapability.reject);\n            this.onProgress = null;\n          }\n\n          get headersReady() {\n            return this._headersCapability.promise;\n          }\n\n          get filename() {\n            return this._filename;\n          }\n\n          get contentLength() {\n            return this._contentLength;\n          }\n\n          get isRangeSupported() {\n            return this._isRangeSupported;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._headersCapability.promise;\n            const {\n              value,\n              done\n            } = await this._reader.read();\n\n            if (done) {\n              return {\n                value,\n                done\n              };\n            }\n\n            this._loaded += value.byteLength;\n\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: this._loaded,\n                total: this._contentLength\n              });\n            }\n\n            const buffer = new Uint8Array(value).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (this._reader) {\n              this._reader.cancel(reason);\n            }\n\n            if (this._abortController) {\n              this._abortController.abort();\n            }\n          }\n\n        }\n\n        class PDFFetchStreamRangeReader {\n          constructor(stream, begin, end) {\n            this._stream = stream;\n            this._reader = null;\n            this._loaded = 0;\n            const source = stream.source;\n            this._withCredentials = source.withCredentials || false;\n            this._readCapability = (0, _util.createPromiseCapability)();\n            this._isStreamingSupported = !source.disableStream;\n\n            if (typeof AbortController !== \"undefined\") {\n              this._abortController = new AbortController();\n            }\n\n            this._headers = createHeaders(this._stream.httpHeaders);\n\n            this._headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\n\n            const url = source.url;\n            fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(response => {\n              if (!(0, _network_utils.validateResponseStatus)(response.status)) {\n                throw (0, _network_utils.createResponseStatusError)(response.status, url);\n              }\n\n              this._readCapability.resolve();\n\n              this._reader = response.body.getReader();\n            }).catch(reason => {\n              if (reason?.name === \"AbortError\") {\n                return;\n              }\n\n              throw reason;\n            });\n            this.onProgress = null;\n          }\n\n          get isStreamingSupported() {\n            return this._isStreamingSupported;\n          }\n\n          async read() {\n            await this._readCapability.promise;\n            const {\n              value,\n              done\n            } = await this._reader.read();\n\n            if (done) {\n              return {\n                value,\n                done\n              };\n            }\n\n            this._loaded += value.byteLength;\n\n            if (this.onProgress) {\n              this.onProgress({\n                loaded: this._loaded\n              });\n            }\n\n            const buffer = new Uint8Array(value).buffer;\n            return {\n              value: buffer,\n              done: false\n            };\n          }\n\n          cancel(reason) {\n            if (this._reader) {\n              this._reader.cancel(reason);\n            }\n\n            if (this._abortController) {\n              this._abortController.abort();\n            }\n          }\n\n        }\n        /***/\n\n      }\n      /******/\n      ];\n      /************************************************************************/\n\n      /******/\n      // The module cache\n\n      /******/\n\n      var __webpack_module_cache__ = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __w_pdfjs_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /******/\n        var cachedModule = __webpack_module_cache__[moduleId];\n        /******/\n\n        if (cachedModule !== undefined) {\n          /******/\n          return cachedModule.exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = __webpack_module_cache__[moduleId] = {\n          /******/\n          // no module.id needed\n\n          /******/\n          // no module.loaded needed\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        __webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /************************************************************************/\n\n\n      var __webpack_exports__ = {}; // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n\n      (() => {\n        var exports = __webpack_exports__;\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        Object.defineProperty(exports, \"addLinkAttributes\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.addLinkAttributes;\n          }\n        });\n        Object.defineProperty(exports, \"getFilenameFromUrl\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.getFilenameFromUrl;\n          }\n        });\n        Object.defineProperty(exports, \"getPdfFilenameFromUrl\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.getPdfFilenameFromUrl;\n          }\n        });\n        Object.defineProperty(exports, \"getXfaPageViewport\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.getXfaPageViewport;\n          }\n        });\n        Object.defineProperty(exports, \"isPdfFile\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.isPdfFile;\n          }\n        });\n        Object.defineProperty(exports, \"LinkTarget\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.LinkTarget;\n          }\n        });\n        Object.defineProperty(exports, \"loadScript\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.loadScript;\n          }\n        });\n        Object.defineProperty(exports, \"PDFDateString\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.PDFDateString;\n          }\n        });\n        Object.defineProperty(exports, \"RenderingCancelledException\", {\n          enumerable: true,\n          get: function () {\n            return _display_utils.RenderingCancelledException;\n          }\n        });\n        Object.defineProperty(exports, \"build\", {\n          enumerable: true,\n          get: function () {\n            return _api.build;\n          }\n        });\n        Object.defineProperty(exports, \"getDocument\", {\n          enumerable: true,\n          get: function () {\n            return _api.getDocument;\n          }\n        });\n        Object.defineProperty(exports, \"LoopbackPort\", {\n          enumerable: true,\n          get: function () {\n            return _api.LoopbackPort;\n          }\n        });\n        Object.defineProperty(exports, \"PDFDataRangeTransport\", {\n          enumerable: true,\n          get: function () {\n            return _api.PDFDataRangeTransport;\n          }\n        });\n        Object.defineProperty(exports, \"PDFWorker\", {\n          enumerable: true,\n          get: function () {\n            return _api.PDFWorker;\n          }\n        });\n        Object.defineProperty(exports, \"version\", {\n          enumerable: true,\n          get: function () {\n            return _api.version;\n          }\n        });\n        Object.defineProperty(exports, \"CMapCompressionType\", {\n          enumerable: true,\n          get: function () {\n            return _util.CMapCompressionType;\n          }\n        });\n        Object.defineProperty(exports, \"createObjectURL\", {\n          enumerable: true,\n          get: function () {\n            return _util.createObjectURL;\n          }\n        });\n        Object.defineProperty(exports, \"createPromiseCapability\", {\n          enumerable: true,\n          get: function () {\n            return _util.createPromiseCapability;\n          }\n        });\n        Object.defineProperty(exports, \"createValidAbsoluteUrl\", {\n          enumerable: true,\n          get: function () {\n            return _util.createValidAbsoluteUrl;\n          }\n        });\n        Object.defineProperty(exports, \"InvalidPDFException\", {\n          enumerable: true,\n          get: function () {\n            return _util.InvalidPDFException;\n          }\n        });\n        Object.defineProperty(exports, \"MissingPDFException\", {\n          enumerable: true,\n          get: function () {\n            return _util.MissingPDFException;\n          }\n        });\n        Object.defineProperty(exports, \"OPS\", {\n          enumerable: true,\n          get: function () {\n            return _util.OPS;\n          }\n        });\n        Object.defineProperty(exports, \"PasswordResponses\", {\n          enumerable: true,\n          get: function () {\n            return _util.PasswordResponses;\n          }\n        });\n        Object.defineProperty(exports, \"PermissionFlag\", {\n          enumerable: true,\n          get: function () {\n            return _util.PermissionFlag;\n          }\n        });\n        Object.defineProperty(exports, \"removeNullCharacters\", {\n          enumerable: true,\n          get: function () {\n            return _util.removeNullCharacters;\n          }\n        });\n        Object.defineProperty(exports, \"shadow\", {\n          enumerable: true,\n          get: function () {\n            return _util.shadow;\n          }\n        });\n        Object.defineProperty(exports, \"UnexpectedResponseException\", {\n          enumerable: true,\n          get: function () {\n            return _util.UnexpectedResponseException;\n          }\n        });\n        Object.defineProperty(exports, \"UNSUPPORTED_FEATURES\", {\n          enumerable: true,\n          get: function () {\n            return _util.UNSUPPORTED_FEATURES;\n          }\n        });\n        Object.defineProperty(exports, \"Util\", {\n          enumerable: true,\n          get: function () {\n            return _util.Util;\n          }\n        });\n        Object.defineProperty(exports, \"VerbosityLevel\", {\n          enumerable: true,\n          get: function () {\n            return _util.VerbosityLevel;\n          }\n        });\n        Object.defineProperty(exports, \"AnnotationLayer\", {\n          enumerable: true,\n          get: function () {\n            return _annotation_layer.AnnotationLayer;\n          }\n        });\n        Object.defineProperty(exports, \"GlobalWorkerOptions\", {\n          enumerable: true,\n          get: function () {\n            return _worker_options.GlobalWorkerOptions;\n          }\n        });\n        Object.defineProperty(exports, \"renderTextLayer\", {\n          enumerable: true,\n          get: function () {\n            return _text_layer.renderTextLayer;\n          }\n        });\n        Object.defineProperty(exports, \"SVGGraphics\", {\n          enumerable: true,\n          get: function () {\n            return _svg.SVGGraphics;\n          }\n        });\n        Object.defineProperty(exports, \"XfaLayer\", {\n          enumerable: true,\n          get: function () {\n            return _xfa_layer.XfaLayer;\n          }\n        });\n\n        var _display_utils = __w_pdfjs_require__(1);\n\n        var _api = __w_pdfjs_require__(6);\n\n        var _util = __w_pdfjs_require__(2);\n\n        var _annotation_layer = __w_pdfjs_require__(17);\n\n        var _worker_options = __w_pdfjs_require__(12);\n\n        var _is_node = __w_pdfjs_require__(4);\n\n        var _text_layer = __w_pdfjs_require__(19);\n\n        var _svg = __w_pdfjs_require__(20);\n\n        var _xfa_layer = __w_pdfjs_require__(21);\n\n        const pdfjsVersion = '2.10.377';\n        const pdfjsBuild = '156762c48';\n        {\n          if (_is_node.isNodeJS) {\n            const {\n              PDFNodeStream\n            } = __w_pdfjs_require__(22);\n\n            (0, _api.setPDFNetworkStreamFactory)(params => {\n              return new PDFNodeStream(params);\n            });\n          } else {\n            const {\n              PDFNetworkStream\n            } = __w_pdfjs_require__(25);\n\n            const {\n              PDFFetchStream\n            } = __w_pdfjs_require__(26);\n\n            (0, _api.setPDFNetworkStreamFactory)(params => {\n              if ((0, _display_utils.isValidFetchUrl)(params.url)) {\n                return new PDFFetchStream(params);\n              }\n\n              return new PDFNetworkStream(params);\n            });\n          }\n        }\n      })();\n      /******/\n\n\n      return __webpack_exports__;\n      /******/\n    })()\n  );\n});","map":{"version":3,"sources":["webpack://pdfjs-dist/build/pdf/webpack/universalModuleDefinition","webpack://pdfjs-dist/build/pdf/src/display/display_utils.js","webpack://pdfjs-dist/build/pdf/src/shared/util.js","webpack://pdfjs-dist/build/pdf/src/shared/compatibility.js","webpack://pdfjs-dist/build/pdf/src/shared/is_node.js","webpack://pdfjs-dist/build/pdf/src/display/base_factory.js","webpack://pdfjs-dist/build/pdf/src/display/api.js","webpack://pdfjs-dist/build/pdf/src/display/font_loader.js","webpack://pdfjs-dist/build/pdf/src/display/node_utils.js","webpack://pdfjs-dist/build/pdf/src/display/annotation_storage.js","webpack://pdfjs-dist/build/pdf/src/display/canvas.js","webpack://pdfjs-dist/build/pdf/src/display/pattern_helper.js","webpack://pdfjs-dist/build/pdf/src/display/worker_options.js","webpack://pdfjs-dist/build/pdf/src/shared/message_handler.js","webpack://pdfjs-dist/build/pdf/src/display/metadata.js","webpack://pdfjs-dist/build/pdf/src/display/optional_content_config.js","webpack://pdfjs-dist/build/pdf/src/display/transport_stream.js","webpack://pdfjs-dist/build/pdf/src/display/annotation_layer.js","webpack://pdfjs-dist/build/pdf/src/shared/scripting_utils.js","webpack://pdfjs-dist/build/pdf/src/display/text_layer.js","webpack://pdfjs-dist/build/pdf/src/display/svg.js","webpack://pdfjs-dist/build/pdf/src/display/xfa_layer.js","webpack://pdfjs-dist/build/pdf/src/display/node_stream.js","webpack://pdfjs-dist/build/pdf/src/display/network_utils.js","webpack://pdfjs-dist/build/pdf/src/display/content_disposition.js","webpack://pdfjs-dist/build/pdf/src/display/network.js","webpack://pdfjs-dist/build/pdf/src/display/fetch_stream.js","webpack://pdfjs-dist/build/pdf/webpack/bootstrap","webpack://pdfjs-dist/build/pdf/src/pdf.js"],"names":["DEFAULT_LINK_REL","SVG_NS","constructor","ownerDocument","globalThis","_createCanvas","canvas","asTypedArray","isValidFetchUrl","document","response","fetch","stringToBytes","request","XMLHttpRequest","data","resolve","reject","_fetchData","cMapData","fetchData","_createSVG","offsetX","offsetY","dontFlip","centerX","viewBox","centerY","rotation","rotateA","rotateB","rotateC","rotateD","offsetCanvasX","Math","offsetCanvasY","width","height","clone","scale","convertToViewportPoint","convertToViewportRectangle","topLeft","rect","bottomRight","convertToPdfPoint","LinkTarget","NONE","SELF","BLANK","PARENT","TOP","enabled","assert","url","urlNullRemoved","removeNullCharacters","link","targetStr","ii","i","anchor","query","end","defaultFilename","isDataScheme","warn","reURI","reFilename","splitURI","suggestedFilename","decodeURIComponent","Object","time","name","Date","timeEnd","start","toString","outBuf","longest","duration","baseUrl","protocol","removeScriptElement","script","console","toDateObject","isString","pdfDateStringRegex","matches","year","parseInt","month","day","hour","minute","second","universalTimeRelation","offsetHour","offsetMinute","xfaPage","IDENTITY_MATRIX","FONT_IDENTITY_MATRIX","PermissionFlag","PRINT","MODIFY_CONTENTS","COPY","MODIFY_ANNOTATIONS","FILL_INTERACTIVE_FORMS","COPY_FOR_ACCESSIBILITY","ASSEMBLE","PRINT_HIGH_QUALITY","TextRenderingMode","FILL","STROKE","FILL_STROKE","INVISIBLE","FILL_ADD_TO_PATH","STROKE_ADD_TO_PATH","FILL_STROKE_ADD_TO_PATH","ADD_TO_PATH","FILL_STROKE_MASK","ADD_TO_PATH_FLAG","ImageKind","GRAYSCALE_1BPP","RGB_24BPP","RGBA_32BPP","AnnotationType","TEXT","LINK","FREETEXT","LINE","SQUARE","CIRCLE","POLYGON","POLYLINE","HIGHLIGHT","UNDERLINE","SQUIGGLY","STRIKEOUT","STAMP","CARET","INK","POPUP","FILEATTACHMENT","SOUND","MOVIE","WIDGET","SCREEN","PRINTERMARK","TRAPNET","WATERMARK","THREED","REDACT","AnnotationStateModelType","MARKED","REVIEW","AnnotationMarkedState","UNMARKED","AnnotationReviewState","ACCEPTED","REJECTED","CANCELLED","COMPLETED","AnnotationReplyType","GROUP","REPLY","AnnotationFlag","HIDDEN","NOZOOM","NOROTATE","NOVIEW","READONLY","LOCKED","TOGGLENOVIEW","LOCKEDCONTENTS","AnnotationFieldFlag","REQUIRED","NOEXPORT","MULTILINE","PASSWORD","NOTOGGLETOOFF","RADIO","PUSHBUTTON","COMBO","EDIT","SORT","FILESELECT","MULTISELECT","DONOTSPELLCHECK","DONOTSCROLL","COMB","RICHTEXT","RADIOSINUNISON","COMMITONSELCHANGE","AnnotationBorderStyleType","SOLID","DASHED","BEVELED","INSET","AnnotationActionEventType","E","X","D","U","Fo","Bl","PO","PC","PV","PI","K","F","V","C","DocumentActionEventType","WC","WS","DS","WP","DP","PageActionEventType","O","StreamType","UNKNOWN","FLATE","LZW","DCT","JPX","JBIG","A85","AHX","CCF","RLX","FontType","TYPE1","TYPE1STANDARD","TYPE1C","CIDFONTTYPE0","CIDFONTTYPE0C","TRUETYPE","CIDFONTTYPE2","TYPE3","OPENTYPE","TYPE0","MMTYPE1","VerbosityLevel","ERRORS","WARNINGS","INFOS","CMapCompressionType","BINARY","STREAM","OPS","dependency","setLineWidth","setLineCap","setLineJoin","setMiterLimit","setDash","setRenderingIntent","setFlatness","setGState","save","restore","transform","moveTo","lineTo","curveTo","curveTo2","curveTo3","closePath","rectangle","stroke","closeStroke","fill","eoFill","fillStroke","eoFillStroke","closeFillStroke","closeEOFillStroke","endPath","clip","eoClip","beginText","endText","setCharSpacing","setWordSpacing","setHScale","setLeading","setFont","setTextRenderingMode","setTextRise","moveText","setLeadingMoveText","setTextMatrix","nextLine","showText","showSpacedText","nextLineShowText","nextLineSetSpacingShowText","setCharWidth","setCharWidthAndBounds","setStrokeColorSpace","setFillColorSpace","setStrokeColor","setStrokeColorN","setFillColor","setFillColorN","setStrokeGray","setFillGray","setStrokeRGBColor","setFillRGBColor","setStrokeCMYKColor","setFillCMYKColor","shadingFill","beginInlineImage","beginImageData","endInlineImage","paintXObject","markPoint","markPointProps","beginMarkedContent","beginMarkedContentProps","endMarkedContent","beginCompat","endCompat","paintFormXObjectBegin","paintFormXObjectEnd","beginGroup","endGroup","beginAnnotations","endAnnotations","beginAnnotation","endAnnotation","paintJpegXObject","paintImageMaskXObject","paintImageMaskXObjectGroup","paintImageXObject","paintInlineImageXObject","paintInlineImageXObjectGroup","paintImageXObjectRepeat","paintImageMaskXObjectRepeat","paintSolidColorImageMask","constructPath","UNSUPPORTED_FEATURES","unknown","forms","javaScript","signatures","smask","shadingPattern","font","errorTilingPattern","errorExtGState","errorXObject","errorFontLoadType3","errorFontState","errorFontMissing","errorFontTranslate","errorColorSpace","errorOperatorList","errorFontToUnicode","errorFontLoadNative","errorFontBuildPath","errorFontGetPath","errorMarkedContent","PasswordResponses","NEED_PASSWORD","INCORRECT_PASSWORD","verbosity","Number","unreachable","base","other","absoluteUrl","_isValidProtocol","enumerable","configurable","writable","BaseException","NullCharactersRegExp","str","bytes","length","MAX_ARGUMENT_COUNT","String","strBuf","chunkEnd","chunk","arr","resultLength","arrayByteLength","pos","item","itemLength","value","obj","buffer8","view32","IsLittleEndianCached","shadow","isLittleEndian","IsEvalSupportedCached","isEvalSupported","hexNumbers","Array","n","makeHexColor","m1","m2","applyTransform","xt","p","m","yt","applyInverseTransform","d","getAxialAlignedBoundingBox","p1","Util","p2","r","p3","p4","inverseTransform","apply3dTransform","v","singularValueDecompose2dScale","transpose","a","b","c","first","sx","sy","normalizeRect","intersect","orderedX","rect1","rect2","orderedY","result","PDFStringTranslateTable","code","match","buf","char","escape","unescape","encodeURIComponent","arr1","arr2","date","buffer","capability","isSettled","get","contentType","forceDataSchema","URL","type","digits","b1","b2","b3","d1","d2","d3","d4","isNodeJS","process","create","context","reset","canvasAndContext","destroy","isCompressed","compressionType","reason","svg","createElement","DEFAULT_RANGE_CHUNK_SIZE","RENDERING_CANCELLED_TIMEOUT","DefaultCanvasFactory","DefaultCMapReaderFactory","DefaultStandardFontDataFactory","createPDFNetworkStream","task","src","source","isArrayBuffer","range","params","rangeTransport","worker","window","isNaN","setVerbosityLevel","workerParams","port","GlobalWorkerOptions","PDFWorker","docId","workerIdPromise","_fetchDocument","networkStreamPromise","networkStream","initialData","progressiveDone","contentDispositionFilename","disableRange","disableStream","httpHeaders","withCredentials","rangeChunkSize","messageHandler","transport","Promise","pdfDataRangeTransport","apiVersion","password","disableAutoFetch","maxImageSize","disableFontFace","postMessageTransfers","docBaseUrl","ignoreErrors","fontExtraProperties","enableXfa","useSystemFonts","cMapUrl","standardFontDataUrl","PDFDocumentLoadingTask","nextDocumentId","promise","transportDestroyed","addRangeListener","addProgressListener","addProgressiveReadListener","addProgressiveDoneListener","onDataRange","listener","onDataProgress","onDataProgressiveRead","onDataProgressiveDone","transportReady","requestDataRange","abort","deprecated","annotationStorage","numPages","fingerprints","isPureXfa","allXfaHtml","getPage","getPageIndex","getDestinations","getDestination","getPageLabels","getPageLayout","getPageMode","getViewerPreferences","getOpenAction","getAttachments","getJavaScript","getJSActions","getOutline","getOptionalContentConfig","getPermissions","getMetadata","getMarkInfo","getData","getDownloadInfo","getStats","cleanup","keepLoadedFonts","loadingParams","loadingTask","saveDocument","getFieldObjects","hasJSActions","getCalculationOrderIds","pdfBug","pageNumber","rotate","ref","userUnit","view","getViewport","getAnnotations","intent","renderingIntent","getXfa","render","renderInteractiveForms","imageLayer","canvasFactory","background","includeAnnotationStorage","optionalContentConfigPromise","intentState","clearTimeout","canvasFactoryInstance","fnArray","argsArray","lastChunk","pageIndex","complete","error","internalRenderTask","callback","objs","commonObjs","operatorList","useRequestAnimationFrame","renderTask","getOperatorList","opListTask","streamTextContent","normalizeWhitespace","disableCombineTextItems","includeMarkedContent","TEXT_CONTENT_CHUNK_SIZE","combineTextItems","highWaterMark","size","textContent","getTextContent","readableStream","reader","pump","items","styles","getStructTree","_destroy","waitOn","force","resetStats","_tryCleanup","renderTasks","_startRenderPage","_renderPageChunk","operatorListChunk","_pumpOperatorList","args","_abortOperatorList","curIntentState","stats","postMessage","cloned","transfers","cloneValue","desc","event","addEventListener","removeEventListener","terminate","pdfWorkerPorts","isWorkerDisabled","nextFakeWorkerId","fallbackWorkerSrc","pdfjsFilePath","mainWorkerMessageHandler","fakeWorkerCapability","loader","getMainThreadWorkerMessageHandler","eval","getWorkerSrc","loadScript","wrapper","_initializeFromPort","_initialize","workerSrc","isSameOrigin","createCDNWrapper","terminateEarly","onWorkerError","sendTest","testObj","info","_setupFakeWorker","setupFakeWorkerGlobal","WorkerMessageHandler","id","workerHandler","fromPort","onUnsupportedFeature","styleElement","page","terminated","setupMessageHandler","evt","loaded","total","sink","readyReason","headersCapability","fullReader","isStreamingSupported","isRangeSupported","contentLength","rangeReader","pdfInfo","ex","msg","exception","updatePassword","exportedError","exportedData","fontRegistry","registerFont","pageProxy","MAX_IMAGE_SIZE_TO_STORE","imageData","_onUnsupportedFeature","pageInfo","filename","getDocJSActions","getPageJSActions","results","metadata","startCleanup","cleanupSuccessful","_ensureObj","resolved","has","clear","cancel","InternalRenderTask","canvasInRendering","completed","initializeGraphics","transparency","operatorListChanged","_continue","_scheduleNext","_next","version","build","addNativeFontFace","insertRule","styleSheet","bind","nativeFontFace","featureId","rule","_queueLoadingCallback","isFontLoadingAPISupported","hasFonts","isSyncFontLoadingSupported","_loadTestFont","_prepareFontLoadEvent","FontLoader","requests","nextRequestId","supported","navigator","otherRequest","setTimeout","done","getLoadTestFont","atob","offset","chunk1","s","chunk2","ctx","called","isFontReady","loadTestFontId","COMMENT_OFFSET","spliceString","CFF_CHECKSUM_OFFSET","XXXX_VALUE","checksum","int32","string32","btoa","names","div","span","translatedData","createNativeFontFace","css","weight","createFontFaceRule","bytesToString","getPathGenerator","cmds","jsBuf","current","NodeCanvasFactory","NodeCMapReaderFactory","NodeStandardFontDataFactory","fs","__non_webpack_require__","Canvas","getValue","setValue","modified","getAll","objectFromMap","_setModified","resetModified","serializable","MIN_FONT_SIZE","MAX_FONT_SIZE","MAX_GROUP_SIZE","COMPILE_TYPE3_GLYPHS","MAX_SIZE_TO_COMPILE","FULL_CHUNK_HEIGHT","LINEWIDTH_SCALE_FACTOR","set","ad_bc","bc_ad","old","prev","cosValue","sinValue","getCanvas","canvasEntry","addContextCurrentTransform","POINT_TO_PROCESS_LIMIT","POINT_TYPES","imgData","width1","points","lineSize","data0","elem","mask","count","j","j0","sum","steps","outlines","coords","p0","step","pp","drawOutline","k","kk","o","l","ll","setCurrentPoint","CanvasGraphics","EXECUTION_TIME","EXECUTION_STEPS","transferMaps","partialChunkHeight","fullChunks","totalChunks","chunkImgData","srcPos","dest","transferMapRed","transferMapGreen","transferMapBlue","transferMapGray","srcLength","dest32","dest32DataLength","fullSrcDiff","white","black","thisChunkHeight","destPos","srcDiff","kEnd","kEndUnrolled","srcByte","hasTransferMaps","elemsInThisChunk","properties","property","sourceCtx","destCtx","alpha","alpha_","r0","g0","b0","maskData","transferMap","layerData","y","hasBackdrop","backdrop","subtype","composeFn","PIXELS_TO_PROCESS","chunkSize","row","chunkHeight","maskCtx","layerCtx","composeSMaskBackdrop","genericComposeSMask","LINE_CAP_STYLES","LINE_JOIN_STYLES","NORMAL_CLIP","EO_CLIP","beginDrawing","transparentCanvas","resetCtxToDefault","viewport","executeOperatorList","executionStartIdx","argsArrayLen","chunkOperations","endTime","stepper","fnId","objsPool","depObjId","continueCallback","endDrawing","_scaleImage","img","widthScale","heightScale","paintWidth","paintHeight","tmpCanvasId","newWidth","newHeight","tmpCanvas","tmpCtx","_createMaskCanvas","fillColor","isPatternFill","maskCanvas","putBinaryImageMask","objToCanvas","maskToCanvas","cord1","cord2","drawnWidth","drawnHeight","fillCanvas","fillCtx","scaled","inverse","states","state","key","beginSMaskGroup","activeSMask","cacheId","scratchCanvas","currentCtx","currentTransform","groupCtx","copyCtxState","suspendSMaskGroup","composeSMask","deltaTransform","resumeSMaskGroup","endSMaskGroup","x","ops","xw","yh","consumePath","strokeColor","lineWidth","needRestore","paths","path","fontObj","bold","italic","typeface","browserFontSize","paintChar","textRenderingMode","fontSize","fillStrokeMode","isAddToPathSet","patternFill","addToPath","isFontSubpixelAAEnabled","fontSizeScale","charSpacing","wordSpacing","fontDirection","textHScale","glyphsLength","glyphs","vertical","spacingDir","defaultVMetrics","widthAdvanceScale","simpleFillText","pattern","patternTransform","resetLineWidthToOne","glyph","isNum","restoreNeeded","spacing","character","accent","vmetric","vx","vy","scaledX","scaledY","measuredWidth","characterScaleX","scaledAccentX","scaledAccentY","charWidth","showType3Text","fontMatrix","isTextInvisible","spacingLength","transformed","urx","ury","getColorN_Pattern","IR","color","baseTransform","canvasGraphicsFactory","createCanvasGraphics","_getPattern","getShadingPattern","inv","bl","br","ul","ur","x0","y0","x1","y1","matrix","bbox","group","bounds","canvasBounds","scaleX","scaleY","startTransformInverse","skewX","skewY","positions","trans","images","image","objId","map","w","h","imgToPaint","putBinaryImageData","position","left","top","entry","visible","tag","getSinglePixelWidth","absDet","sqNorm1","sqNorm2","pixelHeight","getCanvasPosition","isContentVisible","region","getPattern","_createGradient","grad","colorStop","owner","applyBoundingBox","domMatrix","colors","rowSize","tmp","c1","c2","c3","x2","y2","x3","y3","c1r","c1g","c1b","c2r","c2g","c2b","c3r","c3g","c3b","minY","maxY","xa","car","cag","cab","xb","cbr","cbg","cbb","x1_","x2_","ps","figure","cs","verticesPerRow","rows","cols","q","drawTriangle","_createMeshCanvas","EXPECTED_SCALE","MAX_PATTERN_SIZE","BORDER_SIZE","boundsWidth","boundsHeight","combinedScale","paddedWidth","paddedHeight","cachedCanvases","backgroundColor","drawFigure","matrixScale","temporaryPatternCanvas","PaintType","COLORED","UNCOLORED","createPatternCanvas","xstep","ystep","paintType","tilingType","curMatrixScale","dimx","dimy","graphics","adjustedX0","adjustedY0","adjustedX1","adjustedY1","getSizeAndScale","maxSize","TilingPattern","clipBbox","bboxWidth","bboxHeight","setFillAndStrokeStyleToContext","cssColor","CallbackKind","DATA","ERROR","StreamKind","CANCEL","CANCEL_COMPLETE","CLOSE","ENQUEUE","PULL","PULL_COMPLETE","START_COMPLETE","callbackId","wrapReason","action","cbSourceName","cbTargetName","comObj","sourceName","targetName","on","ah","send","sendWithPromise","sendWithStream","streamId","controller","startCapability","startCall","pullCall","cancelCall","isClosed","desiredSize","pull","pullCapability","stream","cancelCapability","_createStreamSink","self","streamSink","enqueue","lastDesiredSize","close","sinkCapability","onPull","onCancel","isCancelled","ready","success","_processStreamMessage","_deleteStreamController","_postMessage","getRaw","_evaluateVisibilityExpression","array","operator","element","isVisible","setVisibility","getOrder","getGroups","getGroup","_onReceiveData","found","_progressiveDataLength","_onProgress","firstReader","_onProgressiveDone","_removeRangeReader","getFullReader","queuedChunks","getRangeReader","cancelAllRequests","isPdfFile","_enqueue","requestCapability","headersReady","read","requestsCapability","parameters","fieldType","isRenderable","ignoreBorder","createQuadrilaterals","_createContainer","container","horizontalRadius","verticalRadius","radius","_createQuadrilaterals","quadrilaterals","savedRect","quadPoint","_createPopup","trigger","popupElement","title","modificationDate","contents","hideWrapper","popup","_renderQuadrilaterals","quadrilateral","addLinkAttributes","target","linkService","rel","linkElement","index","_bindLink","destination","_bindNamedAction","_bindJSAction","jsName","detail","JSON","_getKeyModifier","_setEventListener","baseName","valueGetter","shift","modifier","_setEventListeners","eventName","_dispatchEventFromSandbox","setColor","ColorConverters","commonActions","display","hidden","print","focus","preventScroll","userName","readonly","required","bgColor","fgColor","textColor","borderColor","jsEvent","actions","setPropertyOnSiblings","storage","storedData","valueAsString","elementData","userValue","formattedValue","beforeInputSelectionRange","beforeInputValue","blurListener","selRange","selStart","selEnd","commitKey","willCommit","_blurListener","change","fieldWidth","combWidth","_setTextStyle","TEXT_ALIGNMENT","style","fontColor","checkbox","radio","pdfButtonValue","checked","radioId","selectElement","optionElement","option","isExport","options","getItems","displayValue","exportValue","values","multipleSelection","remove","insert","indices","editable","changeEx","keyDown","IGNORE_TYPES","selector","parentElements","popupLeft","popupTop","BACKGROUND_ENLIGHT","g","dateObject","PDFDateString","_formatContents","lines","line","_toggle","_show","pin","_hide","unpin","borderWidth","square","circle","coordinate","polyline","getFilenameFromUrl","stringToPDFString","_download","sortedAnnotations","popupAnnotations","layer","downloadManager","imageResourcesPath","svgFactory","enableScripting","mouseState","isDown","rendered","update","elements","CMYK_G","G_CMYK","G_RGB","G_HTML","G","makeColorComp","RGB_G","RGB_HTML","R","B","T_HTML","CMYK_RGB","CMYK_HTML","RGB_CMYK","MAX_TEXT_DIVS_TO_RENDER","DEFAULT_FONT_SIZE","DEFAULT_FONT_ASCENT","ascentCache","AllWhitespaceRegexp","cachedAscent","metrics","ascent","descent","ratio","pixels","textDiv","textDivProperties","angle","canvasWidth","hasText","geom","hasEOL","originalTransform","paddingBottom","paddingLeft","paddingRight","paddingTop","tx","fontHeight","fontAscent","getAscent","shouldScaleText","absScaleX","absScaleY","angleCos","angleSin","divWidth","divHeight","right","bottom","textDivs","textDivsLength","t","ts","expanded","expandBounds","divProperties","e","jj","boxScale","findPositiveMin","box","x1New","x2New","expandBoundsLTR","boxes","fakeBoundary","horizon","boundary","maxXNew","horizonPart","affectedBoundary","xNew","changedHorizon","lastBoundary","useBoundary","used","textContentItemsStr","_processItems","len","parent","appendText","_layoutText","fontFamily","_render","timeout","styleCache","textItems","textStyles","expandTextDivs","expandDivs","expand","transformBuf","paddingBuf","divProps","renderParameters","textContentStream","enhanceTextSelection","SVGGraphics","SVG_DEFAULTS","fontStyle","fontWeight","XML_NS","XLINK_NS","convertImgDataToPng","PNG_HEADER","CHUNK_WRAPPER_SIZE","crcTable","crc","body","crc32","deflateSyncUncompressed","input","Buffer","output","level","literals","maxBlockLength","deflateBlocks","idat","pi","adler","adler32","colorType","bitDepth","offsetLiterals","offsetBytes","kind","ihdr","deflateSync","pngLength","writePngChunk","createObjectURL","encode","opTree","opListElement","fn","pf","clipCount","maskCount","shadingCount","loadDependencies","transformMatrix","getSVG","svgElement","convertOpList","operatorIdMapping","opList","opListToTree","executeOpTree","opTreeElement","lineWidthScale","textMatrix","pm","addFontStyle","details","setStrokeAlpha","setFillAlpha","_makeColorN_Pattern","_makeTilingPattern","tilingId","txstep","tystep","tiling","tx1","ty1","_makeShadingPattern","shadingId","colorStops","point0","point1","gradient","focalPoint","circlePoint","focalRadius","circleRadius","stop","op","clipId","clipPath","clipElement","_setStrokeAttributes","dashArray","imgSrc","cliprect","imgEl","definitions","rootGroup","_ensureClipGroup","clipGroup","_ensureTransformGroup","setupStorage","html","setAttributes","attributes","root","rootHtml","stack","rootDiv","child","childHtml","el","http","https","fileUriRegex","parsedUrl","parseUrl","_error","_setReadableStream","auth","host","method","handleResponse","getResponseHeader","isHttp","suggestedLength","extractFilenameFromHeader","createRequestOptions","stat","returnValues","allowRangeRequests","contentEncoding","contentDisposition","getFilenameFromContentDispositionHeader","status","needsEncodingFixup","toParamRegExp","rfc2616unquote","rfc5987decode","rfc2047decode","fixupEncoding","rfc2231getparam","decoder","fatal","textdecode","iter","parts","part","quotindex","encodingend","extvalue","encoding","langvalue","text","OK_RESPONSE","PARTIAL_CONTENT_RESPONSE","xhr","requestRange","listeners","requestFull","xhrId","pendingRequest","onProgress","onStateChange","xhrStatus","ok_response_on_range_request","getArrayBuffer","rangeHeader","begin","getRequestXhr","isPendingRequest","abortRequest","_onRangeRequestReaderClosed","onHeadersReceived","onDone","onError","manager","_onHeadersReceived","fullRequestXhrId","fullRequestXhr","_onDone","_onError","createResponseStatusError","_close","signal","abortController","mode","credentials","redirect","headers","createHeaders","createFetchOptions","validateResponseStatus","pdfjsVersion","pdfjsBuild","require","setPDFNetworkStreamFactory"],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pdfjs-dist/build/pdf\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pdfjs-dist/build/pdf\"] = factory();\n\telse\n\t\troot[\"pdfjs-dist/build/pdf\"] = factory();\n})(this, function() {\nreturn ","/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  BaseException,\n  isString,\n  removeNullCharacters,\n  stringToBytes,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseStandardFontDataFactory,\n  BaseSVGFactory,\n} from \"./base_factory.js\";\n\nconst DEFAULT_LINK_REL = \"noopener noreferrer nofollow\";\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\n\nclass DOMCanvasFactory extends BaseCanvasFactory {\n  constructor({ ownerDocument = globalThis.document } = {}) {\n    super();\n    this._document = ownerDocument;\n  }\n\n  _createCanvas(width, height) {\n    const canvas = this._document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n  }\n}\n\nasync function fetchData(url, asTypedArray = false) {\n  if (\n    (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n    isValidFetchUrl(url, document.baseURI)\n  ) {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return asTypedArray\n      ? new Uint8Array(await response.arrayBuffer())\n      : stringToBytes(await response.text());\n  }\n\n  // The Fetch API is not supported.\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest();\n    request.open(\"GET\", url, /* asTypedArray = */ true);\n\n    if (asTypedArray) {\n      request.responseType = \"arraybuffer\";\n    }\n    request.onreadystatechange = () => {\n      if (request.readyState !== XMLHttpRequest.DONE) {\n        return;\n      }\n      if (request.status === 200 || request.status === 0) {\n        let data;\n        if (asTypedArray && request.response) {\n          data = new Uint8Array(request.response);\n        } else if (!asTypedArray && request.responseText) {\n          data = stringToBytes(request.responseText);\n        }\n        if (data) {\n          resolve(data);\n          return;\n        }\n      }\n      reject(new Error(request.statusText));\n    };\n\n    request.send(null);\n  });\n}\n\nclass DOMCMapReaderFactory extends BaseCMapReaderFactory {\n  _fetchData(url, compressionType) {\n    return fetchData(url, /* asTypedArray = */ this.isCompressed).then(data => {\n      return { cMapData: data, compressionType };\n    });\n  }\n}\n\nclass DOMStandardFontDataFactory extends BaseStandardFontDataFactory {\n  _fetchData(url) {\n    return fetchData(url, /* asTypedArray = */ true);\n  }\n}\n\nclass DOMSVGFactory extends BaseSVGFactory {\n  _createSVG(type) {\n    return document.createElementNS(SVG_NS, type);\n  }\n}\n\n/**\n * @typedef {Object} PageViewportParameters\n * @property {Array<number>} viewBox - The xMin, yMin, xMax and\n *   yMax coordinates.\n * @property {number} scale - The scale of the viewport.\n * @property {number} rotation - The rotation, in degrees, of the viewport.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset. The\n *   default value is `0`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset. The\n *   default value is `0`.\n * @property {boolean} [dontFlip] - If true, the y-axis will not be flipped.\n *   The default value is `false`.\n */\n\n/**\n * @typedef {Object} PageViewportCloneParameters\n * @property {number} [scale] - The scale, overriding the one in the cloned\n *   viewport. The default value is `this.scale`.\n * @property {number} [rotation] - The rotation, in degrees, overriding the one\n *   in the cloned viewport. The default value is `this.rotation`.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset.\n *   The default value is `this.offsetX`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset.\n *   The default value is `this.offsetY`.\n * @property {boolean} [dontFlip] - If true, the x-axis will not be flipped.\n *   The default value is `false`.\n */\n\n/**\n * PDF page viewport created based on scale, rotation and offset.\n */\nclass PageViewport {\n  /**\n   * @param {PageViewportParameters}\n   */\n  constructor({\n    viewBox,\n    scale,\n    rotation,\n    offsetX = 0,\n    offsetY = 0,\n    dontFlip = false,\n  }) {\n    this.viewBox = viewBox;\n    this.scale = scale;\n    this.rotation = rotation;\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n\n    // creating transform to convert pdf coordinate system to the normal\n    // canvas like coordinates taking in account scale and rotation\n    const centerX = (viewBox[2] + viewBox[0]) / 2;\n    const centerY = (viewBox[3] + viewBox[1]) / 2;\n    let rotateA, rotateB, rotateC, rotateD;\n    // Normalize the rotation, by clamping it to the [0, 360) range.\n    rotation %= 360;\n    if (rotation < 0) {\n      rotation += 360;\n    }\n    switch (rotation) {\n      case 180:\n        rotateA = -1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = 1;\n        break;\n      case 90:\n        rotateA = 0;\n        rotateB = 1;\n        rotateC = 1;\n        rotateD = 0;\n        break;\n      case 270:\n        rotateA = 0;\n        rotateB = -1;\n        rotateC = -1;\n        rotateD = 0;\n        break;\n      case 0:\n        rotateA = 1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = -1;\n        break;\n      default:\n        throw new Error(\n          \"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\"\n        );\n    }\n\n    if (dontFlip) {\n      rotateC = -rotateC;\n      rotateD = -rotateD;\n    }\n\n    let offsetCanvasX, offsetCanvasY;\n    let width, height;\n    if (rotateA === 0) {\n      offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n      width = Math.abs(viewBox[3] - viewBox[1]) * scale;\n      height = Math.abs(viewBox[2] - viewBox[0]) * scale;\n    } else {\n      offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n      width = Math.abs(viewBox[2] - viewBox[0]) * scale;\n      height = Math.abs(viewBox[3] - viewBox[1]) * scale;\n    }\n    // creating transform for the following operations:\n    // translate(-centerX, -centerY), rotate and flip vertically,\n    // scale, and translate(offsetCanvasX, offsetCanvasY)\n    this.transform = [\n      rotateA * scale,\n      rotateB * scale,\n      rotateC * scale,\n      rotateD * scale,\n      offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY,\n      offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY,\n    ];\n\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * Clones viewport, with optional additional properties.\n   * @param {PageViewportCloneParameters} [params]\n   * @returns {PageViewport} Cloned viewport.\n   */\n  clone({\n    scale = this.scale,\n    rotation = this.rotation,\n    offsetX = this.offsetX,\n    offsetY = this.offsetY,\n    dontFlip = false,\n  } = {}) {\n    return new PageViewport({\n      viewBox: this.viewBox.slice(),\n      scale,\n      rotation,\n      offsetX,\n      offsetY,\n      dontFlip,\n    });\n  }\n\n  /**\n   * Converts PDF point to the viewport coordinates. For examples, useful for\n   * converting PDF location into canvas pixel coordinates.\n   * @param {number} x - The x-coordinate.\n   * @param {number} y - The y-coordinate.\n   * @returns {Object} Object containing `x` and `y` properties of the\n   *   point in the viewport coordinate space.\n   * @see {@link convertToPdfPoint}\n   * @see {@link convertToViewportRectangle}\n   */\n  convertToViewportPoint(x, y) {\n    return Util.applyTransform([x, y], this.transform);\n  }\n\n  /**\n   * Converts PDF rectangle to the viewport coordinates.\n   * @param {Array} rect - The xMin, yMin, xMax and yMax coordinates.\n   * @returns {Array} Array containing corresponding coordinates of the\n   *   rectangle in the viewport coordinate space.\n   * @see {@link convertToViewportPoint}\n   */\n  convertToViewportRectangle(rect) {\n    const topLeft = Util.applyTransform([rect[0], rect[1]], this.transform);\n    const bottomRight = Util.applyTransform([rect[2], rect[3]], this.transform);\n    return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n  }\n\n  /**\n   * Converts viewport coordinates to the PDF location. For examples, useful\n   * for converting canvas pixel location into PDF one.\n   * @param {number} x - The x-coordinate.\n   * @param {number} y - The y-coordinate.\n   * @returns {Object} Object containing `x` and `y` properties of the\n   *   point in the PDF coordinate space.\n   * @see {@link convertToViewportPoint}\n   */\n  convertToPdfPoint(x, y) {\n    return Util.applyInverseTransform([x, y], this.transform);\n  }\n}\n\nclass RenderingCancelledException extends BaseException {\n  constructor(msg, type) {\n    super(msg);\n    this.type = type;\n  }\n}\n\nconst LinkTarget = {\n  NONE: 0, // Default value.\n  SELF: 1,\n  BLANK: 2,\n  PARENT: 3,\n  TOP: 4,\n};\n\n/**\n * @typedef ExternalLinkParameters\n * @typedef {Object} ExternalLinkParameters\n * @property {string} url - An absolute URL.\n * @property {LinkTarget} [target] - The link target. The default value is\n *   `LinkTarget.NONE`.\n * @property {string} [rel] - The link relationship. The default value is\n *   `DEFAULT_LINK_REL`.\n * @property {boolean} [enabled] - Whether the link should be enabled. The\n *   default value is true.\n */\n\n/**\n * Adds various attributes (href, title, target, rel) to hyperlinks.\n * @param {HTMLLinkElement} link - The link element.\n * @param {ExternalLinkParameters} params\n */\nfunction addLinkAttributes(link, { url, target, rel, enabled = true } = {}) {\n  assert(\n    url && typeof url === \"string\",\n    'addLinkAttributes: A valid \"url\" parameter must provided.'\n  );\n\n  const urlNullRemoved = removeNullCharacters(url);\n  if (enabled) {\n    link.href = link.title = urlNullRemoved;\n  } else {\n    link.href = \"\";\n    link.title = `Disabled: ${urlNullRemoved}`;\n    link.onclick = () => {\n      return false;\n    };\n  }\n\n  let targetStr = \"\"; // LinkTarget.NONE\n  switch (target) {\n    case LinkTarget.NONE:\n      break;\n    case LinkTarget.SELF:\n      targetStr = \"_self\";\n      break;\n    case LinkTarget.BLANK:\n      targetStr = \"_blank\";\n      break;\n    case LinkTarget.PARENT:\n      targetStr = \"_parent\";\n      break;\n    case LinkTarget.TOP:\n      targetStr = \"_top\";\n      break;\n  }\n  link.target = targetStr;\n\n  link.rel = typeof rel === \"string\" ? rel : DEFAULT_LINK_REL;\n}\n\nfunction isDataScheme(url) {\n  const ii = url.length;\n  let i = 0;\n  while (i < ii && url[i].trim() === \"\") {\n    i++;\n  }\n  return url.substring(i, i + 5).toLowerCase() === \"data:\";\n}\n\nfunction isPdfFile(filename) {\n  return typeof filename === \"string\" && /\\.pdf$/i.test(filename);\n}\n\n/**\n * Gets the filename from a given URL.\n * @param {string} url\n * @returns {string}\n */\nfunction getFilenameFromUrl(url) {\n  const anchor = url.indexOf(\"#\");\n  const query = url.indexOf(\"?\");\n  const end = Math.min(\n    anchor > 0 ? anchor : url.length,\n    query > 0 ? query : url.length\n  );\n  return url.substring(url.lastIndexOf(\"/\", end) + 1, end);\n}\n\n/**\n * Returns the filename or guessed filename from the url (see issue 3455).\n * @param {string} url - The original PDF location.\n * @param {string} defaultFilename - The value returned if the filename is\n *   unknown, or the protocol is unsupported.\n * @returns {string} Guessed PDF filename.\n */\nfunction getPdfFilenameFromUrl(url, defaultFilename = \"document.pdf\") {\n  if (typeof url !== \"string\") {\n    return defaultFilename;\n  }\n  if (isDataScheme(url)) {\n    warn('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');\n    return defaultFilename;\n  }\n  const reURI = /^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n  //              SCHEME        HOST        1.PATH  2.QUERY   3.REF\n  // Pattern to get last matching NAME.pdf\n  const reFilename = /[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n  const splitURI = reURI.exec(url);\n  let suggestedFilename =\n    reFilename.exec(splitURI[1]) ||\n    reFilename.exec(splitURI[2]) ||\n    reFilename.exec(splitURI[3]);\n  if (suggestedFilename) {\n    suggestedFilename = suggestedFilename[0];\n    if (suggestedFilename.includes(\"%\")) {\n      // URL-encoded %2Fpath%2Fto%2Ffile.pdf should be file.pdf\n      try {\n        suggestedFilename = reFilename.exec(\n          decodeURIComponent(suggestedFilename)\n        )[0];\n      } catch (ex) {\n        // Possible (extremely rare) errors:\n        // URIError \"Malformed URI\", e.g. for \"%AA.pdf\"\n        // TypeError \"null has no properties\", e.g. for \"%2F.pdf\"\n      }\n    }\n  }\n  return suggestedFilename || defaultFilename;\n}\n\nclass StatTimer {\n  constructor() {\n    this.started = Object.create(null);\n    this.times = [];\n  }\n\n  time(name) {\n    if (name in this.started) {\n      warn(`Timer is already running for ${name}`);\n    }\n    this.started[name] = Date.now();\n  }\n\n  timeEnd(name) {\n    if (!(name in this.started)) {\n      warn(`Timer has not been started for ${name}`);\n    }\n    this.times.push({\n      name,\n      start: this.started[name],\n      end: Date.now(),\n    });\n    // Remove timer from started so it can be called again.\n    delete this.started[name];\n  }\n\n  toString() {\n    // Find the longest name for padding purposes.\n    const outBuf = [];\n    let longest = 0;\n    for (const time of this.times) {\n      const name = time.name;\n      if (name.length > longest) {\n        longest = name.length;\n      }\n    }\n    for (const time of this.times) {\n      const duration = time.end - time.start;\n      outBuf.push(`${time.name.padEnd(longest)} ${duration}ms\\n`);\n    }\n    return outBuf.join(\"\");\n  }\n}\n\nfunction isValidFetchUrl(url, baseUrl) {\n  try {\n    const { protocol } = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    // The Fetch API only supports the http/https protocols, and not file/ftp.\n    return protocol === \"http:\" || protocol === \"https:\";\n  } catch (ex) {\n    return false; // `new URL()` will throw on incorrect data.\n  }\n}\n\n/**\n * @param {string} src\n * @param {boolean} [removeScriptElement]\n * @returns {Promise<void>}\n */\nfunction loadScript(src, removeScriptElement = false) {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement(\"script\");\n    script.src = src;\n\n    script.onload = function (evt) {\n      if (removeScriptElement) {\n        script.remove();\n      }\n      resolve(evt);\n    };\n    script.onerror = function () {\n      reject(new Error(`Cannot load script at: ${script.src}`));\n    };\n    (document.head || document.documentElement).appendChild(script);\n  });\n}\n\n// Deprecated API function -- display regardless of the `verbosity` setting.\nfunction deprecated(details) {\n  console.log(\"Deprecated API usage: \" + details);\n}\n\nlet pdfDateStringRegex;\n\nclass PDFDateString {\n  /**\n   * Convert a PDF date string to a JavaScript `Date` object.\n   *\n   * The PDF date string format is described in section 7.9.4 of the official\n   * PDF 32000-1:2008 specification. However, in the PDF 1.7 reference (sixth\n   * edition) Adobe describes the same format including a trailing apostrophe.\n   * This syntax in incorrect, but Adobe Acrobat creates PDF files that contain\n   * them. We ignore all apostrophes as they are not necessary for date parsing.\n   *\n   * Moreover, Adobe Acrobat doesn't handle changing the date to universal time\n   * and doesn't use the user's time zone (effectively ignoring the HH' and mm'\n   * parts of the date string).\n   *\n   * @param {string} input\n   * @returns {Date|null}\n   */\n  static toDateObject(input) {\n    if (!input || !isString(input)) {\n      return null;\n    }\n\n    // Lazily initialize the regular expression.\n    if (!pdfDateStringRegex) {\n      pdfDateStringRegex = new RegExp(\n        \"^D:\" + // Prefix (required)\n          \"(\\\\d{4})\" + // Year (required)\n          \"(\\\\d{2})?\" + // Month (optional)\n          \"(\\\\d{2})?\" + // Day (optional)\n          \"(\\\\d{2})?\" + // Hour (optional)\n          \"(\\\\d{2})?\" + // Minute (optional)\n          \"(\\\\d{2})?\" + // Second (optional)\n          \"([Z|+|-])?\" + // Universal time relation (optional)\n          \"(\\\\d{2})?\" + // Offset hour (optional)\n          \"'?\" + // Splitting apostrophe (optional)\n          \"(\\\\d{2})?\" + // Offset minute (optional)\n          \"'?\" // Trailing apostrophe (optional)\n      );\n    }\n\n    // Optional fields that don't satisfy the requirements from the regular\n    // expression (such as incorrect digit counts or numbers that are out of\n    // range) will fall back the defaults from the specification.\n    const matches = pdfDateStringRegex.exec(input);\n    if (!matches) {\n      return null;\n    }\n\n    // JavaScript's `Date` object expects the month to be between 0 and 11\n    // instead of 1 and 12, so we have to correct for that.\n    const year = parseInt(matches[1], 10);\n    let month = parseInt(matches[2], 10);\n    month = month >= 1 && month <= 12 ? month - 1 : 0;\n    let day = parseInt(matches[3], 10);\n    day = day >= 1 && day <= 31 ? day : 1;\n    let hour = parseInt(matches[4], 10);\n    hour = hour >= 0 && hour <= 23 ? hour : 0;\n    let minute = parseInt(matches[5], 10);\n    minute = minute >= 0 && minute <= 59 ? minute : 0;\n    let second = parseInt(matches[6], 10);\n    second = second >= 0 && second <= 59 ? second : 0;\n    const universalTimeRelation = matches[7] || \"Z\";\n    let offsetHour = parseInt(matches[8], 10);\n    offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n    let offsetMinute = parseInt(matches[9], 10) || 0;\n    offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n\n    // Universal time relation 'Z' means that the local time is equal to the\n    // universal time, whereas the relations '+'/'-' indicate that the local\n    // time is later respectively earlier than the universal time. Every date\n    // is normalized to universal time.\n    if (universalTimeRelation === \"-\") {\n      hour += offsetHour;\n      minute += offsetMinute;\n    } else if (universalTimeRelation === \"+\") {\n      hour -= offsetHour;\n      minute -= offsetMinute;\n    }\n\n    return new Date(Date.UTC(year, month, day, hour, minute, second));\n  }\n}\n\n/**\n * NOTE: This is (mostly) intended to support printing of XFA forms.\n */\nfunction getXfaPageViewport(xfaPage, { scale = 1, rotation = 0 }) {\n  const { width, height } = xfaPage.attributes.style;\n  const viewBox = [0, 0, parseInt(width), parseInt(height)];\n\n  return new PageViewport({\n    viewBox,\n    scale,\n    rotation,\n  });\n}\n\nexport {\n  addLinkAttributes,\n  DEFAULT_LINK_REL,\n  deprecated,\n  DOMCanvasFactory,\n  DOMCMapReaderFactory,\n  DOMStandardFontDataFactory,\n  DOMSVGFactory,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  getXfaPageViewport,\n  isDataScheme,\n  isPdfFile,\n  isValidFetchUrl,\n  LinkTarget,\n  loadScript,\n  PageViewport,\n  PDFDateString,\n  RenderingCancelledException,\n  StatTimer,\n};\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./compatibility.js\";\n\nconst IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\nconst FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n\n// Permission flags from Table 22, Section 7.6.3.2 of the PDF specification.\nconst PermissionFlag = {\n  PRINT: 0x04,\n  MODIFY_CONTENTS: 0x08,\n  COPY: 0x10,\n  MODIFY_ANNOTATIONS: 0x20,\n  FILL_INTERACTIVE_FORMS: 0x100,\n  COPY_FOR_ACCESSIBILITY: 0x200,\n  ASSEMBLE: 0x400,\n  PRINT_HIGH_QUALITY: 0x800,\n};\n\nconst TextRenderingMode = {\n  FILL: 0,\n  STROKE: 1,\n  FILL_STROKE: 2,\n  INVISIBLE: 3,\n  FILL_ADD_TO_PATH: 4,\n  STROKE_ADD_TO_PATH: 5,\n  FILL_STROKE_ADD_TO_PATH: 6,\n  ADD_TO_PATH: 7,\n  FILL_STROKE_MASK: 3,\n  ADD_TO_PATH_FLAG: 4,\n};\n\nconst ImageKind = {\n  GRAYSCALE_1BPP: 1,\n  RGB_24BPP: 2,\n  RGBA_32BPP: 3,\n};\n\nconst AnnotationType = {\n  TEXT: 1,\n  LINK: 2,\n  FREETEXT: 3,\n  LINE: 4,\n  SQUARE: 5,\n  CIRCLE: 6,\n  POLYGON: 7,\n  POLYLINE: 8,\n  HIGHLIGHT: 9,\n  UNDERLINE: 10,\n  SQUIGGLY: 11,\n  STRIKEOUT: 12,\n  STAMP: 13,\n  CARET: 14,\n  INK: 15,\n  POPUP: 16,\n  FILEATTACHMENT: 17,\n  SOUND: 18,\n  MOVIE: 19,\n  WIDGET: 20,\n  SCREEN: 21,\n  PRINTERMARK: 22,\n  TRAPNET: 23,\n  WATERMARK: 24,\n  THREED: 25,\n  REDACT: 26,\n};\n\nconst AnnotationStateModelType = {\n  MARKED: \"Marked\",\n  REVIEW: \"Review\",\n};\n\nconst AnnotationMarkedState = {\n  MARKED: \"Marked\",\n  UNMARKED: \"Unmarked\",\n};\n\nconst AnnotationReviewState = {\n  ACCEPTED: \"Accepted\",\n  REJECTED: \"Rejected\",\n  CANCELLED: \"Cancelled\",\n  COMPLETED: \"Completed\",\n  NONE: \"None\",\n};\n\nconst AnnotationReplyType = {\n  GROUP: \"Group\",\n  REPLY: \"R\",\n};\n\nconst AnnotationFlag = {\n  INVISIBLE: 0x01,\n  HIDDEN: 0x02,\n  PRINT: 0x04,\n  NOZOOM: 0x08,\n  NOROTATE: 0x10,\n  NOVIEW: 0x20,\n  READONLY: 0x40,\n  LOCKED: 0x80,\n  TOGGLENOVIEW: 0x100,\n  LOCKEDCONTENTS: 0x200,\n};\n\nconst AnnotationFieldFlag = {\n  READONLY: 0x0000001,\n  REQUIRED: 0x0000002,\n  NOEXPORT: 0x0000004,\n  MULTILINE: 0x0001000,\n  PASSWORD: 0x0002000,\n  NOTOGGLETOOFF: 0x0004000,\n  RADIO: 0x0008000,\n  PUSHBUTTON: 0x0010000,\n  COMBO: 0x0020000,\n  EDIT: 0x0040000,\n  SORT: 0x0080000,\n  FILESELECT: 0x0100000,\n  MULTISELECT: 0x0200000,\n  DONOTSPELLCHECK: 0x0400000,\n  DONOTSCROLL: 0x0800000,\n  COMB: 0x1000000,\n  RICHTEXT: 0x2000000,\n  RADIOSINUNISON: 0x2000000,\n  COMMITONSELCHANGE: 0x4000000,\n};\n\nconst AnnotationBorderStyleType = {\n  SOLID: 1,\n  DASHED: 2,\n  BEVELED: 3,\n  INSET: 4,\n  UNDERLINE: 5,\n};\n\nconst AnnotationActionEventType = {\n  E: \"Mouse Enter\",\n  X: \"Mouse Exit\",\n  D: \"Mouse Down\",\n  U: \"Mouse Up\",\n  Fo: \"Focus\",\n  Bl: \"Blur\",\n  PO: \"PageOpen\",\n  PC: \"PageClose\",\n  PV: \"PageVisible\",\n  PI: \"PageInvisible\",\n  K: \"Keystroke\",\n  F: \"Format\",\n  V: \"Validate\",\n  C: \"Calculate\",\n};\n\nconst DocumentActionEventType = {\n  WC: \"WillClose\",\n  WS: \"WillSave\",\n  DS: \"DidSave\",\n  WP: \"WillPrint\",\n  DP: \"DidPrint\",\n};\n\nconst PageActionEventType = {\n  O: \"PageOpen\",\n  C: \"PageClose\",\n};\n\nconst StreamType = {\n  UNKNOWN: \"UNKNOWN\",\n  FLATE: \"FLATE\",\n  LZW: \"LZW\",\n  DCT: \"DCT\",\n  JPX: \"JPX\",\n  JBIG: \"JBIG\",\n  A85: \"A85\",\n  AHX: \"AHX\",\n  CCF: \"CCF\",\n  RLX: \"RLX\", // PDF short name is 'RL', but telemetry requires three chars.\n};\n\nconst FontType = {\n  UNKNOWN: \"UNKNOWN\",\n  TYPE1: \"TYPE1\",\n  TYPE1STANDARD: \"TYPE1STANDARD\",\n  TYPE1C: \"TYPE1C\",\n  CIDFONTTYPE0: \"CIDFONTTYPE0\",\n  CIDFONTTYPE0C: \"CIDFONTTYPE0C\",\n  TRUETYPE: \"TRUETYPE\",\n  CIDFONTTYPE2: \"CIDFONTTYPE2\",\n  TYPE3: \"TYPE3\",\n  OPENTYPE: \"OPENTYPE\",\n  TYPE0: \"TYPE0\",\n  MMTYPE1: \"MMTYPE1\",\n};\n\nconst VerbosityLevel = {\n  ERRORS: 0,\n  WARNINGS: 1,\n  INFOS: 5,\n};\n\nconst CMapCompressionType = {\n  NONE: 0,\n  BINARY: 1,\n  STREAM: 2,\n};\n\n// All the possible operations for an operator list.\nconst OPS = {\n  // Intentionally start from 1 so it is easy to spot bad operators that will be\n  // 0's.\n  dependency: 1,\n  setLineWidth: 2,\n  setLineCap: 3,\n  setLineJoin: 4,\n  setMiterLimit: 5,\n  setDash: 6,\n  setRenderingIntent: 7,\n  setFlatness: 8,\n  setGState: 9,\n  save: 10,\n  restore: 11,\n  transform: 12,\n  moveTo: 13,\n  lineTo: 14,\n  curveTo: 15,\n  curveTo2: 16,\n  curveTo3: 17,\n  closePath: 18,\n  rectangle: 19,\n  stroke: 20,\n  closeStroke: 21,\n  fill: 22,\n  eoFill: 23,\n  fillStroke: 24,\n  eoFillStroke: 25,\n  closeFillStroke: 26,\n  closeEOFillStroke: 27,\n  endPath: 28,\n  clip: 29,\n  eoClip: 30,\n  beginText: 31,\n  endText: 32,\n  setCharSpacing: 33,\n  setWordSpacing: 34,\n  setHScale: 35,\n  setLeading: 36,\n  setFont: 37,\n  setTextRenderingMode: 38,\n  setTextRise: 39,\n  moveText: 40,\n  setLeadingMoveText: 41,\n  setTextMatrix: 42,\n  nextLine: 43,\n  showText: 44,\n  showSpacedText: 45,\n  nextLineShowText: 46,\n  nextLineSetSpacingShowText: 47,\n  setCharWidth: 48,\n  setCharWidthAndBounds: 49,\n  setStrokeColorSpace: 50,\n  setFillColorSpace: 51,\n  setStrokeColor: 52,\n  setStrokeColorN: 53,\n  setFillColor: 54,\n  setFillColorN: 55,\n  setStrokeGray: 56,\n  setFillGray: 57,\n  setStrokeRGBColor: 58,\n  setFillRGBColor: 59,\n  setStrokeCMYKColor: 60,\n  setFillCMYKColor: 61,\n  shadingFill: 62,\n  beginInlineImage: 63,\n  beginImageData: 64,\n  endInlineImage: 65,\n  paintXObject: 66,\n  markPoint: 67,\n  markPointProps: 68,\n  beginMarkedContent: 69,\n  beginMarkedContentProps: 70,\n  endMarkedContent: 71,\n  beginCompat: 72,\n  endCompat: 73,\n  paintFormXObjectBegin: 74,\n  paintFormXObjectEnd: 75,\n  beginGroup: 76,\n  endGroup: 77,\n  beginAnnotations: 78,\n  endAnnotations: 79,\n  beginAnnotation: 80,\n  endAnnotation: 81,\n  paintJpegXObject: 82,\n  paintImageMaskXObject: 83,\n  paintImageMaskXObjectGroup: 84,\n  paintImageXObject: 85,\n  paintInlineImageXObject: 86,\n  paintInlineImageXObjectGroup: 87,\n  paintImageXObjectRepeat: 88,\n  paintImageMaskXObjectRepeat: 89,\n  paintSolidColorImageMask: 90,\n  constructPath: 91,\n};\n\nconst UNSUPPORTED_FEATURES = {\n  /** @deprecated unused */\n  unknown: \"unknown\",\n  forms: \"forms\",\n  javaScript: \"javaScript\",\n  signatures: \"signatures\",\n  smask: \"smask\",\n  shadingPattern: \"shadingPattern\",\n  /** @deprecated unused */\n  font: \"font\",\n  errorTilingPattern: \"errorTilingPattern\",\n  errorExtGState: \"errorExtGState\",\n  errorXObject: \"errorXObject\",\n  errorFontLoadType3: \"errorFontLoadType3\",\n  errorFontState: \"errorFontState\",\n  errorFontMissing: \"errorFontMissing\",\n  errorFontTranslate: \"errorFontTranslate\",\n  errorColorSpace: \"errorColorSpace\",\n  errorOperatorList: \"errorOperatorList\",\n  errorFontToUnicode: \"errorFontToUnicode\",\n  errorFontLoadNative: \"errorFontLoadNative\",\n  errorFontBuildPath: \"errorFontBuildPath\",\n  errorFontGetPath: \"errorFontGetPath\",\n  errorMarkedContent: \"errorMarkedContent\",\n};\n\nconst PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2,\n};\n\nlet verbosity = VerbosityLevel.WARNINGS;\n\nfunction setVerbosityLevel(level) {\n  if (Number.isInteger(level)) {\n    verbosity = level;\n  }\n}\n\nfunction getVerbosityLevel() {\n  return verbosity;\n}\n\n// A notice for devs. These are good for things that are helpful to devs, such\n// as warning that Workers were disabled, which is important to devs but not\n// end users.\nfunction info(msg) {\n  if (verbosity >= VerbosityLevel.INFOS) {\n    console.log(`Info: ${msg}`);\n  }\n}\n\n// Non-fatal warnings.\nfunction warn(msg) {\n  if (verbosity >= VerbosityLevel.WARNINGS) {\n    console.log(`Warning: ${msg}`);\n  }\n}\n\nfunction unreachable(msg) {\n  throw new Error(msg);\n}\n\nfunction assert(cond, msg) {\n  if (!cond) {\n    unreachable(msg);\n  }\n}\n\n// Checks if URLs have the same origin. For non-HTTP based URLs, returns false.\nfunction isSameOrigin(baseUrl, otherUrl) {\n  let base;\n  try {\n    base = new URL(baseUrl);\n    if (!base.origin || base.origin === \"null\") {\n      return false; // non-HTTP url\n    }\n  } catch (e) {\n    return false;\n  }\n\n  const other = new URL(otherUrl, base);\n  return base.origin === other.origin;\n}\n\n// Checks if URLs use one of the allowed protocols, e.g. to avoid XSS.\nfunction _isValidProtocol(url) {\n  if (!url) {\n    return false;\n  }\n  switch (url.protocol) {\n    case \"http:\":\n    case \"https:\":\n    case \"ftp:\":\n    case \"mailto:\":\n    case \"tel:\":\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Attempts to create a valid absolute URL.\n *\n * @param {URL|string} url - An absolute, or relative, URL.\n * @param {URL|string} baseUrl - An absolute URL.\n * @returns Either a valid {URL}, or `null` otherwise.\n */\nfunction createValidAbsoluteUrl(url, baseUrl) {\n  if (!url) {\n    return null;\n  }\n  try {\n    const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    if (_isValidProtocol(absoluteUrl)) {\n      return absoluteUrl;\n    }\n  } catch (ex) {\n    /* `new URL()` will throw on incorrect data. */\n  }\n  return null;\n}\n\nfunction shadow(obj, prop, value) {\n  Object.defineProperty(obj, prop, {\n    value,\n    enumerable: true,\n    configurable: true,\n    writable: false,\n  });\n  return value;\n}\n\n/**\n * @type {any}\n */\nconst BaseException = (function BaseExceptionClosure() {\n  // eslint-disable-next-line no-shadow\n  function BaseException(message) {\n    if (this.constructor === BaseException) {\n      unreachable(\"Cannot initialize BaseException.\");\n    }\n    this.message = message;\n    this.name = this.constructor.name;\n  }\n  BaseException.prototype = new Error();\n  BaseException.constructor = BaseException;\n\n  return BaseException;\n})();\n\nclass PasswordException extends BaseException {\n  constructor(msg, code) {\n    super(msg);\n    this.code = code;\n  }\n}\n\nclass UnknownErrorException extends BaseException {\n  constructor(msg, details) {\n    super(msg);\n    this.details = details;\n  }\n}\n\nclass InvalidPDFException extends BaseException {}\n\nclass MissingPDFException extends BaseException {}\n\nclass UnexpectedResponseException extends BaseException {\n  constructor(msg, status) {\n    super(msg);\n    this.status = status;\n  }\n}\n\n/**\n * Error caused during parsing PDF data.\n */\nclass FormatError extends BaseException {}\n\n/**\n * Error used to indicate task cancellation.\n */\nclass AbortException extends BaseException {}\n\nconst NullCharactersRegExp = /\\x00/g;\n\n/**\n * @param {string} str\n */\nfunction removeNullCharacters(str) {\n  if (typeof str !== \"string\") {\n    warn(\"The argument for removeNullCharacters must be a string.\");\n    return str;\n  }\n  return str.replace(NullCharactersRegExp, \"\");\n}\n\nfunction bytesToString(bytes) {\n  assert(\n    bytes !== null && typeof bytes === \"object\" && bytes.length !== undefined,\n    \"Invalid argument for bytesToString\"\n  );\n  const length = bytes.length;\n  const MAX_ARGUMENT_COUNT = 8192;\n  if (length < MAX_ARGUMENT_COUNT) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n  const strBuf = [];\n  for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n    const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n    const chunk = bytes.subarray(i, chunkEnd);\n    strBuf.push(String.fromCharCode.apply(null, chunk));\n  }\n  return strBuf.join(\"\");\n}\n\nfunction stringToBytes(str) {\n  assert(typeof str === \"string\", \"Invalid argument for stringToBytes\");\n  const length = str.length;\n  const bytes = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    bytes[i] = str.charCodeAt(i) & 0xff;\n  }\n  return bytes;\n}\n\n/**\n * Gets length of the array (Array, Uint8Array, or string) in bytes.\n * @param {Array<any>|Uint8Array|string} arr\n * @returns {number}\n */\nfunction arrayByteLength(arr) {\n  if (arr.length !== undefined) {\n    return arr.length;\n  }\n  assert(arr.byteLength !== undefined, \"arrayByteLength - invalid argument.\");\n  return arr.byteLength;\n}\n\n/**\n * Combines array items (arrays) into single Uint8Array object.\n * @param {Array<Array<any>|Uint8Array|string>} arr - the array of the arrays\n *   (Array, Uint8Array, or string).\n * @returns {Uint8Array}\n */\nfunction arraysToBytes(arr) {\n  const length = arr.length;\n  // Shortcut: if first and only item is Uint8Array, return it.\n  if (length === 1 && arr[0] instanceof Uint8Array) {\n    return arr[0];\n  }\n  let resultLength = 0;\n  for (let i = 0; i < length; i++) {\n    resultLength += arrayByteLength(arr[i]);\n  }\n  let pos = 0;\n  const data = new Uint8Array(resultLength);\n  for (let i = 0; i < length; i++) {\n    let item = arr[i];\n    if (!(item instanceof Uint8Array)) {\n      if (typeof item === \"string\") {\n        item = stringToBytes(item);\n      } else {\n        item = new Uint8Array(item);\n      }\n    }\n    const itemLength = item.byteLength;\n    data.set(item, pos);\n    pos += itemLength;\n  }\n  return data;\n}\n\nfunction string32(value) {\n  if (\n    typeof PDFJSDev === \"undefined\" ||\n    PDFJSDev.test(\"!PRODUCTION || TESTING\")\n  ) {\n    assert(\n      typeof value === \"number\" && Math.abs(value) < 2 ** 32,\n      `string32: Unexpected input \"${value}\".`\n    );\n  }\n  return String.fromCharCode(\n    (value >> 24) & 0xff,\n    (value >> 16) & 0xff,\n    (value >> 8) & 0xff,\n    value & 0xff\n  );\n}\n\nfunction objectSize(obj) {\n  return Object.keys(obj).length;\n}\n\n// Ensure that the returned Object has a `null` prototype; hence why\n// `Object.fromEntries(...)` is not used.\nfunction objectFromMap(map) {\n  const obj = Object.create(null);\n  for (const [key, value] of map) {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n// Checks the endianness of the platform.\nfunction isLittleEndian() {\n  const buffer8 = new Uint8Array(4);\n  buffer8[0] = 1;\n  const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n  return view32[0] === 1;\n}\nconst IsLittleEndianCached = {\n  get value() {\n    return shadow(this, \"value\", isLittleEndian());\n  },\n};\n\n// Checks if it's possible to eval JS expressions.\nfunction isEvalSupported() {\n  try {\n    new Function(\"\"); // eslint-disable-line no-new, no-new-func\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nconst IsEvalSupportedCached = {\n  get value() {\n    return shadow(this, \"value\", isEvalSupported());\n  },\n};\n\nconst hexNumbers = [...Array(256).keys()].map(n =>\n  n.toString(16).padStart(2, \"0\")\n);\n\nclass Util {\n  static makeHexColor(r, g, b) {\n    return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n  }\n\n  // Concatenates two transformation matrices together and returns the result.\n  static transform(m1, m2) {\n    return [\n      m1[0] * m2[0] + m1[2] * m2[1],\n      m1[1] * m2[0] + m1[3] * m2[1],\n      m1[0] * m2[2] + m1[2] * m2[3],\n      m1[1] * m2[2] + m1[3] * m2[3],\n      m1[0] * m2[4] + m1[2] * m2[5] + m1[4],\n      m1[1] * m2[4] + m1[3] * m2[5] + m1[5],\n    ];\n  }\n\n  // For 2d affine transforms\n  static applyTransform(p, m) {\n    const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n    const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n    return [xt, yt];\n  }\n\n  static applyInverseTransform(p, m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n    const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n    return [xt, yt];\n  }\n\n  // Applies the transform to the rectangle and finds the minimum axially\n  // aligned bounding box.\n  static getAxialAlignedBoundingBox(r, m) {\n    const p1 = Util.applyTransform(r, m);\n    const p2 = Util.applyTransform(r.slice(2, 4), m);\n    const p3 = Util.applyTransform([r[0], r[3]], m);\n    const p4 = Util.applyTransform([r[2], r[1]], m);\n    return [\n      Math.min(p1[0], p2[0], p3[0], p4[0]),\n      Math.min(p1[1], p2[1], p3[1], p4[1]),\n      Math.max(p1[0], p2[0], p3[0], p4[0]),\n      Math.max(p1[1], p2[1], p3[1], p4[1]),\n    ];\n  }\n\n  static inverseTransform(m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    return [\n      m[3] / d,\n      -m[1] / d,\n      -m[2] / d,\n      m[0] / d,\n      (m[2] * m[5] - m[4] * m[3]) / d,\n      (m[4] * m[1] - m[5] * m[0]) / d,\n    ];\n  }\n\n  // Apply a generic 3d matrix M on a 3-vector v:\n  //   | a b c |   | X |\n  //   | d e f | x | Y |\n  //   | g h i |   | Z |\n  // M is assumed to be serialized as [a,b,c,d,e,f,g,h,i],\n  // with v as [X,Y,Z]\n  static apply3dTransform(m, v) {\n    return [\n      m[0] * v[0] + m[1] * v[1] + m[2] * v[2],\n      m[3] * v[0] + m[4] * v[1] + m[5] * v[2],\n      m[6] * v[0] + m[7] * v[1] + m[8] * v[2],\n    ];\n  }\n\n  // This calculation uses Singular Value Decomposition.\n  // The SVD can be represented with formula A = USV. We are interested in the\n  // matrix S here because it represents the scale values.\n  static singularValueDecompose2dScale(m) {\n    const transpose = [m[0], m[2], m[1], m[3]];\n\n    // Multiply matrix m with its transpose.\n    const a = m[0] * transpose[0] + m[1] * transpose[2];\n    const b = m[0] * transpose[1] + m[1] * transpose[3];\n    const c = m[2] * transpose[0] + m[3] * transpose[2];\n    const d = m[2] * transpose[1] + m[3] * transpose[3];\n\n    // Solve the second degree polynomial to get roots.\n    const first = (a + d) / 2;\n    const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;\n    const sx = first + second || 1;\n    const sy = first - second || 1;\n\n    // Scale values are the square roots of the eigenvalues.\n    return [Math.sqrt(sx), Math.sqrt(sy)];\n  }\n\n  // Normalize rectangle rect=[x1, y1, x2, y2] so that (x1,y1) < (x2,y2)\n  // For coordinate systems whose origin lies in the bottom-left, this\n  // means normalization to (BL,TR) ordering. For systems with origin in the\n  // top-left, this means (TL,BR) ordering.\n  static normalizeRect(rect) {\n    const r = rect.slice(0); // clone rect\n    if (rect[0] > rect[2]) {\n      r[0] = rect[2];\n      r[2] = rect[0];\n    }\n    if (rect[1] > rect[3]) {\n      r[1] = rect[3];\n      r[3] = rect[1];\n    }\n    return r;\n  }\n\n  // Returns a rectangle [x1, y1, x2, y2] corresponding to the\n  // intersection of rect1 and rect2. If no intersection, returns 'false'\n  // The rectangle coordinates of rect1, rect2 should be [x1, y1, x2, y2]\n  static intersect(rect1, rect2) {\n    function compare(a, b) {\n      return a - b;\n    }\n\n    // Order points along the axes\n    const orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n    const orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n    const result = [];\n\n    rect1 = Util.normalizeRect(rect1);\n    rect2 = Util.normalizeRect(rect2);\n\n    // X: first and second points belong to different rectangles?\n    if (\n      (orderedX[0] === rect1[0] && orderedX[1] === rect2[0]) ||\n      (orderedX[0] === rect2[0] && orderedX[1] === rect1[0])\n    ) {\n      // Intersection must be between second and third points\n      result[0] = orderedX[1];\n      result[2] = orderedX[2];\n    } else {\n      return null;\n    }\n\n    // Y: first and second points belong to different rectangles?\n    if (\n      (orderedY[0] === rect1[1] && orderedY[1] === rect2[1]) ||\n      (orderedY[0] === rect2[1] && orderedY[1] === rect1[1])\n    ) {\n      // Intersection must be between second and third points\n      result[1] = orderedY[1];\n      result[3] = orderedY[2];\n    } else {\n      return null;\n    }\n\n    return result;\n  }\n}\n\nconst PDFStringTranslateTable = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8,\n  0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192,\n  0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018,\n  0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d,\n  0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac,\n];\n\nfunction stringToPDFString(str) {\n  const length = str.length,\n    strBuf = [];\n  if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n    // UTF16BE BOM\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(\n        String.fromCharCode((str.charCodeAt(i) << 8) | str.charCodeAt(i + 1))\n      );\n    }\n  } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n    // UTF16LE BOM\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(\n        String.fromCharCode((str.charCodeAt(i + 1) << 8) | str.charCodeAt(i))\n      );\n    }\n  } else {\n    for (let i = 0; i < length; ++i) {\n      const code = PDFStringTranslateTable[str.charCodeAt(i)];\n      strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n    }\n  }\n  return strBuf.join(\"\");\n}\n\nfunction escapeString(str) {\n  // replace \"(\", \")\", \"\\n\", \"\\r\" and \"\\\"\n  // by \"\\(\", \"\\)\", \"\\\\n\", \"\\\\r\" and \"\\\\\"\n  // in order to write it in a PDF file.\n  return str.replace(/([()\\\\\\n\\r])/g, match => {\n    if (match === \"\\n\") {\n      return \"\\\\n\";\n    } else if (match === \"\\r\") {\n      return \"\\\\r\";\n    }\n    return `\\\\${match}`;\n  });\n}\n\nfunction isAscii(str) {\n  return /^[\\x00-\\x7F]*$/.test(str);\n}\n\nfunction stringToUTF16BEString(str) {\n  const buf = [\"\\xFE\\xFF\"];\n  for (let i = 0, ii = str.length; i < ii; i++) {\n    const char = str.charCodeAt(i);\n    buf.push(\n      String.fromCharCode((char >> 8) & 0xff),\n      String.fromCharCode(char & 0xff)\n    );\n  }\n  return buf.join(\"\");\n}\n\nfunction stringToUTF8String(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction utf8StringToString(str) {\n  return unescape(encodeURIComponent(str));\n}\n\nfunction isBool(v) {\n  return typeof v === \"boolean\";\n}\n\nfunction isNum(v) {\n  return typeof v === \"number\";\n}\n\nfunction isString(v) {\n  return typeof v === \"string\";\n}\n\nfunction isArrayBuffer(v) {\n  return typeof v === \"object\" && v !== null && v.byteLength !== undefined;\n}\n\nfunction isArrayEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  for (let i = 0, ii = arr1.length; i < ii; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getModificationDate(date = new Date()) {\n  const buffer = [\n    date.getUTCFullYear().toString(),\n    (date.getUTCMonth() + 1).toString().padStart(2, \"0\"),\n    date.getUTCDate().toString().padStart(2, \"0\"),\n    date.getUTCHours().toString().padStart(2, \"0\"),\n    date.getUTCMinutes().toString().padStart(2, \"0\"),\n    date.getUTCSeconds().toString().padStart(2, \"0\"),\n  ];\n\n  return buffer.join(\"\");\n}\n\n/**\n * Promise Capability object.\n *\n * @typedef {Object} PromiseCapability\n * @property {Promise<any>} promise - A Promise object.\n * @property {boolean} settled - If the Promise has been fulfilled/rejected.\n * @property {function} resolve - Fulfills the Promise.\n * @property {function} reject - Rejects the Promise.\n */\n\n/**\n * Creates a promise capability object.\n * @alias createPromiseCapability\n *\n * @returns {PromiseCapability}\n */\nfunction createPromiseCapability() {\n  const capability = Object.create(null);\n  let isSettled = false;\n\n  Object.defineProperty(capability, \"settled\", {\n    get() {\n      return isSettled;\n    },\n  });\n  capability.promise = new Promise(function (resolve, reject) {\n    capability.resolve = function (data) {\n      isSettled = true;\n      resolve(data);\n    };\n    capability.reject = function (reason) {\n      isSettled = true;\n      reject(reason);\n    };\n  });\n  return capability;\n}\n\nfunction createObjectURL(data, contentType = \"\", forceDataSchema = false) {\n  if (URL.createObjectURL && !forceDataSchema) {\n    return URL.createObjectURL(new Blob([data], { type: contentType }));\n  }\n  // Blob/createObjectURL is not available, falling back to data schema.\n  const digits =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n  let buffer = `data:${contentType};base64,`;\n  for (let i = 0, ii = data.length; i < ii; i += 3) {\n    const b1 = data[i] & 0xff;\n    const b2 = data[i + 1] & 0xff;\n    const b3 = data[i + 2] & 0xff;\n    const d1 = b1 >> 2,\n      d2 = ((b1 & 3) << 4) | (b2 >> 4);\n    const d3 = i + 1 < ii ? ((b2 & 0xf) << 2) | (b3 >> 6) : 64;\n    const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n    buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n  }\n  return buffer;\n}\n\nexport {\n  AbortException,\n  AnnotationActionEventType,\n  AnnotationBorderStyleType,\n  AnnotationFieldFlag,\n  AnnotationFlag,\n  AnnotationMarkedState,\n  AnnotationReplyType,\n  AnnotationReviewState,\n  AnnotationStateModelType,\n  AnnotationType,\n  arrayByteLength,\n  arraysToBytes,\n  assert,\n  BaseException,\n  bytesToString,\n  CMapCompressionType,\n  createObjectURL,\n  createPromiseCapability,\n  createValidAbsoluteUrl,\n  DocumentActionEventType,\n  escapeString,\n  FONT_IDENTITY_MATRIX,\n  FontType,\n  FormatError,\n  getModificationDate,\n  getVerbosityLevel,\n  IDENTITY_MATRIX,\n  ImageKind,\n  info,\n  InvalidPDFException,\n  isArrayBuffer,\n  isArrayEqual,\n  isAscii,\n  isBool,\n  IsEvalSupportedCached,\n  IsLittleEndianCached,\n  isNum,\n  isSameOrigin,\n  isString,\n  MissingPDFException,\n  objectFromMap,\n  objectSize,\n  OPS,\n  PageActionEventType,\n  PasswordException,\n  PasswordResponses,\n  PermissionFlag,\n  removeNullCharacters,\n  setVerbosityLevel,\n  shadow,\n  StreamType,\n  string32,\n  stringToBytes,\n  stringToPDFString,\n  stringToUTF16BEString,\n  stringToUTF8String,\n  TextRenderingMode,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n  UNSUPPORTED_FEATURES,\n  utf8StringToString,\n  Util,\n  VerbosityLevel,\n  warn,\n};\n","/* Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isNodeJS } from \"./is_node.js\";\n\n// Skip compatibility checks for modern builds and if we already ran the module.\nif (\n  (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"SKIP_BABEL\")) &&\n  (typeof globalThis === \"undefined\" || !globalThis._pdfjsCompatibilityChecked)\n) {\n  // Provides support for globalThis in legacy browsers.\n  // Support: Firefox<65, Chrome<71, Safari<12.1\n  if (typeof globalThis === \"undefined\" || globalThis.Math !== Math) {\n    // eslint-disable-next-line no-global-assign\n    globalThis = require(\"core-js/es/global-this\");\n  }\n  globalThis._pdfjsCompatibilityChecked = true;\n\n  // Support: Node.js\n  (function checkNodeBtoa() {\n    if (globalThis.btoa || !isNodeJS) {\n      return;\n    }\n    globalThis.btoa = function (chars) {\n      // eslint-disable-next-line no-undef\n      return Buffer.from(chars, \"binary\").toString(\"base64\");\n    };\n  })();\n\n  // Support: Node.js\n  (function checkNodeAtob() {\n    if (globalThis.atob || !isNodeJS) {\n      return;\n    }\n    globalThis.atob = function (input) {\n      // eslint-disable-next-line no-undef\n      return Buffer.from(input, \"base64\").toString(\"binary\");\n    };\n  })();\n\n  // Support: Node.js\n  (function checkDOMMatrix() {\n    if (globalThis.DOMMatrix || !isNodeJS) {\n      return;\n    }\n    globalThis.DOMMatrix = require(\"dommatrix/dist/dommatrix.js\");\n  })();\n\n  // Provides support for Object.fromEntries in legacy browsers.\n  // Support: Firefox<63, Chrome<73, Safari<12.1, Node.js<12.0.0\n  (function checkObjectFromEntries() {\n    if (Object.fromEntries) {\n      return;\n    }\n    require(\"core-js/es/object/from-entries.js\");\n  })();\n\n  // Provides support for *recent* additions to the Promise specification,\n  // however basic Promise support is assumed to be available natively.\n  // Support: Firefox<71, Chrome<76, Safari<13, Node.js<12.9.0\n  (function checkPromise() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"IMAGE_DECODERS\")) {\n      // The current image decoders are synchronous, hence `Promise` shouldn't\n      // need to be polyfilled for the IMAGE_DECODERS build target.\n      return;\n    }\n    if (globalThis.Promise.allSettled) {\n      return;\n    }\n    globalThis.Promise = require(\"core-js/es/promise/index.js\");\n  })();\n\n  // Support: Node.js\n  (function checkReadableStream() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"IMAGE_DECODERS\")) {\n      // The current image decoders are synchronous, hence `ReadableStream`\n      // shouldn't need to be polyfilled for the IMAGE_DECODERS build target.\n      return;\n    }\n    let isReadableStreamSupported = false;\n\n    if (typeof ReadableStream !== \"undefined\") {\n      // MS Edge may say it has ReadableStream but they are not up to spec yet.\n      try {\n        // eslint-disable-next-line no-new\n        new ReadableStream({\n          start(controller) {\n            controller.close();\n          },\n        });\n        isReadableStreamSupported = true;\n      } catch (e) {\n        // The ReadableStream constructor cannot be used.\n      }\n    }\n    if (isReadableStreamSupported) {\n      return;\n    }\n    globalThis.ReadableStream =\n      require(\"web-streams-polyfill/dist/ponyfill.js\").ReadableStream;\n  })();\n}\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals process */\n\n// NW.js / Electron is a browser context, but copies some Node.js objects; see\n// http://docs.nwjs.io/en/latest/For%20Users/Advanced/JavaScript%20Contexts%20in%20NW.js/#access-nodejs-and-nwjs-api-in-browser-context\n// https://www.electronjs.org/docs/api/process#processversionselectron-readonly\n// https://www.electronjs.org/docs/api/process#processtype-readonly\nconst isNodeJS =\n  typeof process === \"object\" &&\n  process + \"\" === \"[object process]\" &&\n  !process.versions.nw &&\n  !(process.versions.electron && process.type && process.type !== \"browser\");\n\nexport { isNodeJS };\n","/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CMapCompressionType, unreachable } from \"../shared/util.js\";\n\nclass BaseCanvasFactory {\n  constructor() {\n    if (this.constructor === BaseCanvasFactory) {\n      unreachable(\"Cannot initialize BaseCanvasFactory.\");\n    }\n  }\n\n  create(width, height) {\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid canvas size\");\n    }\n    const canvas = this._createCanvas(width, height);\n    return {\n      canvas,\n      context: canvas.getContext(\"2d\"),\n    };\n  }\n\n  reset(canvasAndContext, width, height) {\n    if (!canvasAndContext.canvas) {\n      throw new Error(\"Canvas is not specified\");\n    }\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid canvas size\");\n    }\n    canvasAndContext.canvas.width = width;\n    canvasAndContext.canvas.height = height;\n  }\n\n  destroy(canvasAndContext) {\n    if (!canvasAndContext.canvas) {\n      throw new Error(\"Canvas is not specified\");\n    }\n    // Zeroing the width and height cause Firefox to release graphics\n    // resources immediately, which can greatly reduce memory consumption.\n    canvasAndContext.canvas.width = 0;\n    canvasAndContext.canvas.height = 0;\n    canvasAndContext.canvas = null;\n    canvasAndContext.context = null;\n  }\n\n  /**\n   * @private\n   */\n  _createCanvas(width, height) {\n    unreachable(\"Abstract method `_createCanvas` called.\");\n  }\n}\n\nclass BaseCMapReaderFactory {\n  constructor({ baseUrl = null, isCompressed = false }) {\n    if (this.constructor === BaseCMapReaderFactory) {\n      unreachable(\"Cannot initialize BaseCMapReaderFactory.\");\n    }\n    this.baseUrl = baseUrl;\n    this.isCompressed = isCompressed;\n  }\n\n  async fetch({ name }) {\n    if (!this.baseUrl) {\n      throw new Error(\n        'The CMap \"baseUrl\" parameter must be specified, ensure that ' +\n          'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.'\n      );\n    }\n    if (!name) {\n      throw new Error(\"CMap name must be specified.\");\n    }\n    const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n    const compressionType = this.isCompressed\n      ? CMapCompressionType.BINARY\n      : CMapCompressionType.NONE;\n\n    return this._fetchData(url, compressionType).catch(reason => {\n      throw new Error(\n        `Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`\n      );\n    });\n  }\n\n  /**\n   * @private\n   */\n  _fetchData(url, compressionType) {\n    unreachable(\"Abstract method `_fetchData` called.\");\n  }\n}\n\nclass BaseStandardFontDataFactory {\n  constructor({ baseUrl = null }) {\n    if (this.constructor === BaseStandardFontDataFactory) {\n      unreachable(\"Cannot initialize BaseStandardFontDataFactory.\");\n    }\n    this.baseUrl = baseUrl;\n  }\n\n  async fetch({ filename }) {\n    if (!this.baseUrl) {\n      throw new Error(\n        'The standard font \"baseUrl\" parameter must be specified, ensure that ' +\n          'the \"standardFontDataUrl\" API parameter is provided.'\n      );\n    }\n    if (!filename) {\n      throw new Error(\"Font filename must be specified.\");\n    }\n    const url = `${this.baseUrl}${filename}`;\n\n    return this._fetchData(url).catch(reason => {\n      throw new Error(`Unable to load font data at: ${url}`);\n    });\n  }\n\n  /**\n   * @private\n   */\n  _fetchData(url) {\n    unreachable(\"Abstract method `_fetchData` called.\");\n  }\n}\n\nclass BaseSVGFactory {\n  constructor() {\n    if (this.constructor === BaseSVGFactory) {\n      unreachable(\"Cannot initialize BaseSVGFactory.\");\n    }\n  }\n\n  create(width, height) {\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid SVG dimensions\");\n    }\n    const svg = this._createSVG(\"svg:svg\");\n    svg.setAttribute(\"version\", \"1.1\");\n    svg.setAttribute(\"width\", `${width}px`);\n    svg.setAttribute(\"height\", `${height}px`);\n    svg.setAttribute(\"preserveAspectRatio\", \"none\");\n    svg.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n\n    return svg;\n  }\n\n  createElement(type) {\n    if (typeof type !== \"string\") {\n      throw new Error(\"Invalid SVG element type\");\n    }\n    return this._createSVG(type);\n  }\n\n  /**\n   * @private\n   */\n  _createSVG(type) {\n    unreachable(\"Abstract method `_createSVG` called.\");\n  }\n}\n\nexport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseStandardFontDataFactory,\n  BaseSVGFactory,\n};\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module pdfjsLib\n */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n  getVerbosityLevel,\n  info,\n  InvalidPDFException,\n  isArrayBuffer,\n  isSameOrigin,\n  MissingPDFException,\n  PasswordException,\n  setVerbosityLevel,\n  shadow,\n  stringToBytes,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  deprecated,\n  DOMCanvasFactory,\n  DOMCMapReaderFactory,\n  DOMStandardFontDataFactory,\n  isDataScheme,\n  loadScript,\n  PageViewport,\n  RenderingCancelledException,\n  StatTimer,\n} from \"./display_utils.js\";\nimport { FontFaceObject, FontLoader } from \"./font_loader.js\";\nimport {\n  NodeCanvasFactory,\n  NodeCMapReaderFactory,\n  NodeStandardFontDataFactory,\n} from \"./node_utils.js\";\nimport { AnnotationStorage } from \"./annotation_storage.js\";\nimport { CanvasGraphics } from \"./canvas.js\";\nimport { GlobalWorkerOptions } from \"./worker_options.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\nimport { MessageHandler } from \"../shared/message_handler.js\";\nimport { Metadata } from \"./metadata.js\";\nimport { OptionalContentConfig } from \"./optional_content_config.js\";\nimport { PDFDataTransportStream } from \"./transport_stream.js\";\n\nconst DEFAULT_RANGE_CHUNK_SIZE = 65536; // 2^16 = 65536\nconst RENDERING_CANCELLED_TIMEOUT = 100; // ms\n\nconst DefaultCanvasFactory =\n  (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS\n    ? NodeCanvasFactory\n    : DOMCanvasFactory;\nconst DefaultCMapReaderFactory =\n  (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS\n    ? NodeCMapReaderFactory\n    : DOMCMapReaderFactory;\nconst DefaultStandardFontDataFactory =\n  (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS\n    ? NodeStandardFontDataFactory\n    : DOMStandardFontDataFactory;\n\n/**\n * @typedef {function} IPDFStreamFactory\n * @param {DocumentInitParameters} params - The document initialization\n *   parameters. The \"url\" key is always present.\n * @returns {Promise} A promise, which is resolved with an instance of\n *   {IPDFStream}.\n * @ignore\n */\n\n/**\n * @type IPDFStreamFactory\n * @private\n */\nlet createPDFNetworkStream;\n\n/**\n * Sets the function that instantiates an {IPDFStream} as an alternative PDF\n * data transport.\n *\n * @param {IPDFStreamFactory} pdfNetworkStreamFactory - The factory function\n *   that takes document initialization parameters (including a \"url\") and\n *   returns a promise which is resolved with an instance of {IPDFStream}.\n * @ignore\n */\nfunction setPDFNetworkStreamFactory(pdfNetworkStreamFactory) {\n  createPDFNetworkStream = pdfNetworkStreamFactory;\n}\n\n/**\n * @typedef { Int8Array | Uint8Array | Uint8ClampedArray |\n *            Int16Array | Uint16Array |\n *            Int32Array | Uint32Array | Float32Array |\n *            Float64Array\n * } TypedArray\n */\n\n/**\n * @typedef {Object} RefProxy\n * @property {number} num\n * @property {number} gen\n */\n\n/**\n * Document initialization / loading parameters object.\n *\n * @typedef {Object} DocumentInitParameters\n * @property {string|URL} [url] - The URL of the PDF.\n * @property {TypedArray|Array<number>|string} [data] - Binary PDF data. Use\n *    typed arrays (Uint8Array) to improve the memory usage. If PDF data is\n *    BASE64-encoded, use `atob()` to convert it to a binary string first.\n * @property {Object} [httpHeaders] - Basic authentication headers.\n * @property {boolean} [withCredentials] - Indicates whether or not\n *   cross-site Access-Control requests should be made using credentials such\n *   as cookies or authorization headers. The default is `false`.\n * @property {string} [password] - For decrypting password-protected PDFs.\n * @property {TypedArray} [initialData] - A typed array with the first portion\n *   or all of the pdf data. Used by the extension since some data is already\n *   loaded before the switch to range requests.\n * @property {number} [length] - The PDF file length. It's used for progress\n *   reports and range requests operations.\n * @property {PDFDataRangeTransport} [range] - Allows for using a custom range\n *   transport implementation.\n * @property {number} [rangeChunkSize] - Specify maximum number of bytes fetched\n *   per range request. The default value is {@link DEFAULT_RANGE_CHUNK_SIZE}.\n * @property {PDFWorker} [worker] - The worker that will be used for loading and\n *   parsing the PDF data.\n * @property {number} [verbosity] - Controls the logging level; the constants\n *   from {@link VerbosityLevel} should be used.\n * @property {string} [docBaseUrl] - The base URL of the document, used when\n *   attempting to recover valid absolute URLs for annotations, and outline\n *   items, that (incorrectly) only specify relative URLs.\n * @property {string} [cMapUrl] - The URL where the predefined Adobe CMaps are\n *   located. Include the trailing slash.\n * @property {boolean} [cMapPacked] - Specifies if the Adobe CMaps are binary\n *   packed or not.\n * @property {Object} [CMapReaderFactory] - The factory that will be used when\n *   reading built-in CMap files. Providing a custom factory is useful for\n *   environments without Fetch API or `XMLHttpRequest` support, such as\n *   Node.js. The default value is {DOMCMapReaderFactory}.\n * @property {boolean} [useSystemFonts] - When `true`, fonts that aren't\n *   embedded in the PDF document will fallback to a system font.\n *   The default value is `true` in web environments and `false` in Node.js;\n *   unless `disableFontFace === true` in which case this defaults to `false`\n *   regardless of the environment (to prevent completely broken fonts).\n * @property {string} [standardFontDataUrl] - The URL where the standard font\n *   files are located. Include the trailing slash.\n * @property {Object} [StandardFontDataFactory] - The factory that will be used\n *   when reading the standard font files. Providing a custom factory is useful\n *   for environments without Fetch API or `XMLHttpRequest` support, such as\n *   Node.js. The default value is {DOMStandardFontDataFactory}.\n * @property {boolean} [useWorkerFetch] - Enable using the Fetch API in the\n *   worker-thread when reading CMap and standard font files. When `true`,\n *   the `CMapReaderFactory` and `StandardFontDataFactory` options are ignored.\n *   The default value is `true` in web environments and `false` in Node.js.\n * @property {boolean} [stopAtErrors] - Reject certain promises, e.g.\n *   `getOperatorList`, `getTextContent`, and `RenderTask`, when the associated\n *   PDF data cannot be successfully parsed, instead of attempting to recover\n *   whatever possible of the data. The default value is `false`.\n * @property {number} [maxImageSize] - The maximum allowed image size in total\n *   pixels, i.e. width * height. Images above this value will not be rendered.\n *   Use -1 for no limit, which is also the default value.\n * @property {boolean} [isEvalSupported] - Determines if we can evaluate strings\n *   as JavaScript. Primarily used to improve performance of font rendering, and\n *   when parsing PDF functions. The default value is `true`.\n * @property {boolean} [disableFontFace] - By default fonts are converted to\n *   OpenType fonts and loaded via the Font Loading API or `@font-face` rules.\n *   If disabled, fonts will be rendered using a built-in font renderer that\n *   constructs the glyphs with primitive path commands.\n *   The default value is `false` in web environments and `true` in Node.js.\n * @property {boolean} [fontExtraProperties] - Include additional properties,\n *   which are unused during rendering of PDF documents, when exporting the\n *   parsed font data from the worker-thread. This may be useful for debugging\n *   purposes (and backwards compatibility), but note that it will lead to\n *   increased memory usage. The default value is `false`.\n * @property {boolean} [enableXfa] - Render Xfa forms if any.\n *   The default value is `false`.\n * @property {HTMLDocument} [ownerDocument] - Specify an explicit document\n *   context to create elements with and to load resources, such as fonts,\n *   into. Defaults to the current document.\n * @property {boolean} [disableRange] - Disable range request loading of PDF\n *   files. When enabled, and if the server supports partial content requests,\n *   then the PDF will be fetched in chunks. The default value is `false`.\n * @property {boolean} [disableStream] - Disable streaming of PDF file data.\n *   By default PDF.js attempts to load PDF files in chunks. The default value\n *   is `false`.\n * @property {boolean} [disableAutoFetch] - Disable pre-fetching of PDF file\n *   data. When range requests are enabled PDF.js will automatically keep\n *   fetching more data even if it isn't needed to display the current page.\n *   The default value is `false`.\n *\n *   NOTE: It is also necessary to disable streaming, see above, in order for\n *   disabling of pre-fetching to work correctly.\n * @property {boolean} [pdfBug] - Enables special hooks for debugging PDF.js\n *   (see `web/debugger.js`). The default value is `false`.\n */\n\n/**\n * This is the main entry point for loading a PDF and interacting with it.\n *\n * NOTE: If a URL is used to fetch the PDF data a standard Fetch API call (or\n * XHR as fallback) is used, which means it must follow same origin rules,\n * e.g. no cross-domain requests without CORS.\n *\n * @param {string|URL|TypedArray|PDFDataRangeTransport|DocumentInitParameters}\n *   src - Can be a URL where a PDF file is located, a typed array (Uint8Array)\n *         already populated with data, or a parameter object.\n * @returns {PDFDocumentLoadingTask}\n */\nfunction getDocument(src) {\n  const task = new PDFDocumentLoadingTask();\n\n  let source;\n  if (typeof src === \"string\" || src instanceof URL) {\n    source = { url: src };\n  } else if (isArrayBuffer(src)) {\n    source = { data: src };\n  } else if (src instanceof PDFDataRangeTransport) {\n    source = { range: src };\n  } else {\n    if (typeof src !== \"object\") {\n      throw new Error(\n        \"Invalid parameter in getDocument, \" +\n          \"need either string, URL, Uint8Array, or parameter object.\"\n      );\n    }\n    if (!src.url && !src.data && !src.range) {\n      throw new Error(\n        \"Invalid parameter object: need either .data, .range or .url\"\n      );\n    }\n    source = src;\n  }\n  const params = Object.create(null);\n  let rangeTransport = null,\n    worker = null;\n\n  for (const key in source) {\n    const value = source[key];\n\n    switch (key) {\n      case \"url\":\n        if (typeof window !== \"undefined\") {\n          try {\n            // The full path is required in the 'url' field.\n            params[key] = new URL(value, window.location).href;\n            continue;\n          } catch (ex) {\n            warn(`Cannot create valid URL: \"${ex}\".`);\n          }\n        } else if (typeof value === \"string\" || value instanceof URL) {\n          params[key] = value.toString(); // Support Node.js environments.\n          continue;\n        }\n        throw new Error(\n          \"Invalid PDF url data: \" +\n            \"either string or URL-object is expected in the url property.\"\n        );\n      case \"range\":\n        rangeTransport = value;\n        continue;\n      case \"worker\":\n        worker = value;\n        continue;\n      case \"data\":\n        // Converting string or array-like data to Uint8Array.\n        if (\n          typeof PDFJSDev !== \"undefined\" &&\n          PDFJSDev.test(\"GENERIC\") &&\n          isNodeJS &&\n          typeof Buffer !== \"undefined\" && // eslint-disable-line no-undef\n          value instanceof Buffer // eslint-disable-line no-undef\n        ) {\n          params[key] = new Uint8Array(value);\n        } else if (value instanceof Uint8Array) {\n          break; // Use the data as-is when it's already a Uint8Array.\n        } else if (typeof value === \"string\") {\n          params[key] = stringToBytes(value);\n        } else if (\n          typeof value === \"object\" &&\n          value !== null &&\n          !isNaN(value.length)\n        ) {\n          params[key] = new Uint8Array(value);\n        } else if (isArrayBuffer(value)) {\n          params[key] = new Uint8Array(value);\n        } else {\n          throw new Error(\n            \"Invalid PDF binary data: either typed array, \" +\n              \"string, or array-like object is expected in the data property.\"\n          );\n        }\n        continue;\n    }\n    params[key] = value;\n  }\n\n  params.rangeChunkSize = params.rangeChunkSize || DEFAULT_RANGE_CHUNK_SIZE;\n  params.CMapReaderFactory =\n    params.CMapReaderFactory || DefaultCMapReaderFactory;\n  params.StandardFontDataFactory =\n    params.StandardFontDataFactory || DefaultStandardFontDataFactory;\n  params.ignoreErrors = params.stopAtErrors !== true;\n  params.fontExtraProperties = params.fontExtraProperties === true;\n  params.pdfBug = params.pdfBug === true;\n  params.enableXfa = params.enableXfa === true;\n\n  if (\n    typeof params.docBaseUrl !== \"string\" ||\n    isDataScheme(params.docBaseUrl)\n  ) {\n    // Ignore \"data:\"-URLs, since they can't be used to recover valid absolute\n    // URLs anyway. We want to avoid sending them to the worker-thread, since\n    // they contain the *entire* PDF document and can thus be arbitrarily long.\n    params.docBaseUrl = null;\n  }\n  if (!Number.isInteger(params.maxImageSize)) {\n    params.maxImageSize = -1;\n  }\n  if (typeof params.useWorkerFetch !== \"boolean\") {\n    params.useWorkerFetch =\n      params.CMapReaderFactory === DOMCMapReaderFactory &&\n      params.StandardFontDataFactory === DOMStandardFontDataFactory;\n  }\n  if (typeof params.isEvalSupported !== \"boolean\") {\n    params.isEvalSupported = true;\n  }\n  if (typeof params.disableFontFace !== \"boolean\") {\n    params.disableFontFace =\n      (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS;\n  }\n  if (typeof params.useSystemFonts !== \"boolean\") {\n    params.useSystemFonts =\n      !(\n        (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n        isNodeJS\n      ) && !params.disableFontFace;\n  }\n  if (typeof params.ownerDocument === \"undefined\") {\n    params.ownerDocument = globalThis.document;\n  }\n\n  if (typeof params.disableRange !== \"boolean\") {\n    params.disableRange = false;\n  }\n  if (typeof params.disableStream !== \"boolean\") {\n    params.disableStream = false;\n  }\n  if (typeof params.disableAutoFetch !== \"boolean\") {\n    params.disableAutoFetch = false;\n  }\n\n  // Set the main-thread verbosity level.\n  setVerbosityLevel(params.verbosity);\n\n  if (!worker) {\n    const workerParams = {\n      verbosity: params.verbosity,\n      port: GlobalWorkerOptions.workerPort,\n    };\n    // Worker was not provided -- creating and owning our own. If message port\n    // is specified in global worker options, using it.\n    worker = workerParams.port\n      ? PDFWorker.fromPort(workerParams)\n      : new PDFWorker(workerParams);\n    task._worker = worker;\n  }\n  const docId = task.docId;\n  worker.promise\n    .then(function () {\n      if (task.destroyed) {\n        throw new Error(\"Loading aborted\");\n      }\n\n      const workerIdPromise = _fetchDocument(\n        worker,\n        params,\n        rangeTransport,\n        docId\n      );\n      const networkStreamPromise = new Promise(function (resolve) {\n        let networkStream;\n        if (rangeTransport) {\n          networkStream = new PDFDataTransportStream(\n            {\n              length: params.length,\n              initialData: params.initialData,\n              progressiveDone: params.progressiveDone,\n              contentDispositionFilename: params.contentDispositionFilename,\n              disableRange: params.disableRange,\n              disableStream: params.disableStream,\n            },\n            rangeTransport\n          );\n        } else if (!params.data) {\n          networkStream = createPDFNetworkStream({\n            url: params.url,\n            length: params.length,\n            httpHeaders: params.httpHeaders,\n            withCredentials: params.withCredentials,\n            rangeChunkSize: params.rangeChunkSize,\n            disableRange: params.disableRange,\n            disableStream: params.disableStream,\n          });\n        }\n        resolve(networkStream);\n      });\n\n      return Promise.all([workerIdPromise, networkStreamPromise]).then(\n        function ([workerId, networkStream]) {\n          if (task.destroyed) {\n            throw new Error(\"Loading aborted\");\n          }\n\n          const messageHandler = new MessageHandler(\n            docId,\n            workerId,\n            worker.port\n          );\n          messageHandler.postMessageTransfers = worker.postMessageTransfers;\n          const transport = new WorkerTransport(\n            messageHandler,\n            task,\n            networkStream,\n            params\n          );\n          task._transport = transport;\n          messageHandler.send(\"Ready\", null);\n        }\n      );\n    })\n    .catch(task._capability.reject);\n\n  return task;\n}\n\n/**\n * Starts fetching of specified PDF document/data.\n *\n * @param {PDFWorker} worker\n * @param {Object} source\n * @param {PDFDataRangeTransport} pdfDataRangeTransport\n * @param {string} docId - Unique document ID, used in `MessageHandler`.\n * @returns {Promise} A promise that is resolved when the worker ID of the\n *   `MessageHandler` is known.\n * @private\n */\nfunction _fetchDocument(worker, source, pdfDataRangeTransport, docId) {\n  if (worker.destroyed) {\n    return Promise.reject(new Error(\"Worker was destroyed\"));\n  }\n\n  if (pdfDataRangeTransport) {\n    source.length = pdfDataRangeTransport.length;\n    source.initialData = pdfDataRangeTransport.initialData;\n    source.progressiveDone = pdfDataRangeTransport.progressiveDone;\n    source.contentDispositionFilename =\n      pdfDataRangeTransport.contentDispositionFilename;\n  }\n  return worker.messageHandler\n    .sendWithPromise(\"GetDocRequest\", {\n      docId,\n      apiVersion:\n        typeof PDFJSDev !== \"undefined\" && !PDFJSDev.test(\"TESTING\")\n          ? PDFJSDev.eval(\"BUNDLE_VERSION\")\n          : null,\n      // Only send the required properties, and *not* the entire object.\n      source: {\n        data: source.data,\n        url: source.url,\n        password: source.password,\n        disableAutoFetch: source.disableAutoFetch,\n        rangeChunkSize: source.rangeChunkSize,\n        length: source.length,\n      },\n      maxImageSize: source.maxImageSize,\n      disableFontFace: source.disableFontFace,\n      postMessageTransfers: worker.postMessageTransfers,\n      docBaseUrl: source.docBaseUrl,\n      ignoreErrors: source.ignoreErrors,\n      isEvalSupported: source.isEvalSupported,\n      fontExtraProperties: source.fontExtraProperties,\n      enableXfa: source.enableXfa,\n      useSystemFonts: source.useSystemFonts,\n      cMapUrl: source.useWorkerFetch ? source.cMapUrl : null,\n      standardFontDataUrl: source.useWorkerFetch\n        ? source.standardFontDataUrl\n        : null,\n    })\n    .then(function (workerId) {\n      if (worker.destroyed) {\n        throw new Error(\"Worker was destroyed\");\n      }\n      return workerId;\n    });\n}\n\n/**\n * @typedef {Object} OnProgressParameters\n * @property {number} loaded - Currently loaded number of bytes.\n * @property {number} total - Total number of bytes in the PDF file.\n */\n\n/**\n * The loading task controls the operations required to load a PDF document\n * (such as network requests) and provides a way to listen for completion,\n * after which individual pages can be rendered.\n *\n * @typedef {Object} PDFDocumentLoadingTask\n * @property {string} docId - Unique identifier for the document loading task.\n * @property {boolean} destroyed - Whether the loading task is destroyed or not.\n * @property {function} [onPassword] - Callback to request a password if a wrong\n *   or no password was provided. The callback receives two parameters: a\n *   function that should be called with the new password, and a reason (see\n *   {@link PasswordResponses}).\n * @property {function} [onProgress] - Callback to be able to monitor the\n *   loading progress of the PDF file (necessary to implement e.g. a loading\n *   bar). The callback receives an {@link OnProgressParameters} argument.\n * @property {function} [onUnsupportedFeature] - Callback for when an\n *   unsupported feature is used in the PDF document. The callback receives an\n *   {@link UNSUPPORTED_FEATURES} argument.\n * @property {Promise<PDFDocumentProxy>} promise - Promise for document loading\n *   task completion.\n * @property {function} destroy - Abort all network requests and destroy\n *   the worker. Returns a promise that is resolved when destruction is\n *   completed.\n */\n\n/**\n * @type {any}\n * @ignore\n */\nconst PDFDocumentLoadingTask = (function PDFDocumentLoadingTaskClosure() {\n  let nextDocumentId = 0;\n\n  /**\n   * The loading task controls the operations required to load a PDF document\n   * (such as network requests) and provides a way to listen for completion,\n   * after which individual pages can be rendered.\n   */\n  // eslint-disable-next-line no-shadow\n  class PDFDocumentLoadingTask {\n    constructor() {\n      this._capability = createPromiseCapability();\n      this._transport = null;\n      this._worker = null;\n\n      /**\n       * Unique identifier for the document loading task.\n       * @type {string}\n       */\n      this.docId = \"d\" + nextDocumentId++;\n\n      /**\n       * Whether the loading task is destroyed or not.\n       * @type {boolean}\n       */\n      this.destroyed = false;\n\n      /**\n       * Callback to request a password if a wrong or no password was provided.\n       * The callback receives two parameters: a function that should be called\n       * with the new password, and a reason (see {@link PasswordResponses}).\n       * @type {function}\n       */\n      this.onPassword = null;\n\n      /**\n       * Callback to be able to monitor the loading progress of the PDF file\n       * (necessary to implement e.g. a loading bar).\n       * The callback receives an {@link OnProgressParameters} argument.\n       * @type {function}\n       */\n      this.onProgress = null;\n\n      /**\n       * Callback for when an unsupported feature is used in the PDF document.\n       * The callback receives an {@link UNSUPPORTED_FEATURES} argument.\n       * @type {function}\n       */\n      this.onUnsupportedFeature = null;\n    }\n\n    /**\n     * Promise for document loading task completion.\n     * @type {Promise<PDFDocumentProxy>}\n     */\n    get promise() {\n      return this._capability.promise;\n    }\n\n    /**\n     * @returns {Promise<void>} A promise that is resolved when destruction is\n     *   completed.\n     */\n    destroy() {\n      this.destroyed = true;\n\n      const transportDestroyed = !this._transport\n        ? Promise.resolve()\n        : this._transport.destroy();\n      return transportDestroyed.then(() => {\n        this._transport = null;\n        if (this._worker) {\n          this._worker.destroy();\n          this._worker = null;\n        }\n      });\n    }\n  }\n  return PDFDocumentLoadingTask;\n})();\n\n/**\n * Abstract class to support range requests file loading.\n */\nclass PDFDataRangeTransport {\n  /**\n   * @param {number} length\n   * @param {Uint8Array} initialData\n   * @param {boolean} [progressiveDone]\n   * @param {string} [contentDispositionFilename]\n   */\n  constructor(\n    length,\n    initialData,\n    progressiveDone = false,\n    contentDispositionFilename = null\n  ) {\n    this.length = length;\n    this.initialData = initialData;\n    this.progressiveDone = progressiveDone;\n    this.contentDispositionFilename = contentDispositionFilename;\n\n    this._rangeListeners = [];\n    this._progressListeners = [];\n    this._progressiveReadListeners = [];\n    this._progressiveDoneListeners = [];\n    this._readyCapability = createPromiseCapability();\n  }\n\n  addRangeListener(listener) {\n    this._rangeListeners.push(listener);\n  }\n\n  addProgressListener(listener) {\n    this._progressListeners.push(listener);\n  }\n\n  addProgressiveReadListener(listener) {\n    this._progressiveReadListeners.push(listener);\n  }\n\n  addProgressiveDoneListener(listener) {\n    this._progressiveDoneListeners.push(listener);\n  }\n\n  onDataRange(begin, chunk) {\n    for (const listener of this._rangeListeners) {\n      listener(begin, chunk);\n    }\n  }\n\n  onDataProgress(loaded, total) {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressListeners) {\n        listener(loaded, total);\n      }\n    });\n  }\n\n  onDataProgressiveRead(chunk) {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressiveReadListeners) {\n        listener(chunk);\n      }\n    });\n  }\n\n  onDataProgressiveDone() {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressiveDoneListeners) {\n        listener();\n      }\n    });\n  }\n\n  transportReady() {\n    this._readyCapability.resolve();\n  }\n\n  requestDataRange(begin, end) {\n    unreachable(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n  }\n\n  abort() {}\n}\n\n/**\n * Proxy to a `PDFDocument` in the worker thread.\n */\nclass PDFDocumentProxy {\n  constructor(pdfInfo, transport) {\n    this._pdfInfo = pdfInfo;\n    this._transport = transport;\n\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n      Object.defineProperty(this, \"fingerprint\", {\n        get() {\n          deprecated(\n            \"`PDFDocumentProxy.fingerprint`, \" +\n              \"please use `PDFDocumentProxy.fingerprints` instead.\"\n          );\n          return this.fingerprints[0];\n        },\n      });\n    }\n  }\n\n  /**\n   * @type {AnnotationStorage} Storage for annotation data in forms.\n   */\n  get annotationStorage() {\n    return this._transport.annotationStorage;\n  }\n\n  /**\n   * @type {number} Total number of pages in the PDF file.\n   */\n  get numPages() {\n    return this._pdfInfo.numPages;\n  }\n\n  /**\n   * @type {Array<string, string|null>} A (not guaranteed to be) unique ID to\n   *   identify the PDF document.\n   *   NOTE: The first element will always be defined for all PDF documents,\n   *   whereas the second element is only defined for *modified* PDF documents.\n   */\n  get fingerprints() {\n    return this._pdfInfo.fingerprints;\n  }\n\n  /**\n   * @type {boolean} True if only XFA form.\n   */\n  get isPureXfa() {\n    return !!this._transport._htmlForXfa;\n  }\n\n  /**\n   * NOTE: This is (mostly) intended to support printing of XFA forms.\n   *\n   * @type {Object | null} An object representing a HTML tree structure\n   *   to render the XFA, or `null` when no XFA form exists.\n   */\n  get allXfaHtml() {\n    return this._transport._htmlForXfa;\n  }\n\n  /**\n   * @param {number} pageNumber - The page number to get. The first page is 1.\n   * @returns {Promise<PDFPageProxy>} A promise that is resolved with\n   *   a {@link PDFPageProxy} object.\n   */\n  getPage(pageNumber) {\n    return this._transport.getPage(pageNumber);\n  }\n\n  /**\n   * @param {RefProxy} ref - The page reference.\n   * @returns {Promise<number>} A promise that is resolved with the page index,\n   *   starting from zero, that is associated with the reference.\n   */\n  getPageIndex(ref) {\n    return this._transport.getPageIndex(ref);\n  }\n\n  /**\n   * @returns {Promise<Object<string, Array<any>>>} A promise that is resolved\n   *   with a mapping from named destinations to references.\n   *\n   * This can be slow for large documents. Use `getDestination` instead.\n   */\n  getDestinations() {\n    return this._transport.getDestinations();\n  }\n\n  /**\n   * @param {string} id - The named destination to get.\n   * @returns {Promise<Array<any> | null>} A promise that is resolved with all\n   *   information of the given named destination, or `null` when the named\n   *   destination is not present in the PDF file.\n   */\n  getDestination(id) {\n    return this._transport.getDestination(id);\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with\n   *   an {Array} containing the page labels that correspond to the page\n   *   indexes, or `null` when no page labels are present in the PDF file.\n   */\n  getPageLabels() {\n    return this._transport.getPageLabels();\n  }\n\n  /**\n   * @returns {Promise<string>} A promise that is resolved with a {string}\n   *   containing the page layout name.\n   */\n  getPageLayout() {\n    return this._transport.getPageLayout();\n  }\n\n  /**\n   * @returns {Promise<string>} A promise that is resolved with a {string}\n   *   containing the page mode name.\n   */\n  getPageMode() {\n    return this._transport.getPageMode();\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with an\n   *   {Object} containing the viewer preferences, or `null` when no viewer\n   *   preferences are present in the PDF file.\n   */\n  getViewerPreferences() {\n    return this._transport.getViewerPreferences();\n  }\n\n  /**\n   * @returns {Promise<any | null>} A promise that is resolved with an {Array}\n   *   containing the destination, or `null` when no open action is present\n   *   in the PDF.\n   */\n  getOpenAction() {\n    return this._transport.getOpenAction();\n  }\n\n  /**\n   * @returns {Promise<any>} A promise that is resolved with a lookup table\n   *   for mapping named attachments to their content.\n   */\n  getAttachments() {\n    return this._transport.getAttachments();\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with\n   *   an {Array} of all the JavaScript strings in the name tree, or `null`\n   *   if no JavaScript exists.\n   */\n  getJavaScript() {\n    return this._transport.getJavaScript();\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with\n   *   an {Object} with the JavaScript actions:\n   *     - from the name tree (like getJavaScript);\n   *     - from A or AA entries in the catalog dictionary.\n   *   , or `null` if no JavaScript exists.\n   */\n  getJSActions() {\n    return this._transport.getDocJSActions();\n  }\n\n  /**\n   * @typedef {Object} OutlineNode\n   * @property {string} title\n   * @property {boolean} bold\n   * @property {boolean} italic\n   * @property {Uint8ClampedArray} color - The color in RGB format to use for\n   *   display purposes.\n   * @property {string | Array<any> | null} dest\n   * @property {string | null} url\n   * @property {string | undefined} unsafeUrl\n   * @property {boolean | undefined} newWindow\n   * @property {number | undefined} count\n   * @property {Array<OutlineNode>} items\n   */\n\n  /**\n   * @returns {Promise<Array<OutlineNode>>} A promise that is resolved with an\n   *   {Array} that is a tree outline (if it has one) of the PDF file.\n   */\n  getOutline() {\n    return this._transport.getOutline();\n  }\n\n  /**\n   * @returns {Promise<OptionalContentConfig>} A promise that is resolved with\n   *   an {@link OptionalContentConfig} that contains all the optional content\n   *   groups (assuming that the document has any).\n   */\n  getOptionalContentConfig() {\n    return this._transport.getOptionalContentConfig();\n  }\n\n  /**\n   * @returns {Promise<Array<number> | null>} A promise that is resolved with\n   *   an {Array} that contains the permission flags for the PDF document, or\n   *   `null` when no permissions are present in the PDF file.\n   */\n  getPermissions() {\n    return this._transport.getPermissions();\n  }\n\n  /**\n   * @returns {Promise<{ info: Object, metadata: Metadata }>} A promise that is\n   *   resolved with an {Object} that has `info` and `metadata` properties.\n   *   `info` is an {Object} filled with anything available in the information\n   *   dictionary and similarly `metadata` is a {Metadata} object with\n   *   information from the metadata section of the PDF.\n   */\n  getMetadata() {\n    return this._transport.getMetadata();\n  }\n\n  /**\n   * @typedef {Object} MarkInfo\n   * Properties correspond to Table 321 of the PDF 32000-1:2008 spec.\n   * @property {boolean} Marked\n   * @property {boolean} UserProperties\n   * @property {boolean} Suspects\n   */\n\n  /**\n   * @returns {Promise<MarkInfo | null>} A promise that is resolved with\n   *   a {MarkInfo} object that contains the MarkInfo flags for the PDF\n   *   document, or `null` when no MarkInfo values are present in the PDF file.\n   */\n  getMarkInfo() {\n    return this._transport.getMarkInfo();\n  }\n\n  /**\n   * @returns {Promise<TypedArray>} A promise that is resolved with a\n   *   {TypedArray} that has the raw data from the PDF.\n   */\n  getData() {\n    return this._transport.getData();\n  }\n\n  /**\n   * @returns {Promise<{ length: number }>} A promise that is resolved when the\n   *   document's data is loaded. It is resolved with an {Object} that contains\n   *   the `length` property that indicates size of the PDF data in bytes.\n   */\n  getDownloadInfo() {\n    return this._transport.downloadInfoCapability.promise;\n  }\n\n  /**\n   * @typedef {Object} PDFDocumentStats\n   * @property {Object<string, boolean>} streamTypes - Used stream types in the\n   *   document (an item is set to true if specific stream ID was used in the\n   *   document).\n   * @property {Object<string, boolean>} fontTypes - Used font types in the\n   *   document (an item is set to true if specific font ID was used in the\n   *   document).\n   */\n\n  /**\n   * @returns {Promise<PDFDocumentStats>} A promise this is resolved with\n   *   current statistics about document structures (see\n   *   {@link PDFDocumentStats}).\n   */\n  getStats() {\n    return this._transport.getStats();\n  }\n\n  /**\n   * Cleans up resources allocated by the document on both the main and worker\n   * threads.\n   *\n   * NOTE: Do not, under any circumstances, call this method when rendering is\n   * currently ongoing since that may lead to rendering errors.\n   *\n   * @param {boolean} [keepLoadedFonts] - Let fonts remain attached to the DOM.\n   *   NOTE: This will increase persistent memory usage, hence don't use this\n   *   option unless absolutely necessary. The default value is `false`.\n   * @returns {Promise} A promise that is resolved when clean-up has finished.\n   */\n  cleanup(keepLoadedFonts = false) {\n    return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);\n  }\n\n  /**\n   * Destroys the current document instance and terminates the worker.\n   */\n  destroy() {\n    return this.loadingTask.destroy();\n  }\n\n  /**\n   * @type {DocumentInitParameters} A subset of the current\n   *   {DocumentInitParameters}, which are needed in the viewer.\n   */\n  get loadingParams() {\n    return this._transport.loadingParams;\n  }\n\n  /**\n   * @type {PDFDocumentLoadingTask} The loadingTask for the current document.\n   */\n  get loadingTask() {\n    return this._transport.loadingTask;\n  }\n\n  /**\n   * @returns {Promise<Uint8Array>} A promise that is resolved with a\n   *   {Uint8Array} containing the full data of the saved document.\n   */\n  saveDocument() {\n    if (\n      (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n      this._transport.annotationStorage.size <= 0\n    ) {\n      deprecated(\n        \"saveDocument called while `annotationStorage` is empty, \" +\n          \"please use the getData-method instead.\"\n      );\n    }\n    return this._transport.saveDocument();\n  }\n\n  /**\n   * @returns {Promise<Array<Object> | null>} A promise that is resolved with an\n   *   {Array<Object>} containing /AcroForm field data for the JS sandbox,\n   *   or `null` when no field data is present in the PDF file.\n   */\n  getFieldObjects() {\n    return this._transport.getFieldObjects();\n  }\n\n  /**\n   * @returns {Promise<boolean>} A promise that is resolved with `true`\n   *   if some /AcroForm fields have JavaScript actions.\n   */\n  hasJSActions() {\n    return this._transport.hasJSActions();\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with an\n   *   {Array<string>} containing IDs of annotations that have a calculation\n   *   action, or `null` when no such annotations are present in the PDF file.\n   */\n  getCalculationOrderIds() {\n    return this._transport.getCalculationOrderIds();\n  }\n}\n\n/**\n * Page getViewport parameters.\n *\n * @typedef {Object} GetViewportParameters\n * @property {number} scale - The desired scale of the viewport.\n * @property {number} [rotation] - The desired rotation, in degrees, of\n *   the viewport. If omitted it defaults to the page rotation.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset.\n *   The default value is `0`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset.\n *   The default value is `0`.\n * @property {boolean} [dontFlip] - If true, the y-axis will not be\n *   flipped. The default value is `false`.\n */\n\n/**\n * Page getTextContent parameters.\n *\n * @typedef {Object} getTextContentParameters\n * @property {boolean} normalizeWhitespace - Replaces all occurrences of\n *   whitespace with standard spaces (0x20). The default value is `false`.\n * @property {boolean} disableCombineTextItems - Do not attempt to combine\n *   same line {@link TextItem}'s. The default value is `false`.\n * @property {boolean} [includeMarkedContent] - When true include marked\n *   content items in the items array of TextContent. The default is `false`.\n */\n\n/**\n * Page text content.\n *\n * @typedef {Object} TextContent\n * @property {Array<TextItem | TextMarkedContent>} items - Array of\n *   {@link TextItem} and {@link TextMarkedContent} objects. TextMarkedContent\n *   items are included when includeMarkedContent is true.\n * @property {Object<string, TextStyle>} styles - {@link TextStyle} objects,\n *   indexed by font name.\n */\n\n/**\n * Page text content part.\n *\n * @typedef {Object} TextItem\n * @property {string} str - Text content.\n * @property {string} dir - Text direction: 'ttb', 'ltr' or 'rtl'.\n * @property {Array<any>} transform - Transformation matrix.\n * @property {number} width - Width in device space.\n * @property {number} height - Height in device space.\n * @property {string} fontName - Font name used by PDF.js for converted font.\n * @property {boolean} hasEOL - Indicating if the text content is followed by a\n *   line-break.\n */\n\n/**\n * Page text marked content part.\n *\n * @typedef {Object} TextMarkedContent\n * @property {string} type - Either 'beginMarkedContent',\n *   'beginMarkedContentProps', or 'endMarkedContent'.\n * @property {string} id - The marked content identifier. Only used for type\n *   'beginMarkedContentProps'.\n */\n\n/**\n * Text style.\n *\n * @typedef {Object} TextStyle\n * @property {number} ascent - Font ascent.\n * @property {number} descent - Font descent.\n * @property {boolean} vertical - Whether or not the text is in vertical mode.\n * @property {string} fontFamily - The possible font family.\n */\n\n/**\n * Page annotation parameters.\n *\n * @typedef {Object} GetAnnotationsParameters\n * @property {string} [intent] - Determines the annotations that are fetched,\n *   can be either 'display' (viewable annotations) or 'print' (printable\n *   annotations). If the parameter is omitted, all annotations are fetched.\n */\n\n/**\n * Page render parameters.\n *\n * @typedef {Object} RenderParameters\n * @property {Object} canvasContext - A 2D context of a DOM Canvas object.\n * @property {PageViewport} viewport - Rendering viewport obtained by calling\n *   the `PDFPageProxy.getViewport` method.\n * @property {string} [intent] - Rendering intent, can be 'display' or 'print'.\n *   The default value is 'display'.\n * @property {boolean} [renderInteractiveForms] - Whether or not interactive\n *   form elements are rendered in the display layer. If so, we do not render\n *   them on the canvas as well. The default value is `false`.\n * @property {Array<any>} [transform] - Additional transform, applied just\n *   before viewport transform.\n * @property {Object} [imageLayer] - An object that has `beginLayout`,\n *   `endLayout` and `appendImage` functions.\n * @property {Object} [canvasFactory] - The factory instance that will be used\n *   when creating canvases. The default value is {new DOMCanvasFactory()}.\n * @property {Object | string} [background] - Background to use for the canvas.\n *   Any valid `canvas.fillStyle` can be used: a `DOMString` parsed as CSS\n *   <color> value, a `CanvasGradient` object (a linear or radial gradient) or\n *   a `CanvasPattern` object (a repetitive image). The default value is\n *   'rgb(255,255,255)'.\n * @property {boolean} [includeAnnotationStorage] - Render stored interactive\n *   form element data, from the {@link AnnotationStorage}-instance, onto the\n *   canvas itself; useful e.g. for printing. The default value is `false`.\n * @property {Promise<OptionalContentConfig>} [optionalContentConfigPromise] -\n *   A promise that should resolve with an {@link OptionalContentConfig}\n *   created from `PDFDocumentProxy.getOptionalContentConfig`. If `null`,\n *   the configuration will be fetched automatically with the default visibility\n *   states set.\n */\n\n/**\n * Page getOperatorList parameters.\n *\n * @typedef {Object} GetOperatorListParameters\n * @property {string} [intent] - Rendering intent, can be 'display' or 'print'.\n *   The default value is 'display'.\n */\n\n/**\n * Structure tree node. The root node will have a role \"Root\".\n *\n * @typedef {Object} StructTreeNode\n * @property {Array<StructTreeNode | StructTreeContent>} children - Array of\n *   {@link StructTreeNode} and {@link StructTreeContent} objects.\n * @property {string} role - element's role, already mapped if a role map exists\n * in the PDF.\n */\n\n/**\n * Structure tree content.\n *\n * @typedef {Object} StructTreeContent\n * @property {string} type - either \"content\" for page and stream structure\n *   elements or \"object\" for object references.\n * @property {string} id - unique id that will map to the text layer.\n */\n\n/**\n * PDF page operator list.\n *\n * @typedef {Object} PDFOperatorList\n * @property {Array<number>} fnArray - Array containing the operator functions.\n * @property {Array<any>} argsArray - Array containing the arguments of the\n *   functions.\n */\n\n/**\n * Proxy to a `PDFPage` in the worker thread.\n */\nclass PDFPageProxy {\n  constructor(pageIndex, pageInfo, transport, ownerDocument, pdfBug = false) {\n    this._pageIndex = pageIndex;\n    this._pageInfo = pageInfo;\n    this._ownerDocument = ownerDocument;\n    this._transport = transport;\n    this._stats = pdfBug ? new StatTimer() : null;\n    this._pdfBug = pdfBug;\n    this.commonObjs = transport.commonObjs;\n    this.objs = new PDFObjects();\n\n    this.cleanupAfterRender = false;\n    this.pendingCleanup = false;\n    this._intentStates = new Map();\n    this.destroyed = false;\n  }\n\n  /**\n   * @type {number} Page number of the page. First page is 1.\n   */\n  get pageNumber() {\n    return this._pageIndex + 1;\n  }\n\n  /**\n   * @type {number} The number of degrees the page is rotated clockwise.\n   */\n  get rotate() {\n    return this._pageInfo.rotate;\n  }\n\n  /**\n   * @type {RefProxy | null} The reference that points to this page.\n   */\n  get ref() {\n    return this._pageInfo.ref;\n  }\n\n  /**\n   * @type {number} The default size of units in 1/72nds of an inch.\n   */\n  get userUnit() {\n    return this._pageInfo.userUnit;\n  }\n\n  /**\n   * @type {Array<number>} An array of the visible portion of the PDF page in\n   *   user space units [x1, y1, x2, y2].\n   */\n  get view() {\n    return this._pageInfo.view;\n  }\n\n  /**\n   * @param {GetViewportParameters} params - Viewport parameters.\n   * @returns {PageViewport} Contains 'width' and 'height' properties\n   *   along with transforms required for rendering.\n   */\n  getViewport({\n    scale,\n    rotation = this.rotate,\n    offsetX = 0,\n    offsetY = 0,\n    dontFlip = false,\n  } = {}) {\n    return new PageViewport({\n      viewBox: this.view,\n      scale,\n      rotation,\n      offsetX,\n      offsetY,\n      dontFlip,\n    });\n  }\n\n  /**\n   * @param {GetAnnotationsParameters} params - Annotation parameters.\n   * @returns {Promise<Array<any>>} A promise that is resolved with an\n   *   {Array} of the annotation objects.\n   */\n  getAnnotations({ intent = null } = {}) {\n    const renderingIntent =\n      intent === \"display\" || intent === \"print\" ? intent : null;\n\n    if (\n      !this._annotationsPromise ||\n      this._annotationsIntent !== renderingIntent\n    ) {\n      this._annotationsPromise = this._transport.getAnnotations(\n        this._pageIndex,\n        renderingIntent\n      );\n      this._annotationsIntent = renderingIntent;\n    }\n    return this._annotationsPromise;\n  }\n\n  /**\n   * @returns {Promise<Object>} A promise that is resolved with an\n   *   {Object} with JS actions.\n   */\n  getJSActions() {\n    return (this._jsActionsPromise ||= this._transport.getPageJSActions(\n      this._pageIndex\n    ));\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with\n   *   an {Object} with a fake DOM object (a tree structure where elements\n   *   are {Object} with a name, attributes (class, style, ...), value and\n   *   children, very similar to a HTML DOM tree), or `null` if no XFA exists.\n   */\n  async getXfa() {\n    return this._transport._htmlForXfa?.children[this._pageIndex] || null;\n  }\n\n  /**\n   * Begins the process of rendering a page to the desired context.\n   *\n   * @param {RenderParameters} params - Page render parameters.\n   * @returns {RenderTask} An object that contains a promise that is\n   *   resolved when the page finishes rendering.\n   */\n  render({\n    canvasContext,\n    viewport,\n    intent = \"display\",\n    renderInteractiveForms = false,\n    transform = null,\n    imageLayer = null,\n    canvasFactory = null,\n    background = null,\n    includeAnnotationStorage = false,\n    optionalContentConfigPromise = null,\n  }) {\n    if (this._stats) {\n      this._stats.time(\"Overall\");\n    }\n\n    const renderingIntent = intent === \"print\" ? \"print\" : \"display\";\n    // If there was a pending destroy, cancel it so no cleanup happens during\n    // this call to render.\n    this.pendingCleanup = false;\n\n    if (!optionalContentConfigPromise) {\n      optionalContentConfigPromise = this._transport.getOptionalContentConfig();\n    }\n\n    let intentState = this._intentStates.get(renderingIntent);\n    if (!intentState) {\n      intentState = Object.create(null);\n      this._intentStates.set(renderingIntent, intentState);\n    }\n\n    // Ensure that a pending `streamReader` cancel timeout is always aborted.\n    if (intentState.streamReaderCancelTimeout) {\n      clearTimeout(intentState.streamReaderCancelTimeout);\n      intentState.streamReaderCancelTimeout = null;\n    }\n\n    const canvasFactoryInstance =\n      canvasFactory ||\n      new DefaultCanvasFactory({ ownerDocument: this._ownerDocument });\n    const annotationStorage = includeAnnotationStorage\n      ? this._transport.annotationStorage.serializable\n      : null;\n\n    // If there's no displayReadyCapability yet, then the operatorList\n    // was never requested before. Make the request and create the promise.\n    if (!intentState.displayReadyCapability) {\n      intentState.displayReadyCapability = createPromiseCapability();\n      intentState.operatorList = {\n        fnArray: [],\n        argsArray: [],\n        lastChunk: false,\n      };\n\n      if (this._stats) {\n        this._stats.time(\"Page Request\");\n      }\n      this._pumpOperatorList({\n        pageIndex: this._pageIndex,\n        intent: renderingIntent,\n        renderInteractiveForms: renderInteractiveForms === true,\n        annotationStorage,\n      });\n    }\n\n    const complete = error => {\n      intentState.renderTasks.delete(internalRenderTask);\n\n      // Attempt to reduce memory usage during *printing*, by always running\n      // cleanup once rendering has finished (regardless of cleanupAfterRender).\n      if (this.cleanupAfterRender || renderingIntent === \"print\") {\n        this.pendingCleanup = true;\n      }\n      this._tryCleanup();\n\n      if (error) {\n        internalRenderTask.capability.reject(error);\n\n        this._abortOperatorList({\n          intentState,\n          reason: error,\n        });\n      } else {\n        internalRenderTask.capability.resolve();\n      }\n      if (this._stats) {\n        this._stats.timeEnd(\"Rendering\");\n        this._stats.timeEnd(\"Overall\");\n      }\n    };\n\n    const internalRenderTask = new InternalRenderTask({\n      callback: complete,\n      // Only include the required properties, and *not* the entire object.\n      params: {\n        canvasContext,\n        viewport,\n        transform,\n        imageLayer,\n        background,\n      },\n      objs: this.objs,\n      commonObjs: this.commonObjs,\n      operatorList: intentState.operatorList,\n      pageIndex: this._pageIndex,\n      canvasFactory: canvasFactoryInstance,\n      useRequestAnimationFrame: renderingIntent !== \"print\",\n      pdfBug: this._pdfBug,\n    });\n\n    (intentState.renderTasks ||= new Set()).add(internalRenderTask);\n    const renderTask = internalRenderTask.task;\n\n    Promise.all([\n      intentState.displayReadyCapability.promise,\n      optionalContentConfigPromise,\n    ])\n      .then(([transparency, optionalContentConfig]) => {\n        if (this.pendingCleanup) {\n          complete();\n          return;\n        }\n        if (this._stats) {\n          this._stats.time(\"Rendering\");\n        }\n        internalRenderTask.initializeGraphics({\n          transparency,\n          optionalContentConfig,\n        });\n        internalRenderTask.operatorListChanged();\n      })\n      .catch(complete);\n\n    return renderTask;\n  }\n\n  /**\n   * @param {GetOperatorListParameters} params - Page getOperatorList\n   *   parameters.\n   * @returns {Promise<PDFOperatorList>} A promise resolved with an\n   *   {@link PDFOperatorList} object that represents the page's operator list.\n   */\n  getOperatorList({ intent = \"display\" } = {}) {\n    function operatorListChanged() {\n      if (intentState.operatorList.lastChunk) {\n        intentState.opListReadCapability.resolve(intentState.operatorList);\n\n        intentState.renderTasks.delete(opListTask);\n      }\n    }\n\n    const renderingIntent = `oplist-${\n      intent === \"print\" ? \"print\" : \"display\"\n    }`;\n    let intentState = this._intentStates.get(renderingIntent);\n    if (!intentState) {\n      intentState = Object.create(null);\n      this._intentStates.set(renderingIntent, intentState);\n    }\n    let opListTask;\n\n    if (!intentState.opListReadCapability) {\n      opListTask = Object.create(null);\n      opListTask.operatorListChanged = operatorListChanged;\n      intentState.opListReadCapability = createPromiseCapability();\n      (intentState.renderTasks ||= new Set()).add(opListTask);\n      intentState.operatorList = {\n        fnArray: [],\n        argsArray: [],\n        lastChunk: false,\n      };\n\n      if (this._stats) {\n        this._stats.time(\"Page Request\");\n      }\n      this._pumpOperatorList({\n        pageIndex: this._pageIndex,\n        intent: renderingIntent,\n      });\n    }\n    return intentState.opListReadCapability.promise;\n  }\n\n  /**\n   * @param {getTextContentParameters} params - getTextContent parameters.\n   * @returns {ReadableStream} Stream for reading text content chunks.\n   */\n  streamTextContent({\n    normalizeWhitespace = false,\n    disableCombineTextItems = false,\n    includeMarkedContent = false,\n  } = {}) {\n    const TEXT_CONTENT_CHUNK_SIZE = 100;\n\n    return this._transport.messageHandler.sendWithStream(\n      \"GetTextContent\",\n      {\n        pageIndex: this._pageIndex,\n        normalizeWhitespace: normalizeWhitespace === true,\n        combineTextItems: disableCombineTextItems !== true,\n        includeMarkedContent: includeMarkedContent === true,\n      },\n      {\n        highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n        size(textContent) {\n          return textContent.items.length;\n        },\n      }\n    );\n  }\n\n  /**\n   * @param {getTextContentParameters} params - getTextContent parameters.\n   * @returns {Promise<TextContent>} A promise that is resolved with a\n   *   {@link TextContent} object that represents the page's text content.\n   */\n  getTextContent(params = {}) {\n    const readableStream = this.streamTextContent(params);\n\n    return new Promise(function (resolve, reject) {\n      function pump() {\n        reader.read().then(function ({ value, done }) {\n          if (done) {\n            resolve(textContent);\n            return;\n          }\n          Object.assign(textContent.styles, value.styles);\n          textContent.items.push(...value.items);\n          pump();\n        }, reject);\n      }\n\n      const reader = readableStream.getReader();\n      const textContent = {\n        items: [],\n        styles: Object.create(null),\n      };\n      pump();\n    });\n  }\n\n  /**\n   * @returns {Promise<StructTreeNode>} A promise that is resolved with a\n   *   {@link StructTreeNode} object that represents the page's structure tree,\n   *   or `null` when no structure tree is present for the current page.\n   */\n  getStructTree() {\n    return (this._structTreePromise ||= this._transport.getStructTree(\n      this._pageIndex\n    ));\n  }\n\n  /**\n   * Destroys the page object.\n   * @private\n   */\n  _destroy() {\n    this.destroyed = true;\n    this._transport.pageCache[this._pageIndex] = null;\n\n    const waitOn = [];\n    for (const [intent, intentState] of this._intentStates) {\n      this._abortOperatorList({\n        intentState,\n        reason: new Error(\"Page was destroyed.\"),\n        force: true,\n      });\n\n      if (intent.startsWith(\"oplist-\")) {\n        // Avoid errors below, since the renderTasks are just stubs.\n        continue;\n      }\n      for (const internalRenderTask of intentState.renderTasks) {\n        waitOn.push(internalRenderTask.completed);\n        internalRenderTask.cancel();\n      }\n    }\n    this.objs.clear();\n    this._annotationsPromise = null;\n    this._jsActionsPromise = null;\n    this._structTreePromise = null;\n    this.pendingCleanup = false;\n    return Promise.all(waitOn);\n  }\n\n  /**\n   * Cleans up resources allocated by the page.\n   *\n   * @param {boolean} [resetStats] - Reset page stats, if enabled.\n   *   The default value is `false`.\n   * @returns {boolean} Indicates if clean-up was successfully run.\n   */\n  cleanup(resetStats = false) {\n    this.pendingCleanup = true;\n    return this._tryCleanup(resetStats);\n  }\n\n  /**\n   * Attempts to clean up if rendering is in a state where that's possible.\n   * @private\n   */\n  _tryCleanup(resetStats = false) {\n    if (!this.pendingCleanup) {\n      return false;\n    }\n    for (const { renderTasks, operatorList } of this._intentStates.values()) {\n      if (renderTasks.size > 0 || !operatorList.lastChunk) {\n        return false;\n      }\n    }\n\n    this._intentStates.clear();\n    this.objs.clear();\n    this._annotationsPromise = null;\n    this._jsActionsPromise = null;\n    this._structTreePromise = null;\n    if (resetStats && this._stats) {\n      this._stats = new StatTimer();\n    }\n    this.pendingCleanup = false;\n    return true;\n  }\n\n  /**\n   * @private\n   */\n  _startRenderPage(transparency, intent) {\n    const intentState = this._intentStates.get(intent);\n    if (!intentState) {\n      return; // Rendering was cancelled.\n    }\n    if (this._stats) {\n      this._stats.timeEnd(\"Page Request\");\n    }\n    // TODO Refactor RenderPageRequest to separate rendering\n    // and operator list logic\n    if (intentState.displayReadyCapability) {\n      intentState.displayReadyCapability.resolve(transparency);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _renderPageChunk(operatorListChunk, intentState) {\n    // Add the new chunk to the current operator list.\n    for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\n      intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n      intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n    }\n    intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n\n    // Notify all the rendering tasks there are more operators to be consumed.\n    for (const internalRenderTask of intentState.renderTasks) {\n      internalRenderTask.operatorListChanged();\n    }\n\n    if (operatorListChunk.lastChunk) {\n      this._tryCleanup();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _pumpOperatorList(args) {\n    assert(\n      args.intent,\n      'PDFPageProxy._pumpOperatorList: Expected \"intent\" argument.'\n    );\n\n    const readableStream = this._transport.messageHandler.sendWithStream(\n      \"GetOperatorList\",\n      args\n    );\n    const reader = readableStream.getReader();\n\n    const intentState = this._intentStates.get(args.intent);\n    intentState.streamReader = reader;\n\n    const pump = () => {\n      reader.read().then(\n        ({ value, done }) => {\n          if (done) {\n            intentState.streamReader = null;\n            return;\n          }\n          if (this._transport.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          this._renderPageChunk(value, intentState);\n          pump();\n        },\n        reason => {\n          intentState.streamReader = null;\n\n          if (this._transport.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          if (intentState.operatorList) {\n            // Mark operator list as complete.\n            intentState.operatorList.lastChunk = true;\n\n            for (const internalRenderTask of intentState.renderTasks) {\n              internalRenderTask.operatorListChanged();\n            }\n            this._tryCleanup();\n          }\n\n          if (intentState.displayReadyCapability) {\n            intentState.displayReadyCapability.reject(reason);\n          } else if (intentState.opListReadCapability) {\n            intentState.opListReadCapability.reject(reason);\n          } else {\n            throw reason;\n          }\n        }\n      );\n    };\n    pump();\n  }\n\n  /**\n   * @private\n   */\n  _abortOperatorList({ intentState, reason, force = false }) {\n    assert(\n      reason instanceof Error ||\n        (typeof reason === \"object\" && reason !== null),\n      'PDFPageProxy._abortOperatorList: Expected \"reason\" argument.'\n    );\n\n    if (!intentState.streamReader) {\n      return;\n    }\n    if (!force) {\n      // Ensure that an Error occurring in *only* one `InternalRenderTask`, e.g.\n      // multiple render() calls on the same canvas, won't break all rendering.\n      if (intentState.renderTasks.size > 0) {\n        return;\n      }\n      // Don't immediately abort parsing on the worker-thread when rendering is\n      // cancelled, since that will unnecessarily delay re-rendering when (for\n      // partially parsed pages) e.g. zooming/rotation occurs in the viewer.\n      if (reason instanceof RenderingCancelledException) {\n        intentState.streamReaderCancelTimeout = setTimeout(() => {\n          this._abortOperatorList({ intentState, reason, force: true });\n          intentState.streamReaderCancelTimeout = null;\n        }, RENDERING_CANCELLED_TIMEOUT);\n        return;\n      }\n    }\n    intentState.streamReader.cancel(new AbortException(reason?.message));\n    intentState.streamReader = null;\n\n    if (this._transport.destroyed) {\n      return; // Ignore any pending requests if the worker was terminated.\n    }\n    // Remove the current `intentState`, since a cancelled `getOperatorList`\n    // call on the worker-thread cannot be re-started...\n    for (const [intent, curIntentState] of this._intentStates) {\n      if (curIntentState === intentState) {\n        this._intentStates.delete(intent);\n        break;\n      }\n    }\n    // ... and force clean-up to ensure that any old state is always removed.\n    this.cleanup();\n  }\n\n  /**\n   * @type {Object} Returns page stats, if enabled; returns `null` otherwise.\n   */\n  get stats() {\n    return this._stats;\n  }\n}\n\nclass LoopbackPort {\n  constructor() {\n    this._listeners = [];\n    this._deferred = Promise.resolve(undefined);\n  }\n\n  postMessage(obj, transfers) {\n    function cloneValue(value) {\n      // Trying to perform a structured clone close to the spec, including\n      // transfers.\n      if (\n        typeof value === \"function\" ||\n        typeof value === \"symbol\" ||\n        value instanceof URL\n      ) {\n        throw new Error(\n          `LoopbackPort.postMessage - cannot clone: ${value?.toString()}`\n        );\n      }\n\n      if (typeof value !== \"object\" || value === null) {\n        return value;\n      }\n      if (cloned.has(value)) {\n        // already cloned the object\n        return cloned.get(value);\n      }\n      let buffer, result;\n      if ((buffer = value.buffer) && isArrayBuffer(buffer)) {\n        // We found object with ArrayBuffer (typed array).\n        if (transfers?.includes(buffer)) {\n          result = new value.constructor(\n            buffer,\n            value.byteOffset,\n            value.byteLength\n          );\n        } else {\n          result = new value.constructor(value);\n        }\n        cloned.set(value, result);\n        return result;\n      }\n      if (value instanceof Map) {\n        result = new Map();\n        cloned.set(value, result); // Adding to cache now for cyclic references.\n        for (const [key, val] of value) {\n          result.set(key, cloneValue(val));\n        }\n        return result;\n      }\n      if (value instanceof Set) {\n        result = new Set();\n        cloned.set(value, result); // Adding to cache now for cyclic references.\n        for (const val of value) {\n          result.add(cloneValue(val));\n        }\n        return result;\n      }\n      result = Array.isArray(value) ? [] : Object.create(null);\n      cloned.set(value, result); // Adding to cache now for cyclic references.\n      // Cloning all value and object properties, however ignoring properties\n      // defined via getter.\n      for (const i in value) {\n        let desc,\n          p = value;\n        while (!(desc = Object.getOwnPropertyDescriptor(p, i))) {\n          p = Object.getPrototypeOf(p);\n        }\n        if (typeof desc.value === \"undefined\") {\n          continue;\n        }\n        if (typeof desc.value === \"function\" && !value.hasOwnProperty?.(i)) {\n          continue;\n        }\n        result[i] = cloneValue(desc.value);\n      }\n      return result;\n    }\n\n    const cloned = new WeakMap();\n    const event = { data: cloneValue(obj) };\n\n    this._deferred.then(() => {\n      for (const listener of this._listeners) {\n        listener.call(this, event);\n      }\n    });\n  }\n\n  addEventListener(name, listener) {\n    this._listeners.push(listener);\n  }\n\n  removeEventListener(name, listener) {\n    const i = this._listeners.indexOf(listener);\n    this._listeners.splice(i, 1);\n  }\n\n  terminate() {\n    this._listeners.length = 0;\n  }\n}\n\n/**\n * @typedef {Object} PDFWorkerParameters\n * @property {string} [name] - The name of the worker.\n * @property {Object} [port] - The `workerPort` object.\n * @property {number} [verbosity] - Controls the logging level; the\n *   constants from {@link VerbosityLevel} should be used.\n */\n\n/** @type {any} */\nconst PDFWorker = (function PDFWorkerClosure() {\n  const pdfWorkerPorts = new WeakMap();\n  let isWorkerDisabled = false;\n  let fallbackWorkerSrc;\n  let nextFakeWorkerId = 0;\n  let fakeWorkerCapability;\n\n  if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\")) {\n    // eslint-disable-next-line no-undef\n    if (isNodeJS && typeof __non_webpack_require__ === \"function\") {\n      // Workers aren't supported in Node.js, force-disabling them there.\n      isWorkerDisabled = true;\n\n      if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"LIB\")) {\n        fallbackWorkerSrc = \"../pdf.worker.js\";\n      } else {\n        fallbackWorkerSrc = \"./pdf.worker.js\";\n      }\n    } else if (typeof document === \"object\" && \"currentScript\" in document) {\n      const pdfjsFilePath = document.currentScript?.src;\n      if (pdfjsFilePath) {\n        fallbackWorkerSrc = pdfjsFilePath.replace(\n          /(\\.(?:min\\.)?js)(\\?.*)?$/i,\n          \".worker$1$2\"\n        );\n      }\n    }\n  }\n\n  function getWorkerSrc() {\n    if (GlobalWorkerOptions.workerSrc) {\n      return GlobalWorkerOptions.workerSrc;\n    }\n    if (typeof fallbackWorkerSrc !== \"undefined\") {\n      if (!isNodeJS) {\n        deprecated('No \"GlobalWorkerOptions.workerSrc\" specified.');\n      }\n      return fallbackWorkerSrc;\n    }\n    throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n  }\n\n  function getMainThreadWorkerMessageHandler() {\n    let mainWorkerMessageHandler;\n    try {\n      mainWorkerMessageHandler = globalThis.pdfjsWorker?.WorkerMessageHandler;\n    } catch (ex) {\n      /* Ignore errors. */\n    }\n    return mainWorkerMessageHandler || null;\n  }\n\n  // Loads worker code into main thread.\n  function setupFakeWorkerGlobal() {\n    if (fakeWorkerCapability) {\n      return fakeWorkerCapability.promise;\n    }\n    fakeWorkerCapability = createPromiseCapability();\n\n    const loader = async function () {\n      const mainWorkerMessageHandler = getMainThreadWorkerMessageHandler();\n\n      if (mainWorkerMessageHandler) {\n        // The worker was already loaded using e.g. a `<script>` tag.\n        return mainWorkerMessageHandler;\n      }\n      if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"PRODUCTION\")) {\n        const worker = await import(\"pdfjs/core/worker.js\");\n        return worker.WorkerMessageHandler;\n      }\n      if (\n        PDFJSDev.test(\"GENERIC\") &&\n        isNodeJS &&\n        // eslint-disable-next-line no-undef\n        typeof __non_webpack_require__ === \"function\"\n      ) {\n        // Since bundlers, such as Webpack, cannot be told to leave `require`\n        // statements alone we are thus forced to jump through hoops in order\n        // to prevent `Critical dependency: ...` warnings in third-party\n        // deployments of the built `pdf.js`/`pdf.worker.js` files; see\n        // https://github.com/webpack/webpack/issues/8826\n        //\n        // The following hack is based on the assumption that code running in\n        // Node.js won't ever be affected by e.g. Content Security Policies that\n        // prevent the use of `eval`. If that ever occurs, we should revert this\n        // to a normal `__non_webpack_require__` statement and simply document\n        // the Webpack warnings instead (telling users to ignore them).\n        //\n        // eslint-disable-next-line no-eval\n        const worker = eval(\"require\")(getWorkerSrc());\n        return worker.WorkerMessageHandler;\n      }\n      await loadScript(getWorkerSrc());\n      return window.pdfjsWorker.WorkerMessageHandler;\n    };\n    loader().then(fakeWorkerCapability.resolve, fakeWorkerCapability.reject);\n\n    return fakeWorkerCapability.promise;\n  }\n\n  function createCDNWrapper(url) {\n    // We will rely on blob URL's property to specify origin.\n    // We want this function to fail in case if createObjectURL or Blob do not\n    // exist or fail for some reason -- our Worker creation will fail anyway.\n    const wrapper = \"importScripts('\" + url + \"');\";\n    return URL.createObjectURL(new Blob([wrapper]));\n  }\n\n  /**\n   * PDF.js web worker abstraction that controls the instantiation of PDF\n   * documents. Message handlers are used to pass information from the main\n   * thread to the worker thread and vice versa. If the creation of a web\n   * worker is not possible, a \"fake\" worker will be used instead.\n   */\n  // eslint-disable-next-line no-shadow\n  class PDFWorker {\n    /**\n     * @param {PDFWorkerParameters} params - Worker initialization parameters.\n     */\n    constructor({\n      name = null,\n      port = null,\n      verbosity = getVerbosityLevel(),\n    } = {}) {\n      if (port && pdfWorkerPorts.has(port)) {\n        throw new Error(\"Cannot use more than one PDFWorker per port\");\n      }\n\n      this.name = name;\n      this.destroyed = false;\n      this.postMessageTransfers = true;\n      this.verbosity = verbosity;\n\n      this._readyCapability = createPromiseCapability();\n      this._port = null;\n      this._webWorker = null;\n      this._messageHandler = null;\n\n      if (port) {\n        pdfWorkerPorts.set(port, this);\n        this._initializeFromPort(port);\n        return;\n      }\n      this._initialize();\n    }\n\n    get promise() {\n      return this._readyCapability.promise;\n    }\n\n    get port() {\n      return this._port;\n    }\n\n    get messageHandler() {\n      return this._messageHandler;\n    }\n\n    _initializeFromPort(port) {\n      this._port = port;\n      this._messageHandler = new MessageHandler(\"main\", \"worker\", port);\n      this._messageHandler.on(\"ready\", function () {\n        // Ignoring 'ready' event -- MessageHandler shall be already initialized\n        // and ready to accept the messages.\n      });\n      this._readyCapability.resolve();\n    }\n\n    _initialize() {\n      // If worker support isn't disabled explicit and the browser has worker\n      // support, create a new web worker and test if it/the browser fulfills\n      // all requirements to run parts of pdf.js in a web worker.\n      // Right now, the requirement is, that an Uint8Array is still an\n      // Uint8Array as it arrives on the worker. (Chrome added this with v.15.)\n      if (\n        typeof Worker !== \"undefined\" &&\n        !isWorkerDisabled &&\n        !getMainThreadWorkerMessageHandler()\n      ) {\n        let workerSrc = getWorkerSrc();\n\n        try {\n          // Wraps workerSrc path into blob URL, if the former does not belong\n          // to the same origin.\n          if (\n            typeof PDFJSDev !== \"undefined\" &&\n            PDFJSDev.test(\"GENERIC\") &&\n            !isSameOrigin(window.location.href, workerSrc)\n          ) {\n            workerSrc = createCDNWrapper(\n              new URL(workerSrc, window.location).href\n            );\n          }\n\n          // Some versions of FF can't create a worker on localhost, see:\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=683280\n          const worker = new Worker(workerSrc);\n          const messageHandler = new MessageHandler(\"main\", \"worker\", worker);\n          const terminateEarly = () => {\n            worker.removeEventListener(\"error\", onWorkerError);\n            messageHandler.destroy();\n            worker.terminate();\n            if (this.destroyed) {\n              this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n            } else {\n              // Fall back to fake worker if the termination is caused by an\n              // error (e.g. NetworkError / SecurityError).\n              this._setupFakeWorker();\n            }\n          };\n\n          const onWorkerError = () => {\n            if (!this._webWorker) {\n              // Worker failed to initialize due to an error. Clean up and fall\n              // back to the fake worker.\n              terminateEarly();\n            }\n          };\n          worker.addEventListener(\"error\", onWorkerError);\n\n          messageHandler.on(\"test\", data => {\n            worker.removeEventListener(\"error\", onWorkerError);\n            if (this.destroyed) {\n              terminateEarly();\n              return; // worker was destroyed\n            }\n            if (data) {\n              // supportTypedArray\n              this._messageHandler = messageHandler;\n              this._port = worker;\n              this._webWorker = worker;\n              if (!data.supportTransfers) {\n                this.postMessageTransfers = false;\n              }\n              this._readyCapability.resolve();\n              // Send global setting, e.g. verbosity level.\n              messageHandler.send(\"configure\", {\n                verbosity: this.verbosity,\n              });\n            } else {\n              this._setupFakeWorker();\n              messageHandler.destroy();\n              worker.terminate();\n            }\n          });\n\n          messageHandler.on(\"ready\", data => {\n            worker.removeEventListener(\"error\", onWorkerError);\n            if (this.destroyed) {\n              terminateEarly();\n              return; // worker was destroyed\n            }\n            try {\n              sendTest();\n            } catch (e) {\n              // We need fallback to a faked worker.\n              this._setupFakeWorker();\n            }\n          });\n\n          const sendTest = () => {\n            const testObj = new Uint8Array([\n              this.postMessageTransfers ? 255 : 0,\n            ]);\n            // Some versions of Opera throw a DATA_CLONE_ERR on serializing the\n            // typed array. Also, checking if we can use transfers.\n            try {\n              messageHandler.send(\"test\", testObj, [testObj.buffer]);\n            } catch (ex) {\n              warn(\"Cannot use postMessage transfers.\");\n              testObj[0] = 0;\n              messageHandler.send(\"test\", testObj);\n            }\n          };\n\n          // It might take time for worker to initialize (especially when AMD\n          // loader is used). We will try to send test immediately, and then\n          // when 'ready' message will arrive. The worker shall process only\n          // first received 'test'.\n          sendTest();\n          return;\n        } catch (e) {\n          info(\"The worker has been disabled.\");\n        }\n      }\n      // Either workers are disabled, not supported or have thrown an exception.\n      // Thus, we fallback to a faked worker.\n      this._setupFakeWorker();\n    }\n\n    _setupFakeWorker() {\n      if (!isWorkerDisabled) {\n        warn(\"Setting up fake worker.\");\n        isWorkerDisabled = true;\n      }\n\n      setupFakeWorkerGlobal()\n        .then(WorkerMessageHandler => {\n          if (this.destroyed) {\n            this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n            return;\n          }\n          const port = new LoopbackPort();\n          this._port = port;\n\n          // All fake workers use the same port, making id unique.\n          const id = \"fake\" + nextFakeWorkerId++;\n\n          // If the main thread is our worker, setup the handling for the\n          // messages -- the main thread sends to it self.\n          const workerHandler = new MessageHandler(id + \"_worker\", id, port);\n          WorkerMessageHandler.setup(workerHandler, port);\n\n          const messageHandler = new MessageHandler(id, id + \"_worker\", port);\n          this._messageHandler = messageHandler;\n          this._readyCapability.resolve();\n          // Send global setting, e.g. verbosity level.\n          messageHandler.send(\"configure\", {\n            verbosity: this.verbosity,\n          });\n        })\n        .catch(reason => {\n          this._readyCapability.reject(\n            new Error(`Setting up fake worker failed: \"${reason.message}\".`)\n          );\n        });\n    }\n\n    /**\n     * Destroys the worker instance.\n     */\n    destroy() {\n      this.destroyed = true;\n      if (this._webWorker) {\n        // We need to terminate only web worker created resource.\n        this._webWorker.terminate();\n        this._webWorker = null;\n      }\n      pdfWorkerPorts.delete(this._port);\n      this._port = null;\n      if (this._messageHandler) {\n        this._messageHandler.destroy();\n        this._messageHandler = null;\n      }\n    }\n\n    /**\n     * @param {PDFWorkerParameters} params - The worker initialization\n     *   parameters.\n     */\n    static fromPort(params) {\n      if (!params || !params.port) {\n        throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n      }\n      if (pdfWorkerPorts.has(params.port)) {\n        return pdfWorkerPorts.get(params.port);\n      }\n      return new PDFWorker(params);\n    }\n\n    static getWorkerSrc() {\n      return getWorkerSrc();\n    }\n  }\n  return PDFWorker;\n})();\n\n/**\n * For internal use only.\n * @ignore\n */\nclass WorkerTransport {\n  constructor(messageHandler, loadingTask, networkStream, params) {\n    this.messageHandler = messageHandler;\n    this.loadingTask = loadingTask;\n    this.commonObjs = new PDFObjects();\n    this.fontLoader = new FontLoader({\n      docId: loadingTask.docId,\n      onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n      ownerDocument: params.ownerDocument,\n      styleElement: params.styleElement,\n    });\n    this._params = params;\n\n    if (!params.useWorkerFetch) {\n      this.CMapReaderFactory = new params.CMapReaderFactory({\n        baseUrl: params.cMapUrl,\n        isCompressed: params.cMapPacked,\n      });\n      this.StandardFontDataFactory = new params.StandardFontDataFactory({\n        baseUrl: params.standardFontDataUrl,\n      });\n    }\n\n    this.destroyed = false;\n    this.destroyCapability = null;\n    this._passwordCapability = null;\n\n    this._networkStream = networkStream;\n    this._fullReader = null;\n    this._lastProgress = null;\n\n    this.pageCache = [];\n    this.pagePromises = [];\n    this.downloadInfoCapability = createPromiseCapability();\n\n    this.setupMessageHandler();\n  }\n\n  get annotationStorage() {\n    return shadow(this, \"annotationStorage\", new AnnotationStorage());\n  }\n\n  destroy() {\n    if (this.destroyCapability) {\n      return this.destroyCapability.promise;\n    }\n\n    this.destroyed = true;\n    this.destroyCapability = createPromiseCapability();\n\n    if (this._passwordCapability) {\n      this._passwordCapability.reject(\n        new Error(\"Worker was destroyed during onPassword callback\")\n      );\n    }\n\n    const waitOn = [];\n    // We need to wait for all renderings to be completed, e.g.\n    // timeout/rAF can take a long time.\n    for (const page of this.pageCache) {\n      if (page) {\n        waitOn.push(page._destroy());\n      }\n    }\n    this.pageCache.length = 0;\n    this.pagePromises.length = 0;\n    // Allow `AnnotationStorage`-related clean-up when destroying the document.\n    if (this.hasOwnProperty(\"annotationStorage\")) {\n      this.annotationStorage.resetModified();\n    }\n    // We also need to wait for the worker to finish its long running tasks.\n    const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n    waitOn.push(terminated);\n\n    Promise.all(waitOn).then(() => {\n      this.commonObjs.clear();\n      this.fontLoader.clear();\n      this._hasJSActionsPromise = null;\n\n      if (this._networkStream) {\n        this._networkStream.cancelAllRequests(\n          new AbortException(\"Worker was terminated.\")\n        );\n      }\n\n      if (this.messageHandler) {\n        this.messageHandler.destroy();\n        this.messageHandler = null;\n      }\n      this.destroyCapability.resolve();\n    }, this.destroyCapability.reject);\n    return this.destroyCapability.promise;\n  }\n\n  setupMessageHandler() {\n    const { messageHandler, loadingTask } = this;\n\n    messageHandler.on(\"GetReader\", (data, sink) => {\n      assert(\n        this._networkStream,\n        \"GetReader - no `IPDFStream` instance available.\"\n      );\n      this._fullReader = this._networkStream.getFullReader();\n      this._fullReader.onProgress = evt => {\n        this._lastProgress = {\n          loaded: evt.loaded,\n          total: evt.total,\n        };\n      };\n      sink.onPull = () => {\n        this._fullReader\n          .read()\n          .then(function ({ value, done }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n            assert(\n              isArrayBuffer(value),\n              \"GetReader - expected an ArrayBuffer.\"\n            );\n            // Enqueue data chunk into sink, and transfer it\n            // to other side as `Transferable` object.\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          })\n          .catch(reason => {\n            sink.error(reason);\n          });\n      };\n\n      sink.onCancel = reason => {\n        this._fullReader.cancel(reason);\n\n        sink.ready.catch(readyReason => {\n          if (this.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          throw readyReason;\n        });\n      };\n    });\n\n    messageHandler.on(\"ReaderHeadersReady\", data => {\n      const headersCapability = createPromiseCapability();\n      const fullReader = this._fullReader;\n      fullReader.headersReady.then(() => {\n        // If stream or range are disabled, it's our only way to report\n        // loading progress.\n        if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n          if (this._lastProgress && loadingTask.onProgress) {\n            loadingTask.onProgress(this._lastProgress);\n          }\n          fullReader.onProgress = evt => {\n            if (loadingTask.onProgress) {\n              loadingTask.onProgress({\n                loaded: evt.loaded,\n                total: evt.total,\n              });\n            }\n          };\n        }\n\n        headersCapability.resolve({\n          isStreamingSupported: fullReader.isStreamingSupported,\n          isRangeSupported: fullReader.isRangeSupported,\n          contentLength: fullReader.contentLength,\n        });\n      }, headersCapability.reject);\n\n      return headersCapability.promise;\n    });\n\n    messageHandler.on(\"GetRangeReader\", (data, sink) => {\n      assert(\n        this._networkStream,\n        \"GetRangeReader - no `IPDFStream` instance available.\"\n      );\n      const rangeReader = this._networkStream.getRangeReader(\n        data.begin,\n        data.end\n      );\n\n      // When streaming is enabled, it's possible that the data requested here\n      // has already been fetched via the `_fullRequestReader` implementation.\n      // However, given that the PDF data is loaded asynchronously on the\n      // main-thread and then sent via `postMessage` to the worker-thread,\n      // it may not have been available during parsing (hence the attempt to\n      // use range requests here).\n      //\n      // To avoid wasting time and resources here, we'll thus *not* dispatch\n      // range requests if the data was already loaded but has not been sent to\n      // the worker-thread yet (which will happen via the `_fullRequestReader`).\n      if (!rangeReader) {\n        sink.close();\n        return;\n      }\n\n      sink.onPull = () => {\n        rangeReader\n          .read()\n          .then(function ({ value, done }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n            assert(\n              isArrayBuffer(value),\n              \"GetRangeReader - expected an ArrayBuffer.\"\n            );\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          })\n          .catch(reason => {\n            sink.error(reason);\n          });\n      };\n\n      sink.onCancel = reason => {\n        rangeReader.cancel(reason);\n\n        sink.ready.catch(readyReason => {\n          if (this.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          throw readyReason;\n        });\n      };\n    });\n\n    messageHandler.on(\"GetDoc\", ({ pdfInfo }) => {\n      this._numPages = pdfInfo.numPages;\n      this._htmlForXfa = pdfInfo.htmlForXfa;\n      delete pdfInfo.htmlForXfa;\n      loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n    });\n\n    messageHandler.on(\"DocException\", function (ex) {\n      let reason;\n      switch (ex.name) {\n        case \"PasswordException\":\n          reason = new PasswordException(ex.message, ex.code);\n          break;\n        case \"InvalidPDFException\":\n          reason = new InvalidPDFException(ex.message);\n          break;\n        case \"MissingPDFException\":\n          reason = new MissingPDFException(ex.message);\n          break;\n        case \"UnexpectedResponseException\":\n          reason = new UnexpectedResponseException(ex.message, ex.status);\n          break;\n        case \"UnknownErrorException\":\n          reason = new UnknownErrorException(ex.message, ex.details);\n          break;\n      }\n      if (!(reason instanceof Error)) {\n        const msg = \"DocException - expected a valid Error.\";\n        if (\n          typeof PDFJSDev === \"undefined\" ||\n          PDFJSDev.test(\"!PRODUCTION || TESTING\")\n        ) {\n          unreachable(msg);\n        } else {\n          warn(msg);\n        }\n      }\n      loadingTask._capability.reject(reason);\n    });\n\n    messageHandler.on(\"PasswordRequest\", exception => {\n      this._passwordCapability = createPromiseCapability();\n\n      if (loadingTask.onPassword) {\n        const updatePassword = password => {\n          this._passwordCapability.resolve({\n            password,\n          });\n        };\n        try {\n          loadingTask.onPassword(updatePassword, exception.code);\n        } catch (ex) {\n          this._passwordCapability.reject(ex);\n        }\n      } else {\n        this._passwordCapability.reject(\n          new PasswordException(exception.message, exception.code)\n        );\n      }\n      return this._passwordCapability.promise;\n    });\n\n    messageHandler.on(\"DataLoaded\", data => {\n      // For consistency: Ensure that progress is always reported when the\n      // entire PDF file has been loaded, regardless of how it was fetched.\n      if (loadingTask.onProgress) {\n        loadingTask.onProgress({\n          loaded: data.length,\n          total: data.length,\n        });\n      }\n      this.downloadInfoCapability.resolve(data);\n    });\n\n    messageHandler.on(\"StartRenderPage\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      const page = this.pageCache[data.pageIndex];\n      page._startRenderPage(data.transparency, data.intent);\n    });\n\n    messageHandler.on(\"commonobj\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      const [id, type, exportedData] = data;\n      if (this.commonObjs.has(id)) {\n        return;\n      }\n\n      switch (type) {\n        case \"Font\":\n          const params = this._params;\n\n          if (\"error\" in exportedData) {\n            const exportedError = exportedData.error;\n            warn(`Error during font loading: ${exportedError}`);\n            this.commonObjs.resolve(id, exportedError);\n            break;\n          }\n\n          let fontRegistry = null;\n          if (params.pdfBug && globalThis.FontInspector?.enabled) {\n            fontRegistry = {\n              registerFont(font, url) {\n                globalThis.FontInspector.fontAdded(font, url);\n              },\n            };\n          }\n          const font = new FontFaceObject(exportedData, {\n            isEvalSupported: params.isEvalSupported,\n            disableFontFace: params.disableFontFace,\n            ignoreErrors: params.ignoreErrors,\n            onUnsupportedFeature: this._onUnsupportedFeature.bind(this),\n            fontRegistry,\n          });\n\n          this.fontLoader\n            .bind(font)\n            .catch(reason => {\n              return messageHandler.sendWithPromise(\"FontFallback\", { id });\n            })\n            .finally(() => {\n              if (!params.fontExtraProperties && font.data) {\n                // Immediately release the `font.data` property once the font\n                // has been attached to the DOM, since it's no longer needed,\n                // rather than waiting for a `PDFDocumentProxy.cleanup` call.\n                // Since `font.data` could be very large, e.g. in some cases\n                // multiple megabytes, this will help reduce memory usage.\n                font.data = null;\n              }\n              this.commonObjs.resolve(id, font);\n            });\n          break;\n        case \"FontPath\":\n        case \"Image\":\n          this.commonObjs.resolve(id, exportedData);\n          break;\n        default:\n          throw new Error(`Got unknown common object type ${type}`);\n      }\n    });\n\n    messageHandler.on(\"obj\", data => {\n      if (this.destroyed) {\n        // Ignore any pending requests if the worker was terminated.\n        return undefined;\n      }\n\n      const [id, pageIndex, type, imageData] = data;\n      const pageProxy = this.pageCache[pageIndex];\n      if (pageProxy.objs.has(id)) {\n        return undefined;\n      }\n\n      switch (type) {\n        case \"Image\":\n          pageProxy.objs.resolve(id, imageData);\n\n          // Heuristic that will allow us not to store large data.\n          const MAX_IMAGE_SIZE_TO_STORE = 8000000;\n          if (imageData?.data?.length > MAX_IMAGE_SIZE_TO_STORE) {\n            pageProxy.cleanupAfterRender = true;\n          }\n          break;\n        case \"Pattern\":\n          pageProxy.objs.resolve(id, imageData);\n          break;\n        default:\n          throw new Error(`Got unknown object type ${type}`);\n      }\n      return undefined;\n    });\n\n    messageHandler.on(\"DocProgress\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      if (loadingTask.onProgress) {\n        loadingTask.onProgress({\n          loaded: data.loaded,\n          total: data.total,\n        });\n      }\n    });\n\n    messageHandler.on(\n      \"UnsupportedFeature\",\n      this._onUnsupportedFeature.bind(this)\n    );\n\n    messageHandler.on(\"FetchBuiltInCMap\", data => {\n      if (this.destroyed) {\n        return Promise.reject(new Error(\"Worker was destroyed.\"));\n      }\n      if (!this.CMapReaderFactory) {\n        return Promise.reject(\n          new Error(\n            \"CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.\"\n          )\n        );\n      }\n      return this.CMapReaderFactory.fetch(data);\n    });\n\n    messageHandler.on(\"FetchStandardFontData\", data => {\n      if (this.destroyed) {\n        return Promise.reject(new Error(\"Worker was destroyed.\"));\n      }\n      if (!this.StandardFontDataFactory) {\n        return Promise.reject(\n          new Error(\n            \"StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.\"\n          )\n        );\n      }\n      return this.StandardFontDataFactory.fetch(data);\n    });\n  }\n\n  _onUnsupportedFeature({ featureId }) {\n    if (this.destroyed) {\n      return; // Ignore any pending requests if the worker was terminated.\n    }\n    if (this.loadingTask.onUnsupportedFeature) {\n      this.loadingTask.onUnsupportedFeature(featureId);\n    }\n  }\n\n  getData() {\n    return this.messageHandler.sendWithPromise(\"GetData\", null);\n  }\n\n  getPage(pageNumber) {\n    if (\n      !Number.isInteger(pageNumber) ||\n      pageNumber <= 0 ||\n      pageNumber > this._numPages\n    ) {\n      return Promise.reject(new Error(\"Invalid page request\"));\n    }\n\n    const pageIndex = pageNumber - 1;\n    if (pageIndex in this.pagePromises) {\n      return this.pagePromises[pageIndex];\n    }\n    const promise = this.messageHandler\n      .sendWithPromise(\"GetPage\", {\n        pageIndex,\n      })\n      .then(pageInfo => {\n        if (this.destroyed) {\n          throw new Error(\"Transport destroyed\");\n        }\n        const page = new PDFPageProxy(\n          pageIndex,\n          pageInfo,\n          this,\n          this._params.ownerDocument,\n          this._params.pdfBug\n        );\n        this.pageCache[pageIndex] = page;\n        return page;\n      });\n    this.pagePromises[pageIndex] = promise;\n    return promise;\n  }\n\n  getPageIndex(ref) {\n    return this.messageHandler\n      .sendWithPromise(\"GetPageIndex\", {\n        ref,\n      })\n      .catch(function (reason) {\n        return Promise.reject(new Error(reason));\n      });\n  }\n\n  getAnnotations(pageIndex, intent) {\n    return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n      pageIndex,\n      intent,\n    });\n  }\n\n  saveDocument() {\n    return this.messageHandler\n      .sendWithPromise(\"SaveDocument\", {\n        isPureXfa: !!this._htmlForXfa,\n        numPages: this._numPages,\n        annotationStorage: this.annotationStorage.serializable,\n        filename: this._fullReader?.filename ?? null,\n      })\n      .finally(() => {\n        this.annotationStorage.resetModified();\n      });\n  }\n\n  getFieldObjects() {\n    return this.messageHandler.sendWithPromise(\"GetFieldObjects\", null);\n  }\n\n  hasJSActions() {\n    return (this._hasJSActionsPromise ||= this.messageHandler.sendWithPromise(\n      \"HasJSActions\",\n      null\n    ));\n  }\n\n  getCalculationOrderIds() {\n    return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n  }\n\n  getDestinations() {\n    return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n  }\n\n  getDestination(id) {\n    if (typeof id !== \"string\") {\n      return Promise.reject(new Error(\"Invalid destination request.\"));\n    }\n    return this.messageHandler.sendWithPromise(\"GetDestination\", {\n      id,\n    });\n  }\n\n  getPageLabels() {\n    return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n  }\n\n  getPageLayout() {\n    return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n  }\n\n  getPageMode() {\n    return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n  }\n\n  getViewerPreferences() {\n    return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n  }\n\n  getOpenAction() {\n    return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n  }\n\n  getAttachments() {\n    return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n  }\n\n  getJavaScript() {\n    return this.messageHandler.sendWithPromise(\"GetJavaScript\", null);\n  }\n\n  getDocJSActions() {\n    return this.messageHandler.sendWithPromise(\"GetDocJSActions\", null);\n  }\n\n  getPageJSActions(pageIndex) {\n    return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n      pageIndex,\n    });\n  }\n\n  getStructTree(pageIndex) {\n    return this.messageHandler.sendWithPromise(\"GetStructTree\", {\n      pageIndex,\n    });\n  }\n\n  getOutline() {\n    return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n  }\n\n  getOptionalContentConfig() {\n    return this.messageHandler\n      .sendWithPromise(\"GetOptionalContentConfig\", null)\n      .then(results => {\n        return new OptionalContentConfig(results);\n      });\n  }\n\n  getPermissions() {\n    return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n  }\n\n  getMetadata() {\n    return this.messageHandler\n      .sendWithPromise(\"GetMetadata\", null)\n      .then(results => {\n        return {\n          info: results[0],\n          metadata: results[1] ? new Metadata(results[1]) : null,\n          contentDispositionFilename: this._fullReader?.filename ?? null,\n          contentLength: this._fullReader?.contentLength ?? null,\n        };\n      });\n  }\n\n  getMarkInfo() {\n    return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n  }\n\n  getStats() {\n    return this.messageHandler.sendWithPromise(\"GetStats\", null);\n  }\n\n  async startCleanup(keepLoadedFonts = false) {\n    await this.messageHandler.sendWithPromise(\"Cleanup\", null);\n\n    if (this.destroyed) {\n      return; // No need to manually clean-up when destruction has started.\n    }\n    for (let i = 0, ii = this.pageCache.length; i < ii; i++) {\n      const page = this.pageCache[i];\n      if (!page) {\n        continue;\n      }\n      const cleanupSuccessful = page.cleanup();\n\n      if (!cleanupSuccessful) {\n        throw new Error(`startCleanup: Page ${i + 1} is currently rendering.`);\n      }\n    }\n    this.commonObjs.clear();\n    if (!keepLoadedFonts) {\n      this.fontLoader.clear();\n    }\n    this._hasJSActionsPromise = null;\n  }\n\n  get loadingParams() {\n    const params = this._params;\n    return shadow(this, \"loadingParams\", {\n      disableAutoFetch: params.disableAutoFetch,\n    });\n  }\n}\n\n/**\n * A PDF document and page is built of many objects. E.g. there are objects for\n * fonts, images, rendering code, etc. These objects may get processed inside of\n * a worker. This class implements some basic methods to manage these objects.\n * @ignore\n */\nclass PDFObjects {\n  constructor() {\n    this._objs = Object.create(null);\n  }\n\n  /**\n   * Ensures there is an object defined for `objId`.\n   * @private\n   */\n  _ensureObj(objId) {\n    if (this._objs[objId]) {\n      return this._objs[objId];\n    }\n    return (this._objs[objId] = {\n      capability: createPromiseCapability(),\n      data: null,\n      resolved: false,\n    });\n  }\n\n  /**\n   * If called *without* callback, this returns the data of `objId` but the\n   * object needs to be resolved. If it isn't, this method throws.\n   *\n   * If called *with* a callback, the callback is called with the data of the\n   * object once the object is resolved. That means, if you call this method\n   * and the object is already resolved, the callback gets called right away.\n   */\n  get(objId, callback = null) {\n    // If there is a callback, then the get can be async and the object is\n    // not required to be resolved right now.\n    if (callback) {\n      this._ensureObj(objId).capability.promise.then(callback);\n      return null;\n    }\n    // If there isn't a callback, the user expects to get the resolved data\n    // directly.\n    const obj = this._objs[objId];\n    // If there isn't an object yet or the object isn't resolved, then the\n    // data isn't ready yet!\n    if (!obj || !obj.resolved) {\n      throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\n    }\n    return obj.data;\n  }\n\n  has(objId) {\n    const obj = this._objs[objId];\n    return obj?.resolved || false;\n  }\n\n  /**\n   * Resolves the object `objId` with optional `data`.\n   */\n  resolve(objId, data) {\n    const obj = this._ensureObj(objId);\n\n    obj.resolved = true;\n    obj.data = data;\n    obj.capability.resolve(data);\n  }\n\n  clear() {\n    this._objs = Object.create(null);\n  }\n}\n\n/**\n * Allows controlling of the rendering tasks.\n */\nclass RenderTask {\n  constructor(internalRenderTask) {\n    this._internalRenderTask = internalRenderTask;\n\n    /**\n     * Callback for incremental rendering -- a function that will be called\n     * each time the rendering is paused.  To continue rendering call the\n     * function that is the first argument to the callback.\n     * @type {function}\n     */\n    this.onContinue = null;\n  }\n\n  /**\n   * Promise for rendering task completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._internalRenderTask.capability.promise;\n  }\n\n  /**\n   * Cancels the rendering task. If the task is currently rendering it will\n   * not be cancelled until graphics pauses with a timeout. The promise that\n   * this object extends will be rejected when cancelled.\n   */\n  cancel() {\n    this._internalRenderTask.cancel();\n  }\n}\n\n/**\n * For internal use only.\n * @ignore\n */\nconst InternalRenderTask = (function InternalRenderTaskClosure() {\n  const canvasInRendering = new WeakSet();\n\n  // eslint-disable-next-line no-shadow\n  class InternalRenderTask {\n    constructor({\n      callback,\n      params,\n      objs,\n      commonObjs,\n      operatorList,\n      pageIndex,\n      canvasFactory,\n      useRequestAnimationFrame = false,\n      pdfBug = false,\n    }) {\n      this.callback = callback;\n      this.params = params;\n      this.objs = objs;\n      this.commonObjs = commonObjs;\n      this.operatorListIdx = null;\n      this.operatorList = operatorList;\n      this._pageIndex = pageIndex;\n      this.canvasFactory = canvasFactory;\n      this._pdfBug = pdfBug;\n\n      this.running = false;\n      this.graphicsReadyCallback = null;\n      this.graphicsReady = false;\n      this._useRequestAnimationFrame =\n        useRequestAnimationFrame === true && typeof window !== \"undefined\";\n      this.cancelled = false;\n      this.capability = createPromiseCapability();\n      this.task = new RenderTask(this);\n      // caching this-bound methods\n      this._cancelBound = this.cancel.bind(this);\n      this._continueBound = this._continue.bind(this);\n      this._scheduleNextBound = this._scheduleNext.bind(this);\n      this._nextBound = this._next.bind(this);\n      this._canvas = params.canvasContext.canvas;\n    }\n\n    get completed() {\n      return this.capability.promise.catch(function () {\n        // Ignoring errors, since we only want to know when rendering is\n        // no longer pending.\n      });\n    }\n\n    initializeGraphics({ transparency = false, optionalContentConfig }) {\n      if (this.cancelled) {\n        return;\n      }\n      if (this._canvas) {\n        if (canvasInRendering.has(this._canvas)) {\n          throw new Error(\n            \"Cannot use the same canvas during multiple render() operations. \" +\n              \"Use different canvas or ensure previous operations were \" +\n              \"cancelled or completed.\"\n          );\n        }\n        canvasInRendering.add(this._canvas);\n      }\n\n      if (this._pdfBug && globalThis.StepperManager?.enabled) {\n        this.stepper = globalThis.StepperManager.create(this._pageIndex);\n        this.stepper.init(this.operatorList);\n        this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n      }\n      const { canvasContext, viewport, transform, imageLayer, background } =\n        this.params;\n\n      this.gfx = new CanvasGraphics(\n        canvasContext,\n        this.commonObjs,\n        this.objs,\n        this.canvasFactory,\n        imageLayer,\n        optionalContentConfig\n      );\n      this.gfx.beginDrawing({\n        transform,\n        viewport,\n        transparency,\n        background,\n      });\n      this.operatorListIdx = 0;\n      this.graphicsReady = true;\n      if (this.graphicsReadyCallback) {\n        this.graphicsReadyCallback();\n      }\n    }\n\n    cancel(error = null) {\n      this.running = false;\n      this.cancelled = true;\n      if (this.gfx) {\n        this.gfx.endDrawing();\n      }\n      if (this._canvas) {\n        canvasInRendering.delete(this._canvas);\n      }\n      this.callback(\n        error ||\n          new RenderingCancelledException(\n            `Rendering cancelled, page ${this._pageIndex + 1}`,\n            \"canvas\"\n          )\n      );\n    }\n\n    operatorListChanged() {\n      if (!this.graphicsReady) {\n        if (!this.graphicsReadyCallback) {\n          this.graphicsReadyCallback = this._continueBound;\n        }\n        return;\n      }\n\n      if (this.stepper) {\n        this.stepper.updateOperatorList(this.operatorList);\n      }\n\n      if (this.running) {\n        return;\n      }\n      this._continue();\n    }\n\n    _continue() {\n      this.running = true;\n      if (this.cancelled) {\n        return;\n      }\n      if (this.task.onContinue) {\n        this.task.onContinue(this._scheduleNextBound);\n      } else {\n        this._scheduleNext();\n      }\n    }\n\n    _scheduleNext() {\n      if (this._useRequestAnimationFrame) {\n        window.requestAnimationFrame(() => {\n          this._nextBound().catch(this._cancelBound);\n        });\n      } else {\n        Promise.resolve().then(this._nextBound).catch(this._cancelBound);\n      }\n    }\n\n    async _next() {\n      if (this.cancelled) {\n        return;\n      }\n      this.operatorListIdx = this.gfx.executeOperatorList(\n        this.operatorList,\n        this.operatorListIdx,\n        this._continueBound,\n        this.stepper\n      );\n      if (this.operatorListIdx === this.operatorList.argsArray.length) {\n        this.running = false;\n        if (this.operatorList.lastChunk) {\n          this.gfx.endDrawing();\n          if (this._canvas) {\n            canvasInRendering.delete(this._canvas);\n          }\n          this.callback();\n        }\n      }\n    }\n  }\n  return InternalRenderTask;\n})();\n\n/** @type {string} */\nconst version =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_VERSION\") : null;\n/** @type {string} */\nconst build =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_BUILD\") : null;\n\nexport {\n  build,\n  DefaultCanvasFactory,\n  DefaultCMapReaderFactory,\n  DefaultStandardFontDataFactory,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFDocumentProxy,\n  PDFPageProxy,\n  PDFWorker,\n  setPDFNetworkStreamFactory,\n  version,\n};\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  bytesToString,\n  IsEvalSupportedCached,\n  shadow,\n  string32,\n  unreachable,\n  UNSUPPORTED_FEATURES,\n  warn,\n} from \"../shared/util.js\";\n\nclass BaseFontLoader {\n  constructor({\n    docId,\n    onUnsupportedFeature,\n    ownerDocument = globalThis.document,\n    // For testing only.\n    styleElement = null,\n  }) {\n    if (this.constructor === BaseFontLoader) {\n      unreachable(\"Cannot initialize BaseFontLoader.\");\n    }\n    this.docId = docId;\n    this._onUnsupportedFeature = onUnsupportedFeature;\n    this._document = ownerDocument;\n\n    this.nativeFontFaces = [];\n    this.styleElement =\n      typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"!PRODUCTION || TESTING\")\n        ? styleElement\n        : null;\n  }\n\n  addNativeFontFace(nativeFontFace) {\n    this.nativeFontFaces.push(nativeFontFace);\n    this._document.fonts.add(nativeFontFace);\n  }\n\n  insertRule(rule) {\n    let styleElement = this.styleElement;\n    if (!styleElement) {\n      styleElement = this.styleElement = this._document.createElement(\"style\");\n      styleElement.id = `PDFJS_FONT_STYLE_TAG_${this.docId}`;\n      this._document.documentElement\n        .getElementsByTagName(\"head\")[0]\n        .appendChild(styleElement);\n    }\n    const styleSheet = styleElement.sheet;\n    styleSheet.insertRule(rule, styleSheet.cssRules.length);\n  }\n\n  clear() {\n    for (const nativeFontFace of this.nativeFontFaces) {\n      this._document.fonts.delete(nativeFontFace);\n    }\n    this.nativeFontFaces.length = 0;\n\n    if (this.styleElement) {\n      // Note: ChildNode.remove doesn't throw if the parentNode is undefined.\n      this.styleElement.remove();\n      this.styleElement = null;\n    }\n  }\n\n  async bind(font) {\n    // Add the font to the DOM only once; skip if the font is already loaded.\n    if (font.attached || font.missingFile) {\n      return;\n    }\n    font.attached = true;\n\n    if (this.isFontLoadingAPISupported) {\n      const nativeFontFace = font.createNativeFontFace();\n      if (nativeFontFace) {\n        this.addNativeFontFace(nativeFontFace);\n        try {\n          await nativeFontFace.loaded;\n        } catch (ex) {\n          this._onUnsupportedFeature({\n            featureId: UNSUPPORTED_FEATURES.errorFontLoadNative,\n          });\n          warn(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\n\n          // When font loading failed, fall back to the built-in font renderer.\n          font.disableFontFace = true;\n          throw ex;\n        }\n      }\n      return; // The font was, asynchronously, loaded.\n    }\n\n    // !this.isFontLoadingAPISupported\n    const rule = font.createFontFaceRule();\n    if (rule) {\n      this.insertRule(rule);\n\n      if (this.isSyncFontLoadingSupported) {\n        return; // The font was, synchronously, loaded.\n      }\n      await new Promise(resolve => {\n        const request = this._queueLoadingCallback(resolve);\n        this._prepareFontLoadEvent([rule], [font], request);\n      });\n      // The font was, asynchronously, loaded.\n    }\n  }\n\n  _queueLoadingCallback(callback) {\n    unreachable(\"Abstract method `_queueLoadingCallback`.\");\n  }\n\n  get isFontLoadingAPISupported() {\n    const hasFonts = !!this._document?.fonts;\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      return shadow(\n        this,\n        \"isFontLoadingAPISupported\",\n        hasFonts && !this.styleElement\n      );\n    }\n    return shadow(this, \"isFontLoadingAPISupported\", hasFonts);\n  }\n\n  // eslint-disable-next-line getter-return\n  get isSyncFontLoadingSupported() {\n    unreachable(\"Abstract method `isSyncFontLoadingSupported`.\");\n  }\n\n  // eslint-disable-next-line getter-return\n  get _loadTestFont() {\n    unreachable(\"Abstract method `_loadTestFont`.\");\n  }\n\n  _prepareFontLoadEvent(rules, fontsToLoad, request) {\n    unreachable(\"Abstract method `_prepareFontLoadEvent`.\");\n  }\n}\n\nlet FontLoader;\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  FontLoader = class MozcentralFontLoader extends BaseFontLoader {\n    get isSyncFontLoadingSupported() {\n      return shadow(this, \"isSyncFontLoadingSupported\", true);\n    }\n  };\n} else {\n  // PDFJSDev.test('CHROME || GENERIC')\n\n  FontLoader = class GenericFontLoader extends BaseFontLoader {\n    constructor(params) {\n      super(params);\n      this.loadingContext = {\n        requests: [],\n        nextRequestId: 0,\n      };\n      this.loadTestFontId = 0;\n    }\n\n    get isSyncFontLoadingSupported() {\n      let supported = false;\n      if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"CHROME\")) {\n        if (typeof navigator === \"undefined\") {\n          // Node.js - we can pretend that sync font loading is supported.\n          supported = true;\n        } else {\n          // User agent string sniffing is bad, but there is no reliable way to\n          // tell if the font is fully loaded and ready to be used with canvas.\n          const m = /Mozilla\\/5.0.*?rv:(\\d+).*? Gecko/.exec(\n            navigator.userAgent\n          );\n          if (m?.[1] >= 14) {\n            supported = true;\n          }\n          // TODO - other browsers...\n        }\n      }\n      return shadow(this, \"isSyncFontLoadingSupported\", supported);\n    }\n\n    _queueLoadingCallback(callback) {\n      function completeRequest() {\n        assert(!request.done, \"completeRequest() cannot be called twice.\");\n        request.done = true;\n\n        // Sending all completed requests in order of how they were queued.\n        while (context.requests.length > 0 && context.requests[0].done) {\n          const otherRequest = context.requests.shift();\n          setTimeout(otherRequest.callback, 0);\n        }\n      }\n\n      const context = this.loadingContext;\n      const request = {\n        id: `pdfjs-font-loading-${context.nextRequestId++}`,\n        done: false,\n        complete: completeRequest,\n        callback,\n      };\n      context.requests.push(request);\n      return request;\n    }\n\n    get _loadTestFont() {\n      const getLoadTestFont = function () {\n        // This is a CFF font with 1 glyph for '.' that fills its entire width\n        // and height.\n        return atob(\n          \"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" +\n            \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" +\n            \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" +\n            \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" +\n            \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" +\n            \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" +\n            \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" +\n            \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" +\n            \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" +\n            \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" +\n            \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" +\n            \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" +\n            \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n            \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" +\n            \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" +\n            \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" +\n            \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" +\n            \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\"\n        );\n      };\n      return shadow(this, \"_loadTestFont\", getLoadTestFont());\n    }\n\n    _prepareFontLoadEvent(rules, fonts, request) {\n      /** Hack begin */\n      // There's currently no event when a font has finished downloading so the\n      // following code is a dirty hack to 'guess' when a font is ready.\n      // It's assumed fonts are loaded in order, so add a known test font after\n      // the desired fonts and then test for the loading of that test font.\n\n      function int32(data, offset) {\n        return (\n          (data.charCodeAt(offset) << 24) |\n          (data.charCodeAt(offset + 1) << 16) |\n          (data.charCodeAt(offset + 2) << 8) |\n          (data.charCodeAt(offset + 3) & 0xff)\n        );\n      }\n      function spliceString(s, offset, remove, insert) {\n        const chunk1 = s.substring(0, offset);\n        const chunk2 = s.substring(offset + remove);\n        return chunk1 + insert + chunk2;\n      }\n      let i, ii;\n\n      // The temporary canvas is used to determine if fonts are loaded.\n      const canvas = this._document.createElement(\"canvas\");\n      canvas.width = 1;\n      canvas.height = 1;\n      const ctx = canvas.getContext(\"2d\");\n\n      let called = 0;\n      function isFontReady(name, callback) {\n        called++;\n        // With setTimeout clamping this gives the font ~100ms to load.\n        if (called > 30) {\n          warn(\"Load test font never loaded.\");\n          callback();\n          return;\n        }\n        ctx.font = \"30px \" + name;\n        ctx.fillText(\".\", 0, 20);\n        const imageData = ctx.getImageData(0, 0, 1, 1);\n        if (imageData.data[3] > 0) {\n          callback();\n          return;\n        }\n        setTimeout(isFontReady.bind(null, name, callback));\n      }\n\n      const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n      // Chromium seems to cache fonts based on a hash of the actual font data,\n      // so the font must be modified for each load test else it will appear to\n      // be loaded already.\n      // TODO: This could maybe be made faster by avoiding the btoa of the full\n      // font by splitting it in chunks before hand and padding the font id.\n      let data = this._loadTestFont;\n      const COMMENT_OFFSET = 976; // has to be on 4 byte boundary (for checksum)\n      data = spliceString(\n        data,\n        COMMENT_OFFSET,\n        loadTestFontId.length,\n        loadTestFontId\n      );\n      // CFF checksum is important for IE, adjusting it\n      const CFF_CHECKSUM_OFFSET = 16;\n      const XXXX_VALUE = 0x58585858; // the \"comment\" filled with 'X'\n      let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n      for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n        checksum = (checksum - XXXX_VALUE + int32(loadTestFontId, i)) | 0;\n      }\n      if (i < loadTestFontId.length) {\n        // align to 4 bytes boundary\n        checksum =\n          (checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i)) | 0;\n      }\n      data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, string32(checksum));\n\n      const url = `url(data:font/opentype;base64,${btoa(data)});`;\n      const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\n      this.insertRule(rule);\n\n      const names = [];\n      for (const font of fonts) {\n        names.push(font.loadedName);\n      }\n      names.push(loadTestFontId);\n\n      const div = this._document.createElement(\"div\");\n      div.style.visibility = \"hidden\";\n      div.style.width = div.style.height = \"10px\";\n      div.style.position = \"absolute\";\n      div.style.top = div.style.left = \"0px\";\n\n      for (const name of names) {\n        const span = this._document.createElement(\"span\");\n        span.textContent = \"Hi\";\n        span.style.fontFamily = name;\n        div.appendChild(span);\n      }\n      this._document.body.appendChild(div);\n\n      isFontReady(loadTestFontId, () => {\n        this._document.body.removeChild(div);\n        request.complete();\n      });\n      /** Hack end */\n    }\n  };\n} // End of PDFJSDev.test('CHROME || GENERIC')\n\nclass FontFaceObject {\n  constructor(\n    translatedData,\n    {\n      isEvalSupported = true,\n      disableFontFace = false,\n      ignoreErrors = false,\n      onUnsupportedFeature,\n      fontRegistry = null,\n    }\n  ) {\n    this.compiledGlyphs = Object.create(null);\n    // importing translated data\n    for (const i in translatedData) {\n      this[i] = translatedData[i];\n    }\n    this.isEvalSupported = isEvalSupported !== false;\n    this.disableFontFace = disableFontFace === true;\n    this.ignoreErrors = ignoreErrors === true;\n    this._onUnsupportedFeature = onUnsupportedFeature;\n    this.fontRegistry = fontRegistry;\n  }\n\n  createNativeFontFace() {\n    if (!this.data || this.disableFontFace) {\n      return null;\n    }\n    let nativeFontFace;\n    if (!this.cssFontInfo) {\n      nativeFontFace = new FontFace(this.loadedName, this.data, {});\n    } else {\n      const css = {\n        weight: this.cssFontInfo.fontWeight,\n      };\n      if (this.cssFontInfo.italicAngle) {\n        css.style = `oblique ${this.cssFontInfo.italicAngle}deg`;\n      }\n      nativeFontFace = new FontFace(\n        this.cssFontInfo.fontFamily,\n        this.data,\n        css\n      );\n    }\n\n    if (this.fontRegistry) {\n      this.fontRegistry.registerFont(this);\n    }\n    return nativeFontFace;\n  }\n\n  createFontFaceRule() {\n    if (!this.data || this.disableFontFace) {\n      return null;\n    }\n    const data = bytesToString(this.data);\n    // Add the @font-face rule to the document.\n    const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\n    let rule;\n    if (!this.cssFontInfo) {\n      rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\n    } else {\n      let css = `font-weight: ${this.cssFontInfo.fontWeight};`;\n      if (this.cssFontInfo.italicAngle) {\n        css += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;\n      }\n      rule = `@font-face {font-family:\"${this.cssFontInfo.fontFamily}\";${css}src:${url}}`;\n    }\n\n    if (this.fontRegistry) {\n      this.fontRegistry.registerFont(this, url);\n    }\n    return rule;\n  }\n\n  getPathGenerator(objs, character) {\n    if (this.compiledGlyphs[character] !== undefined) {\n      return this.compiledGlyphs[character];\n    }\n\n    let cmds;\n    try {\n      cmds = objs.get(this.loadedName + \"_path_\" + character);\n    } catch (ex) {\n      if (!this.ignoreErrors) {\n        throw ex;\n      }\n      this._onUnsupportedFeature({\n        featureId: UNSUPPORTED_FEATURES.errorFontGetPath,\n      });\n      warn(`getPathGenerator - ignoring character: \"${ex}\".`);\n\n      return (this.compiledGlyphs[character] = function (c, size) {\n        // No-op function, to allow rendering to continue.\n      });\n    }\n\n    // If we can, compile cmds into JS for MAXIMUM SPEED...\n    if (this.isEvalSupported && IsEvalSupportedCached.value) {\n      const jsBuf = [];\n      for (const current of cmds) {\n        const args = current.args !== undefined ? current.args.join(\",\") : \"\";\n        jsBuf.push(\"c.\", current.cmd, \"(\", args, \");\\n\");\n      }\n      // eslint-disable-next-line no-new-func\n      return (this.compiledGlyphs[character] = new Function(\n        \"c\",\n        \"size\",\n        jsBuf.join(\"\")\n      ));\n    }\n    // ... but fall back on using Function.prototype.apply() if we're\n    // blocked from using eval() for whatever reason (like CSP policies).\n    return (this.compiledGlyphs[character] = function (c, size) {\n      for (const current of cmds) {\n        if (current.cmd === \"scale\") {\n          current.args = [size, -size];\n        }\n        c[current.cmd].apply(c, current.args);\n      }\n    });\n  }\n}\n\nexport { FontFaceObject, FontLoader };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseStandardFontDataFactory,\n} from \"./base_factory.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\nimport { unreachable } from \"../shared/util.js\";\n\nlet NodeCanvasFactory = class {\n  constructor() {\n    unreachable(\"Not implemented: NodeCanvasFactory\");\n  }\n};\n\nlet NodeCMapReaderFactory = class {\n  constructor() {\n    unreachable(\"Not implemented: NodeCMapReaderFactory\");\n  }\n};\n\nlet NodeStandardFontDataFactory = class {\n  constructor() {\n    unreachable(\"Not implemented: NodeStandardFontDataFactory\");\n  }\n};\n\nif ((typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) && isNodeJS) {\n  const fetchData = function (url) {\n    return new Promise((resolve, reject) => {\n      const fs = __non_webpack_require__(\"fs\");\n      fs.readFile(url, (error, data) => {\n        if (error || !data) {\n          reject(new Error(error));\n          return;\n        }\n        resolve(new Uint8Array(data));\n      });\n    });\n  };\n\n  NodeCanvasFactory = class extends BaseCanvasFactory {\n    _createCanvas(width, height) {\n      const Canvas = __non_webpack_require__(\"canvas\");\n      return Canvas.createCanvas(width, height);\n    }\n  };\n\n  NodeCMapReaderFactory = class extends BaseCMapReaderFactory {\n    _fetchData(url, compressionType) {\n      return fetchData(url).then(data => {\n        return { cMapData: data, compressionType };\n      });\n    }\n  };\n\n  NodeStandardFontDataFactory = class extends BaseStandardFontDataFactory {\n    _fetchData(url) {\n      return fetchData(url);\n    }\n  };\n}\n\nexport {\n  NodeCanvasFactory,\n  NodeCMapReaderFactory,\n  NodeStandardFontDataFactory,\n};\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { objectFromMap } from \"../shared/util.js\";\n\n/**\n * Key/value storage for annotation data in forms.\n */\nclass AnnotationStorage {\n  constructor() {\n    this._storage = new Map();\n    this._modified = false;\n\n    // Callbacks to signal when the modification state is set or reset.\n    // This is used by the viewer to only bind on `beforeunload` if forms\n    // are actually edited to prevent doing so unconditionally since that\n    // can have undesirable effects.\n    this.onSetModified = null;\n    this.onResetModified = null;\n  }\n\n  /**\n   * Get the value for a given key if it exists, or return the default value.\n   *\n   * @public\n   * @memberof AnnotationStorage\n   * @param {string} key\n   * @param {Object} defaultValue\n   * @returns {Object}\n   */\n  getValue(key, defaultValue) {\n    const obj = this._storage.get(key);\n    return obj !== undefined ? obj : defaultValue;\n  }\n\n  /**\n   * Set the value for a given key\n   *\n   * @public\n   * @memberof AnnotationStorage\n   * @param {string} key\n   * @param {Object} value\n   */\n  setValue(key, value) {\n    const obj = this._storage.get(key);\n    let modified = false;\n    if (obj !== undefined) {\n      for (const [entry, val] of Object.entries(value)) {\n        if (obj[entry] !== val) {\n          modified = true;\n          obj[entry] = val;\n        }\n      }\n    } else {\n      this._storage.set(key, value);\n      modified = true;\n    }\n    if (modified) {\n      this._setModified();\n    }\n  }\n\n  getAll() {\n    return this._storage.size > 0 ? objectFromMap(this._storage) : null;\n  }\n\n  get size() {\n    return this._storage.size;\n  }\n\n  /**\n   * @private\n   */\n  _setModified() {\n    if (!this._modified) {\n      this._modified = true;\n      if (typeof this.onSetModified === \"function\") {\n        this.onSetModified();\n      }\n    }\n  }\n\n  resetModified() {\n    if (this._modified) {\n      this._modified = false;\n      if (typeof this.onResetModified === \"function\") {\n        this.onResetModified();\n      }\n    }\n  }\n\n  /**\n   * PLEASE NOTE: Only intended for usage within the API itself.\n   * @ignore\n   */\n  get serializable() {\n    return this._storage.size > 0 ? this._storage : null;\n  }\n}\n\nexport { AnnotationStorage };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FONT_IDENTITY_MATRIX,\n  IDENTITY_MATRIX,\n  ImageKind,\n  info,\n  IsLittleEndianCached,\n  isNum,\n  OPS,\n  shadow,\n  TextRenderingMode,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport { getShadingPattern, TilingPattern } from \"./pattern_helper.js\";\n\n// <canvas> contexts store most of the state we need natively.\n// However, PDF needs a bit more state, which we store here.\n// Minimal font size that would be used during canvas fillText operations.\nconst MIN_FONT_SIZE = 16;\n// Maximum font size that would be used during canvas fillText operations.\nconst MAX_FONT_SIZE = 100;\nconst MAX_GROUP_SIZE = 4096;\n\nconst COMPILE_TYPE3_GLYPHS = true;\nconst MAX_SIZE_TO_COMPILE = 1000;\n\nconst FULL_CHUNK_HEIGHT = 16;\n\n// Because of https://bugs.chromium.org/p/chromium/issues/detail?id=1170396\n// some curves aren't rendered correctly.\n// Multiplying lineWidth by this factor should help to have \"correct\"\n// rendering with no artifacts.\n// Once the bug is fixed upstream, we can remove this constant and its use.\nconst LINEWIDTH_SCALE_FACTOR = 1.000001;\n\nfunction addContextCurrentTransform(ctx) {\n  // If the context doesn't expose a `mozCurrentTransform`, add a JS based one.\n  if (ctx.mozCurrentTransform) {\n    return;\n  }\n  ctx._originalSave = ctx.save;\n  ctx._originalRestore = ctx.restore;\n  ctx._originalRotate = ctx.rotate;\n  ctx._originalScale = ctx.scale;\n  ctx._originalTranslate = ctx.translate;\n  ctx._originalTransform = ctx.transform;\n  ctx._originalSetTransform = ctx.setTransform;\n  ctx._originalResetTransform = ctx.resetTransform;\n\n  ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];\n  ctx._transformStack = [];\n\n  try {\n    // The call to getOwnPropertyDescriptor throws an exception in Node.js:\n    // \"TypeError: Method lineWidth called on incompatible receiver\n    //  #<CanvasRenderingContext2D>\".\n    const desc = Object.getOwnPropertyDescriptor(\n      Object.getPrototypeOf(ctx),\n      \"lineWidth\"\n    );\n\n    ctx._setLineWidth = desc.set;\n    ctx._getLineWidth = desc.get;\n\n    Object.defineProperty(ctx, \"lineWidth\", {\n      set: function setLineWidth(width) {\n        this._setLineWidth(width * LINEWIDTH_SCALE_FACTOR);\n      },\n      get: function getLineWidth() {\n        return this._getLineWidth();\n      },\n    });\n  } catch (_) {}\n\n  Object.defineProperty(ctx, \"mozCurrentTransform\", {\n    get: function getCurrentTransform() {\n      return this._transformMatrix;\n    },\n  });\n\n  Object.defineProperty(ctx, \"mozCurrentTransformInverse\", {\n    get: function getCurrentTransformInverse() {\n      // Calculation done using WolframAlpha:\n      // http://www.wolframalpha.com/input/?\n      //   i=Inverse+{{a%2C+c%2C+e}%2C+{b%2C+d%2C+f}%2C+{0%2C+0%2C+1}}\n\n      const [a, b, c, d, e, f] = this._transformMatrix;\n      const ad_bc = a * d - b * c;\n      const bc_ad = b * c - a * d;\n\n      return [\n        d / ad_bc,\n        b / bc_ad,\n        c / bc_ad,\n        a / ad_bc,\n        (d * e - c * f) / bc_ad,\n        (b * e - a * f) / ad_bc,\n      ];\n    },\n  });\n\n  ctx.save = function ctxSave() {\n    const old = this._transformMatrix;\n    this._transformStack.push(old);\n    this._transformMatrix = old.slice(0, 6);\n\n    this._originalSave();\n  };\n\n  ctx.restore = function ctxRestore() {\n    const prev = this._transformStack.pop();\n    if (prev) {\n      this._transformMatrix = prev;\n      this._originalRestore();\n    }\n  };\n\n  ctx.translate = function ctxTranslate(x, y) {\n    const m = this._transformMatrix;\n    m[4] = m[0] * x + m[2] * y + m[4];\n    m[5] = m[1] * x + m[3] * y + m[5];\n\n    this._originalTranslate(x, y);\n  };\n\n  ctx.scale = function ctxScale(x, y) {\n    const m = this._transformMatrix;\n    m[0] *= x;\n    m[1] *= x;\n    m[2] *= y;\n    m[3] *= y;\n\n    this._originalScale(x, y);\n  };\n\n  ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n    const m = this._transformMatrix;\n    this._transformMatrix = [\n      m[0] * a + m[2] * b,\n      m[1] * a + m[3] * b,\n      m[0] * c + m[2] * d,\n      m[1] * c + m[3] * d,\n      m[0] * e + m[2] * f + m[4],\n      m[1] * e + m[3] * f + m[5],\n    ];\n\n    ctx._originalTransform(a, b, c, d, e, f);\n  };\n\n  ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n    this._transformMatrix = [a, b, c, d, e, f];\n\n    ctx._originalSetTransform(a, b, c, d, e, f);\n  };\n\n  ctx.resetTransform = function ctxResetTransform() {\n    this._transformMatrix = [1, 0, 0, 1, 0, 0];\n\n    ctx._originalResetTransform();\n  };\n\n  ctx.rotate = function ctxRotate(angle) {\n    const cosValue = Math.cos(angle);\n    const sinValue = Math.sin(angle);\n\n    const m = this._transformMatrix;\n    this._transformMatrix = [\n      m[0] * cosValue + m[2] * sinValue,\n      m[1] * cosValue + m[3] * sinValue,\n      m[0] * -sinValue + m[2] * cosValue,\n      m[1] * -sinValue + m[3] * cosValue,\n      m[4],\n      m[5],\n    ];\n\n    this._originalRotate(angle);\n  };\n}\n\nclass CachedCanvases {\n  constructor(canvasFactory) {\n    this.canvasFactory = canvasFactory;\n    this.cache = Object.create(null);\n  }\n\n  getCanvas(id, width, height, trackTransform) {\n    let canvasEntry;\n    if (this.cache[id] !== undefined) {\n      canvasEntry = this.cache[id];\n      this.canvasFactory.reset(canvasEntry, width, height);\n      // reset canvas transform for emulated mozCurrentTransform, if needed\n      canvasEntry.context.setTransform(1, 0, 0, 1, 0, 0);\n    } else {\n      canvasEntry = this.canvasFactory.create(width, height);\n      this.cache[id] = canvasEntry;\n    }\n    if (trackTransform) {\n      addContextCurrentTransform(canvasEntry.context);\n    }\n    return canvasEntry;\n  }\n\n  clear() {\n    for (const id in this.cache) {\n      const canvasEntry = this.cache[id];\n      this.canvasFactory.destroy(canvasEntry);\n      delete this.cache[id];\n    }\n  }\n}\n\nfunction compileType3Glyph(imgData) {\n  const POINT_TO_PROCESS_LIMIT = 1000;\n  const POINT_TYPES = new Uint8Array([\n    0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0,\n  ]);\n\n  const width = imgData.width,\n    height = imgData.height,\n    width1 = width + 1;\n  let i, ii, j, j0;\n  const points = new Uint8Array(width1 * (height + 1));\n\n  // decodes bit-packed mask data\n  const lineSize = (width + 7) & ~7,\n    data0 = imgData.data;\n  const data = new Uint8Array(lineSize * height);\n  let pos = 0;\n  for (i = 0, ii = data0.length; i < ii; i++) {\n    const elem = data0[i];\n    let mask = 128;\n    while (mask > 0) {\n      data[pos++] = elem & mask ? 0 : 255;\n      mask >>= 1;\n    }\n  }\n\n  // finding interesting points: every point is located between mask pixels,\n  // so there will be points of the (width + 1)x(height + 1) grid. Every point\n  // will have flags assigned based on neighboring mask pixels:\n  //   4 | 8\n  //   --P--\n  //   2 | 1\n  // We are interested only in points with the flags:\n  //   - outside corners: 1, 2, 4, 8;\n  //   - inside corners: 7, 11, 13, 14;\n  //   - and, intersections: 5, 10.\n  let count = 0;\n  pos = 0;\n  if (data[pos] !== 0) {\n    points[0] = 1;\n    ++count;\n  }\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j] = data[pos] ? 2 : 1;\n      ++count;\n    }\n    pos++;\n  }\n  if (data[pos] !== 0) {\n    points[j] = 2;\n    ++count;\n  }\n  for (i = 1; i < height; i++) {\n    pos = i * lineSize;\n    j0 = i * width1;\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0] = data[pos] ? 1 : 8;\n      ++count;\n    }\n    // 'sum' is the position of the current pixel configuration in the 'TYPES'\n    // array (in order 8-1-2-4, so we can use '>>2' to shift the column).\n    let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n    for (j = 1; j < width; j++) {\n      sum =\n        (sum >> 2) +\n        (data[pos + 1] ? 4 : 0) +\n        (data[pos - lineSize + 1] ? 8 : 0);\n      if (POINT_TYPES[sum]) {\n        points[j0 + j] = POINT_TYPES[sum];\n        ++count;\n      }\n      pos++;\n    }\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0 + j] = data[pos] ? 2 : 4;\n      ++count;\n    }\n\n    if (count > POINT_TO_PROCESS_LIMIT) {\n      return null;\n    }\n  }\n\n  pos = lineSize * (height - 1);\n  j0 = i * width1;\n  if (data[pos] !== 0) {\n    points[j0] = 8;\n    ++count;\n  }\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j0 + j] = data[pos] ? 4 : 8;\n      ++count;\n    }\n    pos++;\n  }\n  if (data[pos] !== 0) {\n    points[j0 + j] = 4;\n    ++count;\n  }\n  if (count > POINT_TO_PROCESS_LIMIT) {\n    return null;\n  }\n\n  // building outlines\n  const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n  const outlines = [];\n  for (i = 0; count && i <= height; i++) {\n    let p = i * width1;\n    const end = p + width;\n    while (p < end && !points[p]) {\n      p++;\n    }\n    if (p === end) {\n      continue;\n    }\n    const coords = [p % width1, i];\n\n    const p0 = p;\n    let type = points[p];\n    do {\n      const step = steps[type];\n      do {\n        p += step;\n      } while (!points[p]);\n\n      const pp = points[p];\n      if (pp !== 5 && pp !== 10) {\n        // set new direction\n        type = pp;\n        // delete mark\n        points[p] = 0;\n      } else {\n        // type is 5 or 10, ie, a crossing\n        // set new direction\n        type = pp & ((0x33 * type) >> 4);\n        // set new type for \"future hit\"\n        points[p] &= (type >> 2) | (type << 2);\n      }\n\n      coords.push(p % width1, (p / width1) | 0);\n\n      if (!points[p]) {\n        --count;\n      }\n    } while (p0 !== p);\n    outlines.push(coords);\n    --i;\n  }\n\n  const drawOutline = function (c) {\n    c.save();\n    // the path shall be painted in [0..1]x[0..1] space\n    c.scale(1 / width, -1 / height);\n    c.translate(0, -height);\n    c.beginPath();\n    for (let k = 0, kk = outlines.length; k < kk; k++) {\n      const o = outlines[k];\n      c.moveTo(o[0], o[1]);\n      for (let l = 2, ll = o.length; l < ll; l += 2) {\n        c.lineTo(o[l], o[l + 1]);\n      }\n    }\n    c.fill();\n    c.beginPath();\n    c.restore();\n  };\n\n  return drawOutline;\n}\n\nclass CanvasExtraState {\n  constructor() {\n    // Are soft masks and alpha values shapes or opacities?\n    this.alphaIsShape = false;\n    this.fontSize = 0;\n    this.fontSizeScale = 1;\n    this.textMatrix = IDENTITY_MATRIX;\n    this.textMatrixScale = 1;\n    this.fontMatrix = FONT_IDENTITY_MATRIX;\n    this.leading = 0;\n    // Current point (in user coordinates)\n    this.x = 0;\n    this.y = 0;\n    // Start of text line (in text coordinates)\n    this.lineX = 0;\n    this.lineY = 0;\n    // Character and word spacing\n    this.charSpacing = 0;\n    this.wordSpacing = 0;\n    this.textHScale = 1;\n    this.textRenderingMode = TextRenderingMode.FILL;\n    this.textRise = 0;\n    // Default fore and background colors\n    this.fillColor = \"#000000\";\n    this.strokeColor = \"#000000\";\n    this.patternFill = false;\n    // Note: fill alpha applies to all non-stroking operations\n    this.fillAlpha = 1;\n    this.strokeAlpha = 1;\n    this.lineWidth = 1;\n    this.activeSMask = null;\n    this.resumeSMaskCtx = null; // nonclonable field (see the save method below)\n    this.transferMaps = null;\n  }\n\n  clone() {\n    return Object.create(this);\n  }\n\n  setCurrentPoint(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\n/**\n * @type {any}\n */\nconst CanvasGraphics = (function CanvasGraphicsClosure() {\n  // Defines the time the executeOperatorList is going to be executing\n  // before it stops and shedules a continue of execution.\n  const EXECUTION_TIME = 15;\n  // Defines the number of steps before checking the execution time\n  const EXECUTION_STEPS = 10;\n\n  function putBinaryImageData(ctx, imgData, transferMaps = null) {\n    if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n      ctx.putImageData(imgData, 0, 0);\n      return;\n    }\n\n    // Put the image data to the canvas in chunks, rather than putting the\n    // whole image at once.  This saves JS memory, because the ImageData object\n    // is smaller. It also possibly saves C++ memory within the implementation\n    // of putImageData(). (E.g. in Firefox we make two short-lived copies of\n    // the data passed to putImageData()). |n| shouldn't be too small, however,\n    // because too many putImageData() calls will slow things down.\n    //\n    // Note: as written, if the last chunk is partial, the putImageData() call\n    // will (conceptually) put pixels past the bounds of the canvas.  But\n    // that's ok; any such pixels are ignored.\n\n    const height = imgData.height,\n      width = imgData.width;\n    const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n    const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n    const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n\n    const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n    let srcPos = 0,\n      destPos;\n    const src = imgData.data;\n    const dest = chunkImgData.data;\n    let i, j, thisChunkHeight, elemsInThisChunk;\n\n    let transferMapRed, transferMapGreen, transferMapBlue, transferMapGray;\n    if (transferMaps) {\n      switch (transferMaps.length) {\n        case 1:\n          transferMapRed = transferMaps[0];\n          transferMapGreen = transferMaps[0];\n          transferMapBlue = transferMaps[0];\n          transferMapGray = transferMaps[0];\n          break;\n        case 4:\n          transferMapRed = transferMaps[0];\n          transferMapGreen = transferMaps[1];\n          transferMapBlue = transferMaps[2];\n          transferMapGray = transferMaps[3];\n          break;\n      }\n    }\n\n    // There are multiple forms in which the pixel data can be passed, and\n    // imgData.kind tells us which one this is.\n    if (imgData.kind === ImageKind.GRAYSCALE_1BPP) {\n      // Grayscale, 1 bit per pixel (i.e. black-and-white).\n      const srcLength = src.byteLength;\n      const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n      const dest32DataLength = dest32.length;\n      const fullSrcDiff = (width + 7) >> 3;\n      let white = 0xffffffff;\n      let black = IsLittleEndianCached.value ? 0xff000000 : 0x000000ff;\n\n      if (transferMapGray) {\n        if (transferMapGray[0] === 0xff && transferMapGray[0xff] === 0) {\n          [white, black] = [black, white];\n        }\n      }\n\n      for (i = 0; i < totalChunks; i++) {\n        thisChunkHeight =\n          i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n        destPos = 0;\n        for (j = 0; j < thisChunkHeight; j++) {\n          const srcDiff = srcLength - srcPos;\n          let k = 0;\n          const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n          const kEndUnrolled = kEnd & ~7;\n          let mask = 0;\n          let srcByte = 0;\n          for (; k < kEndUnrolled; k += 8) {\n            srcByte = src[srcPos++];\n            dest32[destPos++] = srcByte & 128 ? white : black;\n            dest32[destPos++] = srcByte & 64 ? white : black;\n            dest32[destPos++] = srcByte & 32 ? white : black;\n            dest32[destPos++] = srcByte & 16 ? white : black;\n            dest32[destPos++] = srcByte & 8 ? white : black;\n            dest32[destPos++] = srcByte & 4 ? white : black;\n            dest32[destPos++] = srcByte & 2 ? white : black;\n            dest32[destPos++] = srcByte & 1 ? white : black;\n          }\n          for (; k < kEnd; k++) {\n            if (mask === 0) {\n              srcByte = src[srcPos++];\n              mask = 128;\n            }\n\n            dest32[destPos++] = srcByte & mask ? white : black;\n            mask >>= 1;\n          }\n        }\n        // We ran out of input. Make all remaining pixels transparent.\n        while (destPos < dest32DataLength) {\n          dest32[destPos++] = 0;\n        }\n\n        ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n      }\n    } else if (imgData.kind === ImageKind.RGBA_32BPP) {\n      // RGBA, 32-bits per pixel.\n      const hasTransferMaps = !!(\n        transferMapRed ||\n        transferMapGreen ||\n        transferMapBlue\n      );\n\n      j = 0;\n      elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n      for (i = 0; i < fullChunks; i++) {\n        dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n        srcPos += elemsInThisChunk;\n\n        if (hasTransferMaps) {\n          for (let k = 0; k < elemsInThisChunk; k += 4) {\n            if (transferMapRed) {\n              dest[k + 0] = transferMapRed[dest[k + 0]];\n            }\n            if (transferMapGreen) {\n              dest[k + 1] = transferMapGreen[dest[k + 1]];\n            }\n            if (transferMapBlue) {\n              dest[k + 2] = transferMapBlue[dest[k + 2]];\n            }\n          }\n        }\n\n        ctx.putImageData(chunkImgData, 0, j);\n        j += FULL_CHUNK_HEIGHT;\n      }\n      if (i < totalChunks) {\n        elemsInThisChunk = width * partialChunkHeight * 4;\n        dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n\n        if (hasTransferMaps) {\n          for (let k = 0; k < elemsInThisChunk; k += 4) {\n            if (transferMapRed) {\n              dest[k + 0] = transferMapRed[dest[k + 0]];\n            }\n            if (transferMapGreen) {\n              dest[k + 1] = transferMapGreen[dest[k + 1]];\n            }\n            if (transferMapBlue) {\n              dest[k + 2] = transferMapBlue[dest[k + 2]];\n            }\n          }\n        }\n\n        ctx.putImageData(chunkImgData, 0, j);\n      }\n    } else if (imgData.kind === ImageKind.RGB_24BPP) {\n      // RGB, 24-bits per pixel.\n      const hasTransferMaps = !!(\n        transferMapRed ||\n        transferMapGreen ||\n        transferMapBlue\n      );\n\n      thisChunkHeight = FULL_CHUNK_HEIGHT;\n      elemsInThisChunk = width * thisChunkHeight;\n      for (i = 0; i < totalChunks; i++) {\n        if (i >= fullChunks) {\n          thisChunkHeight = partialChunkHeight;\n          elemsInThisChunk = width * thisChunkHeight;\n        }\n\n        destPos = 0;\n        for (j = elemsInThisChunk; j--; ) {\n          dest[destPos++] = src[srcPos++];\n          dest[destPos++] = src[srcPos++];\n          dest[destPos++] = src[srcPos++];\n          dest[destPos++] = 255;\n        }\n\n        if (hasTransferMaps) {\n          for (let k = 0; k < destPos; k += 4) {\n            if (transferMapRed) {\n              dest[k + 0] = transferMapRed[dest[k + 0]];\n            }\n            if (transferMapGreen) {\n              dest[k + 1] = transferMapGreen[dest[k + 1]];\n            }\n            if (transferMapBlue) {\n              dest[k + 2] = transferMapBlue[dest[k + 2]];\n            }\n          }\n        }\n\n        ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n      }\n    } else {\n      throw new Error(`bad image kind: ${imgData.kind}`);\n    }\n  }\n\n  function putBinaryImageMask(ctx, imgData) {\n    const height = imgData.height,\n      width = imgData.width;\n    const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n    const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n    const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n\n    const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n    let srcPos = 0;\n    const src = imgData.data;\n    const dest = chunkImgData.data;\n\n    for (let i = 0; i < totalChunks; i++) {\n      const thisChunkHeight =\n        i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n\n      // Expand the mask so it can be used by the canvas.  Any required\n      // inversion has already been handled.\n      let destPos = 3; // alpha component offset\n      for (let j = 0; j < thisChunkHeight; j++) {\n        let elem,\n          mask = 0;\n        for (let k = 0; k < width; k++) {\n          if (!mask) {\n            elem = src[srcPos++];\n            mask = 128;\n          }\n          dest[destPos] = elem & mask ? 0 : 255;\n          destPos += 4;\n          mask >>= 1;\n        }\n      }\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n    }\n  }\n\n  function copyCtxState(sourceCtx, destCtx) {\n    const properties = [\n      \"strokeStyle\",\n      \"fillStyle\",\n      \"fillRule\",\n      \"globalAlpha\",\n      \"lineWidth\",\n      \"lineCap\",\n      \"lineJoin\",\n      \"miterLimit\",\n      \"globalCompositeOperation\",\n      \"font\",\n    ];\n    for (let i = 0, ii = properties.length; i < ii; i++) {\n      const property = properties[i];\n      if (sourceCtx[property] !== undefined) {\n        destCtx[property] = sourceCtx[property];\n      }\n    }\n    if (sourceCtx.setLineDash !== undefined) {\n      destCtx.setLineDash(sourceCtx.getLineDash());\n      destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n    }\n  }\n\n  function resetCtxToDefault(ctx) {\n    ctx.strokeStyle = \"#000000\";\n    ctx.fillStyle = \"#000000\";\n    ctx.fillRule = \"nonzero\";\n    ctx.globalAlpha = 1;\n    ctx.lineWidth = 1;\n    ctx.lineCap = \"butt\";\n    ctx.lineJoin = \"miter\";\n    ctx.miterLimit = 10;\n    ctx.globalCompositeOperation = \"source-over\";\n    ctx.font = \"10px sans-serif\";\n    if (ctx.setLineDash !== undefined) {\n      ctx.setLineDash([]);\n      ctx.lineDashOffset = 0;\n    }\n  }\n\n  function composeSMaskBackdrop(bytes, r0, g0, b0) {\n    const length = bytes.length;\n    for (let i = 3; i < length; i += 4) {\n      const alpha = bytes[i];\n      if (alpha === 0) {\n        bytes[i - 3] = r0;\n        bytes[i - 2] = g0;\n        bytes[i - 1] = b0;\n      } else if (alpha < 255) {\n        const alpha_ = 255 - alpha;\n        bytes[i - 3] = (bytes[i - 3] * alpha + r0 * alpha_) >> 8;\n        bytes[i - 2] = (bytes[i - 2] * alpha + g0 * alpha_) >> 8;\n        bytes[i - 1] = (bytes[i - 1] * alpha + b0 * alpha_) >> 8;\n      }\n    }\n  }\n\n  function composeSMaskAlpha(maskData, layerData, transferMap) {\n    const length = maskData.length;\n    const scale = 1 / 255;\n    for (let i = 3; i < length; i += 4) {\n      const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\n      layerData[i] = (layerData[i] * alpha * scale) | 0;\n    }\n  }\n\n  function composeSMaskLuminosity(maskData, layerData, transferMap) {\n    const length = maskData.length;\n    for (let i = 3; i < length; i += 4) {\n      const y =\n        maskData[i - 3] * 77 + // * 0.3 / 255 * 0x10000\n        maskData[i - 2] * 152 + // * 0.59 ....\n        maskData[i - 1] * 28; // * 0.11 ....\n      layerData[i] = transferMap\n        ? (layerData[i] * transferMap[y >> 8]) >> 8\n        : (layerData[i] * y) >> 16;\n    }\n  }\n\n  function genericComposeSMask(\n    maskCtx,\n    layerCtx,\n    width,\n    height,\n    subtype,\n    backdrop,\n    transferMap\n  ) {\n    const hasBackdrop = !!backdrop;\n    const r0 = hasBackdrop ? backdrop[0] : 0;\n    const g0 = hasBackdrop ? backdrop[1] : 0;\n    const b0 = hasBackdrop ? backdrop[2] : 0;\n\n    let composeFn;\n    if (subtype === \"Luminosity\") {\n      composeFn = composeSMaskLuminosity;\n    } else {\n      composeFn = composeSMaskAlpha;\n    }\n\n    // processing image in chunks to save memory\n    const PIXELS_TO_PROCESS = 1048576;\n    const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\n    for (let row = 0; row < height; row += chunkSize) {\n      const chunkHeight = Math.min(chunkSize, height - row);\n      const maskData = maskCtx.getImageData(0, row, width, chunkHeight);\n      const layerData = layerCtx.getImageData(0, row, width, chunkHeight);\n\n      if (hasBackdrop) {\n        composeSMaskBackdrop(maskData.data, r0, g0, b0);\n      }\n      composeFn(maskData.data, layerData.data, transferMap);\n\n      maskCtx.putImageData(layerData, 0, row);\n    }\n  }\n\n  function composeSMask(ctx, smask, layerCtx) {\n    const mask = smask.canvas;\n    const maskCtx = smask.context;\n\n    ctx.setTransform(\n      smask.scaleX,\n      0,\n      0,\n      smask.scaleY,\n      smask.offsetX,\n      smask.offsetY\n    );\n\n    genericComposeSMask(\n      maskCtx,\n      layerCtx,\n      mask.width,\n      mask.height,\n      smask.subtype,\n      smask.backdrop,\n      smask.transferMap\n    );\n    ctx.drawImage(mask, 0, 0);\n  }\n\n  const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n  const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n  const NORMAL_CLIP = {};\n  const EO_CLIP = {};\n\n  // eslint-disable-next-line no-shadow\n  class CanvasGraphics {\n    constructor(\n      canvasCtx,\n      commonObjs,\n      objs,\n      canvasFactory,\n      imageLayer,\n      optionalContentConfig\n    ) {\n      this.ctx = canvasCtx;\n      this.current = new CanvasExtraState();\n      this.stateStack = [];\n      this.pendingClip = null;\n      this.pendingEOFill = false;\n      this.res = null;\n      this.xobjs = null;\n      this.commonObjs = commonObjs;\n      this.objs = objs;\n      this.canvasFactory = canvasFactory;\n      this.imageLayer = imageLayer;\n      this.groupStack = [];\n      this.processingType3 = null;\n      // Patterns are painted relative to the initial page/form transform, see\n      // PDF spec 8.7.2 NOTE 1.\n      this.baseTransform = null;\n      this.baseTransformStack = [];\n      this.groupLevel = 0;\n      this.smaskStack = [];\n      this.smaskCounter = 0;\n      this.tempSMask = null;\n      this.contentVisible = true;\n      this.markedContentStack = [];\n      this.optionalContentConfig = optionalContentConfig;\n      this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n      this.cachedPatterns = new Map();\n      if (canvasCtx) {\n        // NOTE: if mozCurrentTransform is polyfilled, then the current state of\n        // the transformation must already be set in canvasCtx._transformMatrix.\n        addContextCurrentTransform(canvasCtx);\n      }\n      this._cachedGetSinglePixelWidth = null;\n    }\n\n    beginDrawing({\n      transform,\n      viewport,\n      transparency = false,\n      background = null,\n    }) {\n      // For pdfs that use blend modes we have to clear the canvas else certain\n      // blend modes can look wrong since we'd be blending with a white\n      // backdrop. The problem with a transparent backdrop though is we then\n      // don't get sub pixel anti aliasing on text, creating temporary\n      // transparent canvas when we have blend modes.\n      const width = this.ctx.canvas.width;\n      const height = this.ctx.canvas.height;\n\n      this.ctx.save();\n      this.ctx.fillStyle = background || \"rgb(255, 255, 255)\";\n      this.ctx.fillRect(0, 0, width, height);\n      this.ctx.restore();\n\n      if (transparency) {\n        const transparentCanvas = this.cachedCanvases.getCanvas(\n          \"transparent\",\n          width,\n          height,\n          true\n        );\n        this.compositeCtx = this.ctx;\n        this.transparentCanvas = transparentCanvas.canvas;\n        this.ctx = transparentCanvas.context;\n        this.ctx.save();\n        // The transform can be applied before rendering, transferring it to\n        // the new canvas.\n        this.ctx.transform.apply(\n          this.ctx,\n          this.compositeCtx.mozCurrentTransform\n        );\n      }\n\n      this.ctx.save();\n      resetCtxToDefault(this.ctx);\n      if (transform) {\n        this.ctx.transform.apply(this.ctx, transform);\n      }\n      this.ctx.transform.apply(this.ctx, viewport.transform);\n\n      this.baseTransform = this.ctx.mozCurrentTransform.slice();\n      this._combinedScaleFactor = Math.hypot(\n        this.baseTransform[0],\n        this.baseTransform[2]\n      );\n\n      if (this.imageLayer) {\n        this.imageLayer.beginLayout();\n      }\n    }\n\n    executeOperatorList(\n      operatorList,\n      executionStartIdx,\n      continueCallback,\n      stepper\n    ) {\n      const argsArray = operatorList.argsArray;\n      const fnArray = operatorList.fnArray;\n      let i = executionStartIdx || 0;\n      const argsArrayLen = argsArray.length;\n\n      // Sometimes the OperatorList to execute is empty.\n      if (argsArrayLen === i) {\n        return i;\n      }\n\n      const chunkOperations =\n        argsArrayLen - i > EXECUTION_STEPS &&\n        typeof continueCallback === \"function\";\n      const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n      let steps = 0;\n\n      const commonObjs = this.commonObjs;\n      const objs = this.objs;\n      let fnId;\n\n      while (true) {\n        if (stepper !== undefined && i === stepper.nextBreakPoint) {\n          stepper.breakIt(i, continueCallback);\n          return i;\n        }\n\n        fnId = fnArray[i];\n\n        if (fnId !== OPS.dependency) {\n          this[fnId].apply(this, argsArray[i]);\n        } else {\n          for (const depObjId of argsArray[i]) {\n            const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n\n            // If the promise isn't resolved yet, add the continueCallback\n            // to the promise and bail out.\n            if (!objsPool.has(depObjId)) {\n              objsPool.get(depObjId, continueCallback);\n              return i;\n            }\n          }\n        }\n\n        i++;\n\n        // If the entire operatorList was executed, stop as were done.\n        if (i === argsArrayLen) {\n          return i;\n        }\n\n        // If the execution took longer then a certain amount of time and\n        // `continueCallback` is specified, interrupt the execution.\n        if (chunkOperations && ++steps > EXECUTION_STEPS) {\n          if (Date.now() > endTime) {\n            continueCallback();\n            return i;\n          }\n          steps = 0;\n        }\n\n        // If the operatorList isn't executed completely yet OR the execution\n        // time was short enough, do another execution round.\n      }\n    }\n\n    endDrawing() {\n      // Finishing all opened operations such as SMask group painting.\n      while (this.stateStack.length || this.current.activeSMask !== null) {\n        this.restore();\n      }\n\n      this.ctx.restore();\n\n      if (this.transparentCanvas) {\n        this.ctx = this.compositeCtx;\n        this.ctx.save();\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0); // Avoid apply transform twice\n        this.ctx.drawImage(this.transparentCanvas, 0, 0);\n        this.ctx.restore();\n        this.transparentCanvas = null;\n      }\n\n      this.cachedCanvases.clear();\n      this.cachedPatterns.clear();\n\n      if (this.imageLayer) {\n        this.imageLayer.endLayout();\n      }\n    }\n\n    _scaleImage(img, inverseTransform) {\n      // Vertical or horizontal scaling shall not be more than 2 to not lose the\n      // pixels during drawImage operation, painting on the temporary canvas(es)\n      // that are twice smaller in size.\n      const width = img.width;\n      const height = img.height;\n      let widthScale = Math.max(\n        Math.hypot(inverseTransform[0], inverseTransform[1]),\n        1\n      );\n      let heightScale = Math.max(\n        Math.hypot(inverseTransform[2], inverseTransform[3]),\n        1\n      );\n\n      let paintWidth = width,\n        paintHeight = height;\n      let tmpCanvasId = \"prescale1\";\n      let tmpCanvas, tmpCtx;\n      while (\n        (widthScale > 2 && paintWidth > 1) ||\n        (heightScale > 2 && paintHeight > 1)\n      ) {\n        let newWidth = paintWidth,\n          newHeight = paintHeight;\n        if (widthScale > 2 && paintWidth > 1) {\n          newWidth = Math.ceil(paintWidth / 2);\n          widthScale /= paintWidth / newWidth;\n        }\n        if (heightScale > 2 && paintHeight > 1) {\n          newHeight = Math.ceil(paintHeight / 2);\n          heightScale /= paintHeight / newHeight;\n        }\n        tmpCanvas = this.cachedCanvases.getCanvas(\n          tmpCanvasId,\n          newWidth,\n          newHeight\n        );\n        tmpCtx = tmpCanvas.context;\n        tmpCtx.clearRect(0, 0, newWidth, newHeight);\n        tmpCtx.drawImage(\n          img,\n          0,\n          0,\n          paintWidth,\n          paintHeight,\n          0,\n          0,\n          newWidth,\n          newHeight\n        );\n        img = tmpCanvas.canvas;\n        paintWidth = newWidth;\n        paintHeight = newHeight;\n        tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n      }\n      return {\n        img,\n        paintWidth,\n        paintHeight,\n      };\n    }\n\n    _createMaskCanvas(img) {\n      const ctx = this.ctx;\n      const width = img.width,\n        height = img.height;\n      const fillColor = this.current.fillColor;\n      const isPatternFill = this.current.patternFill;\n      const maskCanvas = this.cachedCanvases.getCanvas(\n        \"maskCanvas\",\n        width,\n        height\n      );\n      const maskCtx = maskCanvas.context;\n      putBinaryImageMask(maskCtx, img);\n\n      // Create the mask canvas at the size it will be drawn at and also set\n      // its transform to match the current transform so if there are any\n      // patterns applied they will be applied relative to the correct\n      // transform.\n      const objToCanvas = ctx.mozCurrentTransform;\n      let maskToCanvas = Util.transform(objToCanvas, [\n        1 / width,\n        0,\n        0,\n        -1 / height,\n        0,\n        0,\n      ]);\n      maskToCanvas = Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);\n      const cord1 = Util.applyTransform([0, 0], maskToCanvas);\n      const cord2 = Util.applyTransform([width, height], maskToCanvas);\n      const rect = Util.normalizeRect([cord1[0], cord1[1], cord2[0], cord2[1]]);\n      const drawnWidth = Math.ceil(rect[2] - rect[0]);\n      const drawnHeight = Math.ceil(rect[3] - rect[1]);\n      const fillCanvas = this.cachedCanvases.getCanvas(\n        \"fillCanvas\",\n        drawnWidth,\n        drawnHeight,\n        true\n      );\n      const fillCtx = fillCanvas.context;\n      // The offset will be the top-left cordinate mask.\n      const offsetX = Math.min(cord1[0], cord2[0]);\n      const offsetY = Math.min(cord1[1], cord2[1]);\n      fillCtx.translate(-offsetX, -offsetY);\n      fillCtx.transform.apply(fillCtx, maskToCanvas);\n      // Pre-scale if needed to improve image smoothing.\n      const scaled = this._scaleImage(\n        maskCanvas.canvas,\n        fillCtx.mozCurrentTransformInverse\n      );\n      fillCtx.drawImage(\n        scaled.img,\n        0,\n        0,\n        scaled.img.width,\n        scaled.img.height,\n        0,\n        0,\n        width,\n        height\n      );\n      fillCtx.globalCompositeOperation = \"source-in\";\n\n      const inverse = Util.transform(fillCtx.mozCurrentTransformInverse, [\n        1,\n        0,\n        0,\n        1,\n        -offsetX,\n        -offsetY,\n      ]);\n      fillCtx.fillStyle = isPatternFill\n        ? fillColor.getPattern(ctx, this, inverse, false)\n        : fillColor;\n\n      fillCtx.fillRect(0, 0, width, height);\n\n      // Round the offsets to avoid drawing fractional pixels.\n      return {\n        canvas: fillCanvas.canvas,\n        offsetX: Math.round(offsetX),\n        offsetY: Math.round(offsetY),\n      };\n    }\n\n    // Graphics state\n    setLineWidth(width) {\n      this.current.lineWidth = width;\n      this.ctx.lineWidth = width;\n    }\n\n    setLineCap(style) {\n      this.ctx.lineCap = LINE_CAP_STYLES[style];\n    }\n\n    setLineJoin(style) {\n      this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n    }\n\n    setMiterLimit(limit) {\n      this.ctx.miterLimit = limit;\n    }\n\n    setDash(dashArray, dashPhase) {\n      const ctx = this.ctx;\n      if (ctx.setLineDash !== undefined) {\n        ctx.setLineDash(dashArray);\n        ctx.lineDashOffset = dashPhase;\n      }\n    }\n\n    setRenderingIntent(intent) {\n      // This operation is ignored since we haven't found a use case for it yet.\n    }\n\n    setFlatness(flatness) {\n      // This operation is ignored since we haven't found a use case for it yet.\n    }\n\n    setGState(states) {\n      for (let i = 0, ii = states.length; i < ii; i++) {\n        const state = states[i];\n        const key = state[0];\n        const value = state[1];\n\n        switch (key) {\n          case \"LW\":\n            this.setLineWidth(value);\n            break;\n          case \"LC\":\n            this.setLineCap(value);\n            break;\n          case \"LJ\":\n            this.setLineJoin(value);\n            break;\n          case \"ML\":\n            this.setMiterLimit(value);\n            break;\n          case \"D\":\n            this.setDash(value[0], value[1]);\n            break;\n          case \"RI\":\n            this.setRenderingIntent(value);\n            break;\n          case \"FL\":\n            this.setFlatness(value);\n            break;\n          case \"Font\":\n            this.setFont(value[0], value[1]);\n            break;\n          case \"CA\":\n            this.current.strokeAlpha = state[1];\n            break;\n          case \"ca\":\n            this.current.fillAlpha = state[1];\n            this.ctx.globalAlpha = state[1];\n            break;\n          case \"BM\":\n            this.ctx.globalCompositeOperation = value;\n            break;\n          case \"SMask\":\n            if (this.current.activeSMask) {\n              // If SMask is currrenly used, it needs to be suspended or\n              // finished. Suspend only makes sense when at least one save()\n              // was performed and state needs to be reverted on restore().\n              if (\n                this.stateStack.length > 0 &&\n                this.stateStack[this.stateStack.length - 1].activeSMask ===\n                  this.current.activeSMask\n              ) {\n                this.suspendSMaskGroup();\n              } else {\n                this.endSMaskGroup();\n              }\n            }\n            this.current.activeSMask = value ? this.tempSMask : null;\n            if (this.current.activeSMask) {\n              this.beginSMaskGroup();\n            }\n            this.tempSMask = null;\n            break;\n          case \"TR\":\n            this.current.transferMaps = value;\n        }\n      }\n    }\n\n    beginSMaskGroup() {\n      const activeSMask = this.current.activeSMask;\n      const drawnWidth = activeSMask.canvas.width;\n      const drawnHeight = activeSMask.canvas.height;\n      const cacheId = \"smaskGroupAt\" + this.groupLevel;\n      const scratchCanvas = this.cachedCanvases.getCanvas(\n        cacheId,\n        drawnWidth,\n        drawnHeight,\n        true\n      );\n\n      const currentCtx = this.ctx;\n      const currentTransform = currentCtx.mozCurrentTransform;\n      this.ctx.save();\n\n      const groupCtx = scratchCanvas.context;\n      groupCtx.scale(1 / activeSMask.scaleX, 1 / activeSMask.scaleY);\n      groupCtx.translate(-activeSMask.offsetX, -activeSMask.offsetY);\n      groupCtx.transform.apply(groupCtx, currentTransform);\n\n      activeSMask.startTransformInverse = groupCtx.mozCurrentTransformInverse;\n\n      copyCtxState(currentCtx, groupCtx);\n      this.ctx = groupCtx;\n      this.setGState([\n        [\"BM\", \"source-over\"],\n        [\"ca\", 1],\n        [\"CA\", 1],\n      ]);\n      this.groupStack.push(currentCtx);\n      this.groupLevel++;\n    }\n\n    suspendSMaskGroup() {\n      // Similar to endSMaskGroup, the intermediate canvas has to be composed\n      // and future ctx state restored.\n      const groupCtx = this.ctx;\n      this.groupLevel--;\n      this.ctx = this.groupStack.pop();\n\n      composeSMask(this.ctx, this.current.activeSMask, groupCtx);\n      this.ctx.restore();\n      this.ctx.save(); // save is needed since SMask will be resumed.\n      copyCtxState(groupCtx, this.ctx);\n\n      // Saving state for resuming.\n      this.current.resumeSMaskCtx = groupCtx;\n      // Transform was changed in the SMask canvas, reflecting this change on\n      // this.ctx.\n      const deltaTransform = Util.transform(\n        this.current.activeSMask.startTransformInverse,\n        groupCtx.mozCurrentTransform\n      );\n      this.ctx.transform.apply(this.ctx, deltaTransform);\n\n      // SMask was composed, the results at the groupCtx can be cleared.\n      groupCtx.save();\n      groupCtx.setTransform(1, 0, 0, 1, 0, 0);\n      groupCtx.clearRect(0, 0, groupCtx.canvas.width, groupCtx.canvas.height);\n      groupCtx.restore();\n    }\n\n    resumeSMaskGroup() {\n      // Resuming state saved by suspendSMaskGroup. We don't need to restore\n      // any groupCtx state since restore() command (the only caller) will do\n      // that for us. See also beginSMaskGroup.\n      const groupCtx = this.current.resumeSMaskCtx;\n      const currentCtx = this.ctx;\n      this.ctx = groupCtx;\n      this.groupStack.push(currentCtx);\n      this.groupLevel++;\n    }\n\n    endSMaskGroup() {\n      const groupCtx = this.ctx;\n      this.groupLevel--;\n      this.ctx = this.groupStack.pop();\n\n      composeSMask(this.ctx, this.current.activeSMask, groupCtx);\n      this.ctx.restore();\n      copyCtxState(groupCtx, this.ctx);\n      // Transform was changed in the SMask canvas, reflecting this change on\n      // this.ctx.\n      const deltaTransform = Util.transform(\n        this.current.activeSMask.startTransformInverse,\n        groupCtx.mozCurrentTransform\n      );\n      this.ctx.transform.apply(this.ctx, deltaTransform);\n    }\n\n    save() {\n      this.ctx.save();\n      const old = this.current;\n      this.stateStack.push(old);\n      this.current = old.clone();\n      this.current.resumeSMaskCtx = null;\n    }\n\n    restore() {\n      // SMask was suspended, we just need to resume it.\n      if (this.current.resumeSMaskCtx) {\n        this.resumeSMaskGroup();\n      }\n      // SMask has to be finished once there is no states that are using the\n      // same SMask.\n      if (\n        this.current.activeSMask !== null &&\n        (this.stateStack.length === 0 ||\n          this.stateStack[this.stateStack.length - 1].activeSMask !==\n            this.current.activeSMask)\n      ) {\n        this.endSMaskGroup();\n      }\n\n      if (this.stateStack.length !== 0) {\n        this.current = this.stateStack.pop();\n        this.ctx.restore();\n\n        // Ensure that the clipping path is reset (fixes issue6413.pdf).\n        this.pendingClip = null;\n\n        this._cachedGetSinglePixelWidth = null;\n      } else {\n        // We've finished all the SMask groups, reflect that in our state.\n        this.current.activeSMask = null;\n      }\n    }\n\n    transform(a, b, c, d, e, f) {\n      this.ctx.transform(a, b, c, d, e, f);\n\n      this._cachedGetSinglePixelWidth = null;\n    }\n\n    // Path\n    constructPath(ops, args) {\n      const ctx = this.ctx;\n      const current = this.current;\n      let x = current.x,\n        y = current.y;\n      for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {\n        switch (ops[i] | 0) {\n          case OPS.rectangle:\n            x = args[j++];\n            y = args[j++];\n            const width = args[j++];\n            const height = args[j++];\n\n            const xw = x + width;\n            const yh = y + height;\n            ctx.moveTo(x, y);\n            if (width === 0 || height === 0) {\n              ctx.lineTo(xw, yh);\n            } else {\n              ctx.lineTo(xw, y);\n              ctx.lineTo(xw, yh);\n              ctx.lineTo(x, yh);\n            }\n\n            ctx.closePath();\n            break;\n          case OPS.moveTo:\n            x = args[j++];\n            y = args[j++];\n            ctx.moveTo(x, y);\n            break;\n          case OPS.lineTo:\n            x = args[j++];\n            y = args[j++];\n            ctx.lineTo(x, y);\n            break;\n          case OPS.curveTo:\n            x = args[j + 4];\n            y = args[j + 5];\n            ctx.bezierCurveTo(\n              args[j],\n              args[j + 1],\n              args[j + 2],\n              args[j + 3],\n              x,\n              y\n            );\n            j += 6;\n            break;\n          case OPS.curveTo2:\n            ctx.bezierCurveTo(\n              x,\n              y,\n              args[j],\n              args[j + 1],\n              args[j + 2],\n              args[j + 3]\n            );\n            x = args[j + 2];\n            y = args[j + 3];\n            j += 4;\n            break;\n          case OPS.curveTo3:\n            x = args[j + 2];\n            y = args[j + 3];\n            ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n            j += 4;\n            break;\n          case OPS.closePath:\n            ctx.closePath();\n            break;\n        }\n      }\n      current.setCurrentPoint(x, y);\n    }\n\n    closePath() {\n      this.ctx.closePath();\n    }\n\n    stroke(consumePath) {\n      consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n      const ctx = this.ctx;\n      const strokeColor = this.current.strokeColor;\n      // For stroke we want to temporarily change the global alpha to the\n      // stroking alpha.\n      ctx.globalAlpha = this.current.strokeAlpha;\n      if (this.contentVisible) {\n        if (typeof strokeColor === \"object\" && strokeColor?.getPattern) {\n          const lineWidth = this.getSinglePixelWidth();\n          ctx.save();\n          ctx.strokeStyle = strokeColor.getPattern(\n            ctx,\n            this,\n            ctx.mozCurrentTransformInverse\n          );\n          // Prevent drawing too thin lines by enforcing a minimum line width.\n          ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n          ctx.stroke();\n          ctx.restore();\n        } else {\n          const lineWidth = this.getSinglePixelWidth();\n          if (lineWidth < 0 && -lineWidth >= this.current.lineWidth) {\n            // The current transform will transform a square pixel into a\n            // parallelogram where both heights are lower than 1 and not equal.\n            ctx.save();\n            ctx.resetTransform();\n            ctx.lineWidth = Math.round(this._combinedScaleFactor);\n            ctx.stroke();\n            ctx.restore();\n          } else {\n            // Prevent drawing too thin lines by enforcing a minimum line width.\n            ctx.lineWidth = Math.max(lineWidth, this.current.lineWidth);\n            ctx.stroke();\n          }\n        }\n      }\n      if (consumePath) {\n        this.consumePath();\n      }\n      // Restore the global alpha to the fill alpha\n      ctx.globalAlpha = this.current.fillAlpha;\n    }\n\n    closeStroke() {\n      this.closePath();\n      this.stroke();\n    }\n\n    fill(consumePath) {\n      consumePath = typeof consumePath !== \"undefined\" ? consumePath : true;\n      const ctx = this.ctx;\n      const fillColor = this.current.fillColor;\n      const isPatternFill = this.current.patternFill;\n      let needRestore = false;\n\n      if (isPatternFill) {\n        ctx.save();\n        ctx.fillStyle = fillColor.getPattern(\n          ctx,\n          this,\n          ctx.mozCurrentTransformInverse\n        );\n        needRestore = true;\n      }\n\n      if (this.contentVisible) {\n        if (this.pendingEOFill) {\n          ctx.fill(\"evenodd\");\n          this.pendingEOFill = false;\n        } else {\n          ctx.fill();\n        }\n      }\n\n      if (needRestore) {\n        ctx.restore();\n      }\n      if (consumePath) {\n        this.consumePath();\n      }\n    }\n\n    eoFill() {\n      this.pendingEOFill = true;\n      this.fill();\n    }\n\n    fillStroke() {\n      this.fill(false);\n      this.stroke(false);\n\n      this.consumePath();\n    }\n\n    eoFillStroke() {\n      this.pendingEOFill = true;\n      this.fillStroke();\n    }\n\n    closeFillStroke() {\n      this.closePath();\n      this.fillStroke();\n    }\n\n    closeEOFillStroke() {\n      this.pendingEOFill = true;\n      this.closePath();\n      this.fillStroke();\n    }\n\n    endPath() {\n      this.consumePath();\n    }\n\n    // Clipping\n    clip() {\n      this.pendingClip = NORMAL_CLIP;\n    }\n\n    eoClip() {\n      this.pendingClip = EO_CLIP;\n    }\n\n    // Text\n    beginText() {\n      this.current.textMatrix = IDENTITY_MATRIX;\n      this.current.textMatrixScale = 1;\n      this.current.x = this.current.lineX = 0;\n      this.current.y = this.current.lineY = 0;\n    }\n\n    endText() {\n      const paths = this.pendingTextPaths;\n      const ctx = this.ctx;\n      if (paths === undefined) {\n        ctx.beginPath();\n        return;\n      }\n\n      ctx.save();\n      ctx.beginPath();\n      for (let i = 0; i < paths.length; i++) {\n        const path = paths[i];\n        ctx.setTransform.apply(ctx, path.transform);\n        ctx.translate(path.x, path.y);\n        path.addToPath(ctx, path.fontSize);\n      }\n      ctx.restore();\n      ctx.clip();\n      ctx.beginPath();\n      delete this.pendingTextPaths;\n    }\n\n    setCharSpacing(spacing) {\n      this.current.charSpacing = spacing;\n    }\n\n    setWordSpacing(spacing) {\n      this.current.wordSpacing = spacing;\n    }\n\n    setHScale(scale) {\n      this.current.textHScale = scale / 100;\n    }\n\n    setLeading(leading) {\n      this.current.leading = -leading;\n    }\n\n    setFont(fontRefName, size) {\n      const fontObj = this.commonObjs.get(fontRefName);\n      const current = this.current;\n\n      if (!fontObj) {\n        throw new Error(`Can't find font for ${fontRefName}`);\n      }\n      current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;\n\n      // A valid matrix needs all main diagonal elements to be non-zero\n      // This also ensures we bypass FF bugzilla bug #719844.\n      if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n        warn(\"Invalid font matrix for font \" + fontRefName);\n      }\n\n      // The spec for Tf (setFont) says that 'size' specifies the font 'scale',\n      // and in some docs this can be negative (inverted x-y axes).\n      if (size < 0) {\n        size = -size;\n        current.fontDirection = -1;\n      } else {\n        current.fontDirection = 1;\n      }\n\n      this.current.font = fontObj;\n      this.current.fontSize = size;\n\n      if (fontObj.isType3Font) {\n        return; // we don't need ctx.font for Type3 fonts\n      }\n\n      const name = fontObj.loadedName || \"sans-serif\";\n\n      let bold = \"normal\";\n      if (fontObj.black) {\n        bold = \"900\";\n      } else if (fontObj.bold) {\n        bold = \"bold\";\n      }\n      const italic = fontObj.italic ? \"italic\" : \"normal\";\n      const typeface = `\"${name}\", ${fontObj.fallbackName}`;\n\n      // Some font backends cannot handle fonts below certain size.\n      // Keeping the font at minimal size and using the fontSizeScale to change\n      // the current transformation matrix before the fillText/strokeText.\n      // See https://bugzilla.mozilla.org/show_bug.cgi?id=726227\n      let browserFontSize = size;\n      if (size < MIN_FONT_SIZE) {\n        browserFontSize = MIN_FONT_SIZE;\n      } else if (size > MAX_FONT_SIZE) {\n        browserFontSize = MAX_FONT_SIZE;\n      }\n      this.current.fontSizeScale = size / browserFontSize;\n\n      this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n    }\n\n    setTextRenderingMode(mode) {\n      this.current.textRenderingMode = mode;\n    }\n\n    setTextRise(rise) {\n      this.current.textRise = rise;\n    }\n\n    moveText(x, y) {\n      this.current.x = this.current.lineX += x;\n      this.current.y = this.current.lineY += y;\n    }\n\n    setLeadingMoveText(x, y) {\n      this.setLeading(-y);\n      this.moveText(x, y);\n    }\n\n    setTextMatrix(a, b, c, d, e, f) {\n      this.current.textMatrix = [a, b, c, d, e, f];\n      this.current.textMatrixScale = Math.hypot(a, b);\n\n      this.current.x = this.current.lineX = 0;\n      this.current.y = this.current.lineY = 0;\n    }\n\n    nextLine() {\n      this.moveText(0, this.current.leading);\n    }\n\n    paintChar(character, x, y, patternTransform, resetLineWidthToOne) {\n      const ctx = this.ctx;\n      const current = this.current;\n      const font = current.font;\n      const textRenderingMode = current.textRenderingMode;\n      const fontSize = current.fontSize / current.fontSizeScale;\n      const fillStrokeMode =\n        textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n      const isAddToPathSet = !!(\n        textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG\n      );\n      const patternFill = current.patternFill && !font.missingFile;\n\n      let addToPath;\n      if (font.disableFontFace || isAddToPathSet || patternFill) {\n        addToPath = font.getPathGenerator(this.commonObjs, character);\n      }\n\n      if (font.disableFontFace || patternFill) {\n        ctx.save();\n        ctx.translate(x, y);\n        ctx.beginPath();\n        addToPath(ctx, fontSize);\n        if (patternTransform) {\n          ctx.setTransform.apply(ctx, patternTransform);\n        }\n        if (\n          fillStrokeMode === TextRenderingMode.FILL ||\n          fillStrokeMode === TextRenderingMode.FILL_STROKE\n        ) {\n          ctx.fill();\n        }\n        if (\n          fillStrokeMode === TextRenderingMode.STROKE ||\n          fillStrokeMode === TextRenderingMode.FILL_STROKE\n        ) {\n          if (resetLineWidthToOne) {\n            ctx.resetTransform();\n            ctx.lineWidth = Math.round(this._combinedScaleFactor);\n          }\n          ctx.stroke();\n        }\n        ctx.restore();\n      } else {\n        if (\n          fillStrokeMode === TextRenderingMode.FILL ||\n          fillStrokeMode === TextRenderingMode.FILL_STROKE\n        ) {\n          ctx.fillText(character, x, y);\n        }\n        if (\n          fillStrokeMode === TextRenderingMode.STROKE ||\n          fillStrokeMode === TextRenderingMode.FILL_STROKE\n        ) {\n          if (resetLineWidthToOne) {\n            ctx.save();\n            ctx.moveTo(x, y);\n            ctx.resetTransform();\n            ctx.lineWidth = Math.round(this._combinedScaleFactor);\n            ctx.strokeText(character, 0, 0);\n            ctx.restore();\n          } else {\n            ctx.strokeText(character, x, y);\n          }\n        }\n      }\n\n      if (isAddToPathSet) {\n        const paths = this.pendingTextPaths || (this.pendingTextPaths = []);\n        paths.push({\n          transform: ctx.mozCurrentTransform,\n          x,\n          y,\n          fontSize,\n          addToPath,\n        });\n      }\n    }\n\n    get isFontSubpixelAAEnabled() {\n      // Checks if anti-aliasing is enabled when scaled text is painted.\n      // On Windows GDI scaled fonts looks bad.\n      const { context: ctx } = this.cachedCanvases.getCanvas(\n        \"isFontSubpixelAAEnabled\",\n        10,\n        10\n      );\n      ctx.scale(1.5, 1);\n      ctx.fillText(\"I\", 0, 10);\n      const data = ctx.getImageData(0, 0, 10, 10).data;\n      let enabled = false;\n      for (let i = 3; i < data.length; i += 4) {\n        if (data[i] > 0 && data[i] < 255) {\n          enabled = true;\n          break;\n        }\n      }\n      return shadow(this, \"isFontSubpixelAAEnabled\", enabled);\n    }\n\n    showText(glyphs) {\n      const current = this.current;\n      const font = current.font;\n      if (font.isType3Font) {\n        return this.showType3Text(glyphs);\n      }\n\n      const fontSize = current.fontSize;\n      if (fontSize === 0) {\n        return undefined;\n      }\n\n      const ctx = this.ctx;\n      const fontSizeScale = current.fontSizeScale;\n      const charSpacing = current.charSpacing;\n      const wordSpacing = current.wordSpacing;\n      const fontDirection = current.fontDirection;\n      const textHScale = current.textHScale * fontDirection;\n      const glyphsLength = glyphs.length;\n      const vertical = font.vertical;\n      const spacingDir = vertical ? 1 : -1;\n      const defaultVMetrics = font.defaultVMetrics;\n      const widthAdvanceScale = fontSize * current.fontMatrix[0];\n\n      const simpleFillText =\n        current.textRenderingMode === TextRenderingMode.FILL &&\n        !font.disableFontFace &&\n        !current.patternFill;\n\n      ctx.save();\n      let patternTransform;\n      if (current.patternFill) {\n        // TODO: Patterns are not applied correctly to text if a non-embedded\n        // font is used. E.g. issue 8111 and ShowText-ShadingPattern.pdf.\n        ctx.save();\n        const pattern = current.fillColor.getPattern(\n          ctx,\n          this,\n          ctx.mozCurrentTransformInverse\n        );\n        patternTransform = ctx.mozCurrentTransform;\n        ctx.restore();\n        ctx.fillStyle = pattern;\n      }\n      ctx.transform.apply(ctx, current.textMatrix);\n      ctx.translate(current.x, current.y + current.textRise);\n\n      if (fontDirection > 0) {\n        ctx.scale(textHScale, -1);\n      } else {\n        ctx.scale(textHScale, 1);\n      }\n\n      let lineWidth = current.lineWidth;\n      let resetLineWidthToOne = false;\n      const scale = current.textMatrixScale;\n      if (scale === 0 || lineWidth === 0) {\n        const fillStrokeMode =\n          current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n        if (\n          fillStrokeMode === TextRenderingMode.STROKE ||\n          fillStrokeMode === TextRenderingMode.FILL_STROKE\n        ) {\n          this._cachedGetSinglePixelWidth = null;\n          lineWidth = this.getSinglePixelWidth();\n          resetLineWidthToOne = lineWidth < 0;\n        }\n      } else {\n        lineWidth /= scale;\n      }\n\n      if (fontSizeScale !== 1.0) {\n        ctx.scale(fontSizeScale, fontSizeScale);\n        lineWidth /= fontSizeScale;\n      }\n\n      ctx.lineWidth = lineWidth;\n\n      let x = 0,\n        i;\n      for (i = 0; i < glyphsLength; ++i) {\n        const glyph = glyphs[i];\n        if (isNum(glyph)) {\n          x += (spacingDir * glyph * fontSize) / 1000;\n          continue;\n        }\n\n        let restoreNeeded = false;\n        const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n        const character = glyph.fontChar;\n        const accent = glyph.accent;\n        let scaledX, scaledY;\n        let width = glyph.width;\n        if (vertical) {\n          const vmetric = glyph.vmetric || defaultVMetrics;\n          const vx =\n            -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n          const vy = vmetric[2] * widthAdvanceScale;\n\n          width = vmetric ? -vmetric[0] : width;\n          scaledX = vx / fontSizeScale;\n          scaledY = (x + vy) / fontSizeScale;\n        } else {\n          scaledX = x / fontSizeScale;\n          scaledY = 0;\n        }\n\n        if (font.remeasure && width > 0) {\n          // Some standard fonts may not have the exact width: rescale per\n          // character if measured width is greater than expected glyph width\n          // and subpixel-aa is enabled, otherwise just center the glyph.\n          const measuredWidth =\n            ((ctx.measureText(character).width * 1000) / fontSize) *\n            fontSizeScale;\n          if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n            const characterScaleX = width / measuredWidth;\n            restoreNeeded = true;\n            ctx.save();\n            ctx.scale(characterScaleX, 1);\n            scaledX /= characterScaleX;\n          } else if (width !== measuredWidth) {\n            scaledX +=\n              (((width - measuredWidth) / 2000) * fontSize) / fontSizeScale;\n          }\n        }\n\n        // Only attempt to draw the glyph if it is actually in the embedded font\n        // file or if there isn't a font file so the fallback font is shown.\n        if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n          if (simpleFillText && !accent) {\n            // common case\n            ctx.fillText(character, scaledX, scaledY);\n          } else {\n            this.paintChar(\n              character,\n              scaledX,\n              scaledY,\n              patternTransform,\n              resetLineWidthToOne\n            );\n            if (accent) {\n              const scaledAccentX =\n                scaledX + (fontSize * accent.offset.x) / fontSizeScale;\n              const scaledAccentY =\n                scaledY - (fontSize * accent.offset.y) / fontSizeScale;\n              this.paintChar(\n                accent.fontChar,\n                scaledAccentX,\n                scaledAccentY,\n                patternTransform,\n                resetLineWidthToOne\n              );\n            }\n          }\n        }\n\n        let charWidth;\n        if (vertical) {\n          charWidth = width * widthAdvanceScale - spacing * fontDirection;\n        } else {\n          charWidth = width * widthAdvanceScale + spacing * fontDirection;\n        }\n        x += charWidth;\n\n        if (restoreNeeded) {\n          ctx.restore();\n        }\n      }\n      if (vertical) {\n        current.y -= x;\n      } else {\n        current.x += x * textHScale;\n      }\n      ctx.restore();\n      return undefined;\n    }\n\n    showType3Text(glyphs) {\n      // Type3 fonts - each glyph is a \"mini-PDF\"\n      const ctx = this.ctx;\n      const current = this.current;\n      const font = current.font;\n      const fontSize = current.fontSize;\n      const fontDirection = current.fontDirection;\n      const spacingDir = font.vertical ? 1 : -1;\n      const charSpacing = current.charSpacing;\n      const wordSpacing = current.wordSpacing;\n      const textHScale = current.textHScale * fontDirection;\n      const fontMatrix = current.fontMatrix || FONT_IDENTITY_MATRIX;\n      const glyphsLength = glyphs.length;\n      const isTextInvisible =\n        current.textRenderingMode === TextRenderingMode.INVISIBLE;\n      let i, glyph, width, spacingLength;\n\n      if (isTextInvisible || fontSize === 0) {\n        return;\n      }\n      this._cachedGetSinglePixelWidth = null;\n\n      ctx.save();\n      ctx.transform.apply(ctx, current.textMatrix);\n      ctx.translate(current.x, current.y);\n\n      ctx.scale(textHScale, fontDirection);\n\n      for (i = 0; i < glyphsLength; ++i) {\n        glyph = glyphs[i];\n        if (isNum(glyph)) {\n          spacingLength = (spacingDir * glyph * fontSize) / 1000;\n          this.ctx.translate(spacingLength, 0);\n          current.x += spacingLength * textHScale;\n          continue;\n        }\n\n        const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n        const operatorList = font.charProcOperatorList[glyph.operatorListId];\n        if (!operatorList) {\n          warn(`Type3 character \"${glyph.operatorListId}\" is not available.`);\n          continue;\n        }\n        if (this.contentVisible) {\n          this.processingType3 = glyph;\n          this.save();\n          ctx.scale(fontSize, fontSize);\n          ctx.transform.apply(ctx, fontMatrix);\n          this.executeOperatorList(operatorList);\n          this.restore();\n        }\n\n        const transformed = Util.applyTransform([glyph.width, 0], fontMatrix);\n        width = transformed[0] * fontSize + spacing;\n\n        ctx.translate(width, 0);\n        current.x += width * textHScale;\n      }\n      ctx.restore();\n      this.processingType3 = null;\n    }\n\n    // Type3 fonts\n    setCharWidth(xWidth, yWidth) {\n      // We can safely ignore this since the width should be the same\n      // as the width in the Widths array.\n    }\n\n    setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n      // TODO According to the spec we're also suppose to ignore any operators\n      // that set color or include images while processing this type3 font.\n      this.ctx.rect(llx, lly, urx - llx, ury - lly);\n      this.clip();\n      this.endPath();\n    }\n\n    // Color\n    getColorN_Pattern(IR) {\n      let pattern;\n      if (IR[0] === \"TilingPattern\") {\n        const color = IR[1];\n        const baseTransform =\n          this.baseTransform || this.ctx.mozCurrentTransform.slice();\n        const canvasGraphicsFactory = {\n          createCanvasGraphics: ctx => {\n            return new CanvasGraphics(\n              ctx,\n              this.commonObjs,\n              this.objs,\n              this.canvasFactory\n            );\n          },\n        };\n        pattern = new TilingPattern(\n          IR,\n          color,\n          this.ctx,\n          canvasGraphicsFactory,\n          baseTransform\n        );\n      } else {\n        pattern = this._getPattern(IR[1]);\n      }\n      return pattern;\n    }\n\n    setStrokeColorN() {\n      this.current.strokeColor = this.getColorN_Pattern(arguments);\n    }\n\n    setFillColorN() {\n      this.current.fillColor = this.getColorN_Pattern(arguments);\n      this.current.patternFill = true;\n    }\n\n    setStrokeRGBColor(r, g, b) {\n      const color = Util.makeHexColor(r, g, b);\n      this.ctx.strokeStyle = color;\n      this.current.strokeColor = color;\n    }\n\n    setFillRGBColor(r, g, b) {\n      const color = Util.makeHexColor(r, g, b);\n      this.ctx.fillStyle = color;\n      this.current.fillColor = color;\n      this.current.patternFill = false;\n    }\n\n    _getPattern(objId) {\n      if (this.cachedPatterns.has(objId)) {\n        return this.cachedPatterns.get(objId);\n      }\n      const pattern = getShadingPattern(this.objs.get(objId));\n      this.cachedPatterns.set(objId, pattern);\n      return pattern;\n    }\n\n    shadingFill(objId) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const ctx = this.ctx;\n\n      this.save();\n      const pattern = this._getPattern(objId);\n      ctx.fillStyle = pattern.getPattern(\n        ctx,\n        this,\n        ctx.mozCurrentTransformInverse,\n        true\n      );\n\n      const inv = ctx.mozCurrentTransformInverse;\n      if (inv) {\n        const canvas = ctx.canvas;\n        const width = canvas.width;\n        const height = canvas.height;\n\n        const bl = Util.applyTransform([0, 0], inv);\n        const br = Util.applyTransform([0, height], inv);\n        const ul = Util.applyTransform([width, 0], inv);\n        const ur = Util.applyTransform([width, height], inv);\n\n        const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n        const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n        const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n        const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n\n        this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n      } else {\n        // HACK to draw the gradient onto an infinite rectangle.\n        // PDF gradients are drawn across the entire image while\n        // Canvas only allows gradients to be drawn in a rectangle\n        // The following bug should allow us to remove this.\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=664884\n\n        this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n      }\n\n      this.restore();\n    }\n\n    // Images\n    beginInlineImage() {\n      unreachable(\"Should not call beginInlineImage\");\n    }\n\n    beginImageData() {\n      unreachable(\"Should not call beginImageData\");\n    }\n\n    paintFormXObjectBegin(matrix, bbox) {\n      if (!this.contentVisible) {\n        return;\n      }\n      this.save();\n      this.baseTransformStack.push(this.baseTransform);\n\n      if (Array.isArray(matrix) && matrix.length === 6) {\n        this.transform.apply(this, matrix);\n      }\n\n      this.baseTransform = this.ctx.mozCurrentTransform;\n\n      if (bbox) {\n        const width = bbox[2] - bbox[0];\n        const height = bbox[3] - bbox[1];\n        this.ctx.rect(bbox[0], bbox[1], width, height);\n        this.clip();\n        this.endPath();\n      }\n    }\n\n    paintFormXObjectEnd() {\n      if (!this.contentVisible) {\n        return;\n      }\n      this.restore();\n      this.baseTransform = this.baseTransformStack.pop();\n    }\n\n    beginGroup(group) {\n      if (!this.contentVisible) {\n        return;\n      }\n\n      this.save();\n      const currentCtx = this.ctx;\n      // TODO non-isolated groups - according to Rik at adobe non-isolated\n      // group results aren't usually that different and they even have tools\n      // that ignore this setting. Notes from Rik on implementing:\n      // - When you encounter an transparency group, create a new canvas with\n      // the dimensions of the bbox\n      // - copy the content from the previous canvas to the new canvas\n      // - draw as usual\n      // - remove the backdrop alpha:\n      // alphaNew = 1 - (1 - alpha)/(1 - alphaBackdrop) with 'alpha' the alpha\n      // value of your transparency group and 'alphaBackdrop' the alpha of the\n      // backdrop\n      // - remove background color:\n      // colorNew = color - alphaNew *colorBackdrop /(1 - alphaNew)\n      if (!group.isolated) {\n        info(\"TODO: Support non-isolated groups.\");\n      }\n\n      // TODO knockout - supposedly possible with the clever use of compositing\n      // modes.\n      if (group.knockout) {\n        warn(\"Knockout groups not supported.\");\n      }\n\n      const currentTransform = currentCtx.mozCurrentTransform;\n      if (group.matrix) {\n        currentCtx.transform.apply(currentCtx, group.matrix);\n      }\n      if (!group.bbox) {\n        throw new Error(\"Bounding box is required.\");\n      }\n\n      // Based on the current transform figure out how big the bounding box\n      // will actually be.\n      let bounds = Util.getAxialAlignedBoundingBox(\n        group.bbox,\n        currentCtx.mozCurrentTransform\n      );\n      // Clip the bounding box to the current canvas.\n      const canvasBounds = [\n        0,\n        0,\n        currentCtx.canvas.width,\n        currentCtx.canvas.height,\n      ];\n      bounds = Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n      // Use ceil in case we're between sizes so we don't create canvas that is\n      // too small and make the canvas at least 1x1 pixels.\n      const offsetX = Math.floor(bounds[0]);\n      const offsetY = Math.floor(bounds[1]);\n      let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n      let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n      let scaleX = 1,\n        scaleY = 1;\n      if (drawnWidth > MAX_GROUP_SIZE) {\n        scaleX = drawnWidth / MAX_GROUP_SIZE;\n        drawnWidth = MAX_GROUP_SIZE;\n      }\n      if (drawnHeight > MAX_GROUP_SIZE) {\n        scaleY = drawnHeight / MAX_GROUP_SIZE;\n        drawnHeight = MAX_GROUP_SIZE;\n      }\n\n      let cacheId = \"groupAt\" + this.groupLevel;\n      if (group.smask) {\n        // Using two cache entries is case if masks are used one after another.\n        cacheId += \"_smask_\" + (this.smaskCounter++ % 2);\n      }\n      const scratchCanvas = this.cachedCanvases.getCanvas(\n        cacheId,\n        drawnWidth,\n        drawnHeight,\n        true\n      );\n      const groupCtx = scratchCanvas.context;\n\n      // Since we created a new canvas that is just the size of the bounding box\n      // we have to translate the group ctx.\n      groupCtx.scale(1 / scaleX, 1 / scaleY);\n      groupCtx.translate(-offsetX, -offsetY);\n      groupCtx.transform.apply(groupCtx, currentTransform);\n\n      if (group.smask) {\n        // Saving state and cached mask to be used in setGState.\n        this.smaskStack.push({\n          canvas: scratchCanvas.canvas,\n          context: groupCtx,\n          offsetX,\n          offsetY,\n          scaleX,\n          scaleY,\n          subtype: group.smask.subtype,\n          backdrop: group.smask.backdrop,\n          transferMap: group.smask.transferMap || null,\n          startTransformInverse: null, // used during suspend operation\n        });\n      } else {\n        // Setup the current ctx so when the group is popped we draw it at the\n        // right location.\n        currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n        currentCtx.translate(offsetX, offsetY);\n        currentCtx.scale(scaleX, scaleY);\n      }\n      // The transparency group inherits all off the current graphics state\n      // except the blend mode, soft mask, and alpha constants.\n      copyCtxState(currentCtx, groupCtx);\n      this.ctx = groupCtx;\n      this.setGState([\n        [\"BM\", \"source-over\"],\n        [\"ca\", 1],\n        [\"CA\", 1],\n      ]);\n      this.groupStack.push(currentCtx);\n      this.groupLevel++;\n\n      // Resetting mask state, masks will be applied on restore of the group.\n      this.current.activeSMask = null;\n    }\n\n    endGroup(group) {\n      if (!this.contentVisible) {\n        return;\n      }\n      this.groupLevel--;\n      const groupCtx = this.ctx;\n      this.ctx = this.groupStack.pop();\n      // Turn off image smoothing to avoid sub pixel interpolation which can\n      // look kind of blurry for some pdfs.\n      if (this.ctx.imageSmoothingEnabled !== undefined) {\n        this.ctx.imageSmoothingEnabled = false;\n      } else {\n        this.ctx.mozImageSmoothingEnabled = false;\n      }\n      if (group.smask) {\n        this.tempSMask = this.smaskStack.pop();\n      } else {\n        this.ctx.drawImage(groupCtx.canvas, 0, 0);\n      }\n      this.restore();\n    }\n\n    beginAnnotations() {\n      this.save();\n      if (this.baseTransform) {\n        this.ctx.setTransform.apply(this.ctx, this.baseTransform);\n      }\n    }\n\n    endAnnotations() {\n      this.restore();\n    }\n\n    beginAnnotation(id, rect, transform, matrix) {\n      this.save();\n      resetCtxToDefault(this.ctx);\n      this.current = new CanvasExtraState();\n\n      if (Array.isArray(rect) && rect.length === 4) {\n        const width = rect[2] - rect[0];\n        const height = rect[3] - rect[1];\n        this.ctx.rect(rect[0], rect[1], width, height);\n        this.clip();\n        this.endPath();\n      }\n\n      this.transform.apply(this, transform);\n      this.transform.apply(this, matrix);\n    }\n\n    endAnnotation() {\n      this.restore();\n    }\n\n    paintImageMaskXObject(img) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const ctx = this.ctx;\n      const width = img.width,\n        height = img.height;\n\n      const glyph = this.processingType3;\n\n      if (COMPILE_TYPE3_GLYPHS && glyph && glyph.compiled === undefined) {\n        if (width <= MAX_SIZE_TO_COMPILE && height <= MAX_SIZE_TO_COMPILE) {\n          glyph.compiled = compileType3Glyph({ data: img.data, width, height });\n        } else {\n          glyph.compiled = null;\n        }\n      }\n\n      if (glyph?.compiled) {\n        glyph.compiled(ctx);\n        return;\n      }\n      const mask = this._createMaskCanvas(img);\n      const maskCanvas = mask.canvas;\n\n      ctx.save();\n      // The mask is drawn with the transform applied. Reset the current\n      // transform to draw to the identity.\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);\n      ctx.restore();\n    }\n\n    paintImageMaskXObjectRepeat(\n      imgData,\n      scaleX,\n      skewX = 0,\n      skewY = 0,\n      scaleY,\n      positions\n    ) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const ctx = this.ctx;\n      ctx.save();\n      const currentTransform = ctx.mozCurrentTransform;\n      ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);\n      const mask = this._createMaskCanvas(imgData);\n\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      for (let i = 0, ii = positions.length; i < ii; i += 2) {\n        const trans = Util.transform(currentTransform, [\n          scaleX,\n          skewX,\n          skewY,\n          scaleY,\n          positions[i],\n          positions[i + 1],\n        ]);\n\n        const [x, y] = Util.applyTransform([0, 0], trans);\n        ctx.drawImage(mask.canvas, x, y);\n      }\n      ctx.restore();\n    }\n\n    paintImageMaskXObjectGroup(images) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const ctx = this.ctx;\n\n      const fillColor = this.current.fillColor;\n      const isPatternFill = this.current.patternFill;\n      for (let i = 0, ii = images.length; i < ii; i++) {\n        const image = images[i];\n        const width = image.width,\n          height = image.height;\n\n        const maskCanvas = this.cachedCanvases.getCanvas(\n          \"maskCanvas\",\n          width,\n          height\n        );\n        const maskCtx = maskCanvas.context;\n        maskCtx.save();\n\n        putBinaryImageMask(maskCtx, image);\n\n        maskCtx.globalCompositeOperation = \"source-in\";\n\n        maskCtx.fillStyle = isPatternFill\n          ? fillColor.getPattern(\n              maskCtx,\n              this,\n              ctx.mozCurrentTransformInverse,\n              false\n            )\n          : fillColor;\n        maskCtx.fillRect(0, 0, width, height);\n\n        maskCtx.restore();\n\n        ctx.save();\n        ctx.transform.apply(ctx, image.transform);\n        ctx.scale(1, -1);\n        ctx.drawImage(maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n        ctx.restore();\n      }\n    }\n\n    paintImageXObject(objId) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const imgData = objId.startsWith(\"g_\")\n        ? this.commonObjs.get(objId)\n        : this.objs.get(objId);\n      if (!imgData) {\n        warn(\"Dependent image isn't ready yet\");\n        return;\n      }\n\n      this.paintInlineImageXObject(imgData);\n    }\n\n    paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const imgData = objId.startsWith(\"g_\")\n        ? this.commonObjs.get(objId)\n        : this.objs.get(objId);\n      if (!imgData) {\n        warn(\"Dependent image isn't ready yet\");\n        return;\n      }\n\n      const width = imgData.width;\n      const height = imgData.height;\n      const map = [];\n      for (let i = 0, ii = positions.length; i < ii; i += 2) {\n        map.push({\n          transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n          x: 0,\n          y: 0,\n          w: width,\n          h: height,\n        });\n      }\n      this.paintInlineImageXObjectGroup(imgData, map);\n    }\n\n    paintInlineImageXObject(imgData) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const width = imgData.width;\n      const height = imgData.height;\n      const ctx = this.ctx;\n\n      this.save();\n      // scale the image to the unit square\n      ctx.scale(1 / width, -1 / height);\n\n      let imgToPaint;\n      // typeof check is needed due to node.js support, see issue #8489\n      if (\n        (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement) ||\n        !imgData.data\n      ) {\n        imgToPaint = imgData;\n      } else {\n        const tmpCanvas = this.cachedCanvases.getCanvas(\n          \"inlineImage\",\n          width,\n          height\n        );\n        const tmpCtx = tmpCanvas.context;\n        putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n        imgToPaint = tmpCanvas.canvas;\n      }\n\n      const scaled = this._scaleImage(\n        imgToPaint,\n        ctx.mozCurrentTransformInverse\n      );\n      ctx.drawImage(\n        scaled.img,\n        0,\n        0,\n        scaled.paintWidth,\n        scaled.paintHeight,\n        0,\n        -height,\n        width,\n        height\n      );\n\n      if (this.imageLayer) {\n        const position = this.getCanvasPosition(0, -height);\n        this.imageLayer.appendImage({\n          imgData,\n          left: position[0],\n          top: position[1],\n          width: width / ctx.mozCurrentTransformInverse[0],\n          height: height / ctx.mozCurrentTransformInverse[3],\n        });\n      }\n      this.restore();\n    }\n\n    paintInlineImageXObjectGroup(imgData, map) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const ctx = this.ctx;\n      const w = imgData.width;\n      const h = imgData.height;\n\n      const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n      const tmpCtx = tmpCanvas.context;\n      putBinaryImageData(tmpCtx, imgData, this.current.transferMaps);\n\n      for (let i = 0, ii = map.length; i < ii; i++) {\n        const entry = map[i];\n        ctx.save();\n        ctx.transform.apply(ctx, entry.transform);\n        ctx.scale(1, -1);\n        ctx.drawImage(\n          tmpCanvas.canvas,\n          entry.x,\n          entry.y,\n          entry.w,\n          entry.h,\n          0,\n          -1,\n          1,\n          1\n        );\n        if (this.imageLayer) {\n          const position = this.getCanvasPosition(entry.x, entry.y);\n          this.imageLayer.appendImage({\n            imgData,\n            left: position[0],\n            top: position[1],\n            width: w,\n            height: h,\n          });\n        }\n        ctx.restore();\n      }\n    }\n\n    paintSolidColorImageMask() {\n      if (!this.contentVisible) {\n        return;\n      }\n      this.ctx.fillRect(0, 0, 1, 1);\n    }\n\n    // Marked content\n\n    markPoint(tag) {\n      // TODO Marked content.\n    }\n\n    markPointProps(tag, properties) {\n      // TODO Marked content.\n    }\n\n    beginMarkedContent(tag) {\n      this.markedContentStack.push({\n        visible: true,\n      });\n    }\n\n    beginMarkedContentProps(tag, properties) {\n      if (tag === \"OC\") {\n        this.markedContentStack.push({\n          visible: this.optionalContentConfig.isVisible(properties),\n        });\n      } else {\n        this.markedContentStack.push({\n          visible: true,\n        });\n      }\n      this.contentVisible = this.isContentVisible();\n    }\n\n    endMarkedContent() {\n      this.markedContentStack.pop();\n      this.contentVisible = this.isContentVisible();\n    }\n\n    // Compatibility\n\n    beginCompat() {\n      // TODO ignore undefined operators (should we do that anyway?)\n    }\n\n    endCompat() {\n      // TODO stop ignoring undefined operators\n    }\n\n    // Helper functions\n\n    consumePath() {\n      const ctx = this.ctx;\n      if (this.pendingClip) {\n        if (this.pendingClip === EO_CLIP) {\n          ctx.clip(\"evenodd\");\n        } else {\n          ctx.clip();\n        }\n        this.pendingClip = null;\n      }\n      ctx.beginPath();\n    }\n\n    getSinglePixelWidth() {\n      if (this._cachedGetSinglePixelWidth === null) {\n        // If transform is [a b] then a pixel (square) is transformed\n        //                 [c d]\n        // into a parallelogram: its area is the abs value of the determinant.\n        // This parallelogram has 2 heights:\n        //  - Area / |col_1|;\n        //  - Area / |col_2|.\n        // so in order to get a height of at least 1, pixel height\n        // must be computed as followed:\n        //  h = max(sqrt(a² + c²) / |det(M)|, sqrt(b² + d²) / |det(M)|).\n        // This is equivalent to:\n        //  h = max(|line_1_inv(M)|, |line_2_inv(M)|)\n        const m = this.ctx.mozCurrentTransform;\n\n        const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\n        const sqNorm1 = m[0] ** 2 + m[2] ** 2;\n        const sqNorm2 = m[1] ** 2 + m[3] ** 2;\n        const pixelHeight = Math.sqrt(Math.max(sqNorm1, sqNorm2)) / absDet;\n        if (\n          sqNorm1 !== sqNorm2 &&\n          this._combinedScaleFactor * pixelHeight > 1\n        ) {\n          // The parallelogram isn't a square and at least one height\n          // is lower than 1 so the resulting line width must be 1\n          // but it cannot be achieved with one scale: when scaling a pixel\n          // we'll get a rectangle (see issue #12295).\n          // For example with matrix [0.001 0, 0, 100], a pixel is transformed\n          // in a rectangle 0.001x100. If we just scale by 1000 (to have a 1)\n          // then we'll get a rectangle 1x1e5 which is wrong.\n          // In this case, we must reset the transform, set linewidth to 1\n          // and then stroke.\n          this._cachedGetSinglePixelWidth = -(\n            this._combinedScaleFactor * pixelHeight\n          );\n        } else if (absDet > Number.EPSILON) {\n          this._cachedGetSinglePixelWidth = pixelHeight;\n        } else {\n          // Matrix is non-invertible.\n          this._cachedGetSinglePixelWidth = 1;\n        }\n      }\n\n      return this._cachedGetSinglePixelWidth;\n    }\n\n    getCanvasPosition(x, y) {\n      const transform = this.ctx.mozCurrentTransform;\n      return [\n        transform[0] * x + transform[2] * y + transform[4],\n        transform[1] * x + transform[3] * y + transform[5],\n      ];\n    }\n\n    isContentVisible() {\n      for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\n        if (!this.markedContentStack[i].visible) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  for (const op in OPS) {\n    CanvasGraphics.prototype[OPS[op]] = CanvasGraphics.prototype[op];\n  }\n\n  return CanvasGraphics;\n})();\n\nexport { CanvasGraphics };\n","/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FormatError,\n  info,\n  shadow,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\n\nfunction applyBoundingBox(ctx, bbox) {\n  if (!bbox || typeof Path2D === \"undefined\") {\n    return;\n  }\n  const width = bbox[2] - bbox[0];\n  const height = bbox[3] - bbox[1];\n  const region = new Path2D();\n  region.rect(bbox[0], bbox[1], width, height);\n  ctx.clip(region);\n}\n\nclass BaseShadingPattern {\n  constructor() {\n    if (this.constructor === BaseShadingPattern) {\n      unreachable(\"Cannot initialize BaseShadingPattern.\");\n    }\n  }\n\n  getPattern() {\n    unreachable(\"Abstract method `getPattern` called.\");\n  }\n}\n\nclass RadialAxialShadingPattern extends BaseShadingPattern {\n  constructor(IR) {\n    super();\n    this._type = IR[1];\n    this._bbox = IR[2];\n    this._colorStops = IR[3];\n    this._p0 = IR[4];\n    this._p1 = IR[5];\n    this._r0 = IR[6];\n    this._r1 = IR[7];\n    this._matrix = IR[8];\n    this._patternCache = null;\n  }\n\n  _createGradient(ctx) {\n    let grad;\n    if (this._type === \"axial\") {\n      grad = ctx.createLinearGradient(\n        this._p0[0],\n        this._p0[1],\n        this._p1[0],\n        this._p1[1]\n      );\n    } else if (this._type === \"radial\") {\n      grad = ctx.createRadialGradient(\n        this._p0[0],\n        this._p0[1],\n        this._r0,\n        this._p1[0],\n        this._p1[1],\n        this._r1\n      );\n    }\n\n    for (const colorStop of this._colorStops) {\n      grad.addColorStop(colorStop[0], colorStop[1]);\n    }\n    return grad;\n  }\n\n  getPattern(ctx, owner, inverse, shadingFill = false) {\n    let pattern;\n    if (this._patternCache) {\n      pattern = this._patternCache;\n    } else {\n      if (!shadingFill) {\n        const tmpCanvas = owner.cachedCanvases.getCanvas(\n          \"pattern\",\n          owner.ctx.canvas.width,\n          owner.ctx.canvas.height,\n          true\n        );\n\n        const tmpCtx = tmpCanvas.context;\n        tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n        tmpCtx.beginPath();\n        tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n\n        tmpCtx.setTransform.apply(tmpCtx, owner.baseTransform);\n        if (this._matrix) {\n          tmpCtx.transform.apply(tmpCtx, this._matrix);\n        }\n        applyBoundingBox(tmpCtx, this._bbox);\n\n        tmpCtx.fillStyle = this._createGradient(tmpCtx);\n        tmpCtx.fill();\n\n        pattern = ctx.createPattern(tmpCanvas.canvas, \"repeat\");\n      } else {\n        applyBoundingBox(ctx, this._bbox);\n        pattern = this._createGradient(ctx);\n      }\n      this._patternCache = pattern;\n    }\n    if (!shadingFill) {\n      const domMatrix = new DOMMatrix(inverse);\n      try {\n        pattern.setTransform(domMatrix);\n      } catch (ex) {\n        // Avoid rendering breaking completely in Firefox 78 ESR,\n        // and in Node.js (see issue 13724).\n        warn(`RadialAxialShadingPattern.getPattern: \"${ex?.message}\".`);\n      }\n    }\n    return pattern;\n  }\n}\n\nfunction drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n  // Very basic Gouraud-shaded triangle rasterization algorithm.\n  const coords = context.coords,\n    colors = context.colors;\n  const bytes = data.data,\n    rowSize = data.width * 4;\n  let tmp;\n  if (coords[p1 + 1] > coords[p2 + 1]) {\n    tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n    tmp = c1;\n    c1 = c2;\n    c2 = tmp;\n  }\n  if (coords[p2 + 1] > coords[p3 + 1]) {\n    tmp = p2;\n    p2 = p3;\n    p3 = tmp;\n    tmp = c2;\n    c2 = c3;\n    c3 = tmp;\n  }\n  if (coords[p1 + 1] > coords[p2 + 1]) {\n    tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n    tmp = c1;\n    c1 = c2;\n    c2 = tmp;\n  }\n  const x1 = (coords[p1] + context.offsetX) * context.scaleX;\n  const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n  const x2 = (coords[p2] + context.offsetX) * context.scaleX;\n  const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n  const x3 = (coords[p3] + context.offsetX) * context.scaleX;\n  const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n  if (y1 >= y3) {\n    return;\n  }\n  const c1r = colors[c1],\n    c1g = colors[c1 + 1],\n    c1b = colors[c1 + 2];\n  const c2r = colors[c2],\n    c2g = colors[c2 + 1],\n    c2b = colors[c2 + 2];\n  const c3r = colors[c3],\n    c3g = colors[c3 + 1],\n    c3b = colors[c3 + 2];\n\n  const minY = Math.round(y1),\n    maxY = Math.round(y3);\n  let xa, car, cag, cab;\n  let xb, cbr, cbg, cbb;\n  for (let y = minY; y <= maxY; y++) {\n    if (y < y2) {\n      let k;\n      if (y < y1) {\n        k = 0;\n      } else {\n        k = (y1 - y) / (y1 - y2);\n      }\n      xa = x1 - (x1 - x2) * k;\n      car = c1r - (c1r - c2r) * k;\n      cag = c1g - (c1g - c2g) * k;\n      cab = c1b - (c1b - c2b) * k;\n    } else {\n      let k;\n      if (y > y3) {\n        k = 1;\n      } else if (y2 === y3) {\n        k = 0;\n      } else {\n        k = (y2 - y) / (y2 - y3);\n      }\n      xa = x2 - (x2 - x3) * k;\n      car = c2r - (c2r - c3r) * k;\n      cag = c2g - (c2g - c3g) * k;\n      cab = c2b - (c2b - c3b) * k;\n    }\n\n    let k;\n    if (y < y1) {\n      k = 0;\n    } else if (y > y3) {\n      k = 1;\n    } else {\n      k = (y1 - y) / (y1 - y3);\n    }\n    xb = x1 - (x1 - x3) * k;\n    cbr = c1r - (c1r - c3r) * k;\n    cbg = c1g - (c1g - c3g) * k;\n    cbb = c1b - (c1b - c3b) * k;\n    const x1_ = Math.round(Math.min(xa, xb));\n    const x2_ = Math.round(Math.max(xa, xb));\n    let j = rowSize * y + x1_ * 4;\n    for (let x = x1_; x <= x2_; x++) {\n      k = (xa - x) / (xa - xb);\n      if (k < 0) {\n        k = 0;\n      } else if (k > 1) {\n        k = 1;\n      }\n      bytes[j++] = (car - (car - cbr) * k) | 0;\n      bytes[j++] = (cag - (cag - cbg) * k) | 0;\n      bytes[j++] = (cab - (cab - cbb) * k) | 0;\n      bytes[j++] = 255;\n    }\n  }\n}\n\nfunction drawFigure(data, figure, context) {\n  const ps = figure.coords;\n  const cs = figure.colors;\n  let i, ii;\n  switch (figure.type) {\n    case \"lattice\":\n      const verticesPerRow = figure.verticesPerRow;\n      const rows = Math.floor(ps.length / verticesPerRow) - 1;\n      const cols = verticesPerRow - 1;\n      for (i = 0; i < rows; i++) {\n        let q = i * verticesPerRow;\n        for (let j = 0; j < cols; j++, q++) {\n          drawTriangle(\n            data,\n            context,\n            ps[q],\n            ps[q + 1],\n            ps[q + verticesPerRow],\n            cs[q],\n            cs[q + 1],\n            cs[q + verticesPerRow]\n          );\n          drawTriangle(\n            data,\n            context,\n            ps[q + verticesPerRow + 1],\n            ps[q + 1],\n            ps[q + verticesPerRow],\n            cs[q + verticesPerRow + 1],\n            cs[q + 1],\n            cs[q + verticesPerRow]\n          );\n        }\n      }\n      break;\n    case \"triangles\":\n      for (i = 0, ii = ps.length; i < ii; i += 3) {\n        drawTriangle(\n          data,\n          context,\n          ps[i],\n          ps[i + 1],\n          ps[i + 2],\n          cs[i],\n          cs[i + 1],\n          cs[i + 2]\n        );\n      }\n      break;\n    default:\n      throw new Error(\"illegal figure\");\n  }\n}\n\nclass MeshShadingPattern extends BaseShadingPattern {\n  constructor(IR) {\n    super();\n    this._coords = IR[2];\n    this._colors = IR[3];\n    this._figures = IR[4];\n    this._bounds = IR[5];\n    this._matrix = IR[6];\n    this._bbox = IR[7];\n    this._background = IR[8];\n  }\n\n  _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {\n    // we will increase scale on some weird factor to let antialiasing take\n    // care of \"rough\" edges\n    const EXPECTED_SCALE = 1.1;\n    // MAX_PATTERN_SIZE is used to avoid OOM situation.\n    const MAX_PATTERN_SIZE = 3000; // 10in @ 300dpi shall be enough\n    // We need to keep transparent border around our pattern for fill():\n    // createPattern with 'no-repeat' will bleed edges across entire area.\n    const BORDER_SIZE = 2;\n\n    const offsetX = Math.floor(this._bounds[0]);\n    const offsetY = Math.floor(this._bounds[1]);\n    const boundsWidth = Math.ceil(this._bounds[2]) - offsetX;\n    const boundsHeight = Math.ceil(this._bounds[3]) - offsetY;\n\n    const width = Math.min(\n      Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)),\n      MAX_PATTERN_SIZE\n    );\n    const height = Math.min(\n      Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)),\n      MAX_PATTERN_SIZE\n    );\n    const scaleX = boundsWidth / width;\n    const scaleY = boundsHeight / height;\n\n    const context = {\n      coords: this._coords,\n      colors: this._colors,\n      offsetX: -offsetX,\n      offsetY: -offsetY,\n      scaleX: 1 / scaleX,\n      scaleY: 1 / scaleY,\n    };\n\n    const paddedWidth = width + BORDER_SIZE * 2;\n    const paddedHeight = height + BORDER_SIZE * 2;\n\n    const tmpCanvas = cachedCanvases.getCanvas(\n      \"mesh\",\n      paddedWidth,\n      paddedHeight,\n      false\n    );\n    const tmpCtx = tmpCanvas.context;\n\n    const data = tmpCtx.createImageData(width, height);\n    if (backgroundColor) {\n      const bytes = data.data;\n      for (let i = 0, ii = bytes.length; i < ii; i += 4) {\n        bytes[i] = backgroundColor[0];\n        bytes[i + 1] = backgroundColor[1];\n        bytes[i + 2] = backgroundColor[2];\n        bytes[i + 3] = 255;\n      }\n    }\n    for (const figure of this._figures) {\n      drawFigure(data, figure, context);\n    }\n    tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n    const canvas = tmpCanvas.canvas;\n\n    return {\n      canvas,\n      offsetX: offsetX - BORDER_SIZE * scaleX,\n      offsetY: offsetY - BORDER_SIZE * scaleY,\n      scaleX,\n      scaleY,\n    };\n  }\n\n  getPattern(ctx, owner, inverse, shadingFill = false) {\n    applyBoundingBox(ctx, this._bbox);\n    let scale;\n    if (shadingFill) {\n      scale = Util.singularValueDecompose2dScale(ctx.mozCurrentTransform);\n    } else {\n      // Obtain scale from matrix and current transformation matrix.\n      scale = Util.singularValueDecompose2dScale(owner.baseTransform);\n      if (this._matrix) {\n        const matrixScale = Util.singularValueDecompose2dScale(this._matrix);\n        scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n      }\n    }\n\n    // Rasterizing on the main thread since sending/queue large canvases\n    // might cause OOM.\n    const temporaryPatternCanvas = this._createMeshCanvas(\n      scale,\n      shadingFill ? null : this._background,\n      owner.cachedCanvases\n    );\n\n    if (!shadingFill) {\n      ctx.setTransform.apply(ctx, owner.baseTransform);\n      if (this._matrix) {\n        ctx.transform.apply(ctx, this._matrix);\n      }\n    }\n\n    ctx.translate(\n      temporaryPatternCanvas.offsetX,\n      temporaryPatternCanvas.offsetY\n    );\n    ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n\n    return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n  }\n}\n\nclass DummyShadingPattern extends BaseShadingPattern {\n  getPattern() {\n    return \"hotpink\";\n  }\n}\n\nfunction getShadingPattern(IR) {\n  switch (IR[0]) {\n    case \"RadialAxial\":\n      return new RadialAxialShadingPattern(IR);\n    case \"Mesh\":\n      return new MeshShadingPattern(IR);\n    case \"Dummy\":\n      return new DummyShadingPattern();\n  }\n  throw new Error(`Unknown IR type: ${IR[0]}`);\n}\n\nconst PaintType = {\n  COLORED: 1,\n  UNCOLORED: 2,\n};\n\nclass TilingPattern {\n  // 10in @ 300dpi shall be enough.\n  static get MAX_PATTERN_SIZE() {\n    return shadow(this, \"MAX_PATTERN_SIZE\", 3000);\n  }\n\n  constructor(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n    this.operatorList = IR[2];\n    this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];\n    this.bbox = IR[4];\n    this.xstep = IR[5];\n    this.ystep = IR[6];\n    this.paintType = IR[7];\n    this.tilingType = IR[8];\n    this.color = color;\n    this.ctx = ctx;\n    this.canvasGraphicsFactory = canvasGraphicsFactory;\n    this.baseTransform = baseTransform;\n  }\n\n  createPatternCanvas(owner) {\n    const operatorList = this.operatorList;\n    const bbox = this.bbox;\n    const xstep = this.xstep;\n    const ystep = this.ystep;\n    const paintType = this.paintType;\n    const tilingType = this.tilingType;\n    const color = this.color;\n    const canvasGraphicsFactory = this.canvasGraphicsFactory;\n\n    info(\"TilingType: \" + tilingType);\n\n    // A tiling pattern as defined by PDF spec 8.7.2 is a cell whose size is\n    // described by bbox, and may repeat regularly by shifting the cell by\n    // xstep and ystep.\n    // Because the HTML5 canvas API does not support pattern repetition with\n    // gaps in between, we use the xstep/ystep instead of the bbox's size.\n    //\n    // This has the following consequences (similarly for ystep):\n    //\n    // - If xstep is the same as bbox, then there is no observable difference.\n    //\n    // - If xstep is larger than bbox, then the pattern canvas is partially\n    //   empty: the area bounded by bbox is painted, the outside area is void.\n    //\n    // - If xstep is smaller than bbox, then the pixels between xstep and the\n    //   bbox boundary will be missing. This is INCORRECT behavior.\n    //   \"Figures on adjacent tiles should not overlap\" (PDF spec 8.7.3.1),\n    //   but overlapping cells without common pixels are still valid.\n    //   TODO: Fix the implementation, to allow this scenario to be painted\n    //   correctly.\n\n    const x0 = bbox[0],\n      y0 = bbox[1],\n      x1 = bbox[2],\n      y1 = bbox[3];\n\n    // Obtain scale from matrix and current transformation matrix.\n    const matrixScale = Util.singularValueDecompose2dScale(this.matrix);\n    const curMatrixScale = Util.singularValueDecompose2dScale(\n      this.baseTransform\n    );\n    const combinedScale = [\n      matrixScale[0] * curMatrixScale[0],\n      matrixScale[1] * curMatrixScale[1],\n    ];\n\n    // Use width and height values that are as close as possible to the end\n    // result when the pattern is used. Too low value makes the pattern look\n    // blurry. Too large value makes it look too crispy.\n    const dimx = this.getSizeAndScale(\n      xstep,\n      this.ctx.canvas.width,\n      combinedScale[0]\n    );\n    const dimy = this.getSizeAndScale(\n      ystep,\n      this.ctx.canvas.height,\n      combinedScale[1]\n    );\n\n    const tmpCanvas = owner.cachedCanvases.getCanvas(\n      \"pattern\",\n      dimx.size,\n      dimy.size,\n      true\n    );\n    const tmpCtx = tmpCanvas.context;\n    const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n    graphics.groupLevel = owner.groupLevel;\n\n    this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n\n    let adjustedX0 = x0;\n    let adjustedY0 = y0;\n    let adjustedX1 = x1;\n    let adjustedY1 = y1;\n    // Some bounding boxes have negative x0/y0 cordinates which will cause the\n    // some of the drawing to be off of the canvas. To avoid this shift the\n    // bounding box over.\n    if (x0 < 0) {\n      adjustedX0 = 0;\n      adjustedX1 += Math.abs(x0);\n    }\n    if (y0 < 0) {\n      adjustedY0 = 0;\n      adjustedY1 += Math.abs(y0);\n    }\n    tmpCtx.translate(-(dimx.scale * adjustedX0), -(dimy.scale * adjustedY0));\n    graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n\n    this.clipBbox(graphics, adjustedX0, adjustedY0, adjustedX1, adjustedY1);\n\n    graphics.baseTransform = graphics.ctx.mozCurrentTransform.slice();\n\n    graphics.executeOperatorList(operatorList);\n\n    graphics.endDrawing();\n\n    return {\n      canvas: tmpCanvas.canvas,\n      scaleX: dimx.scale,\n      scaleY: dimy.scale,\n      offsetX: adjustedX0,\n      offsetY: adjustedY0,\n    };\n  }\n\n  getSizeAndScale(step, realOutputSize, scale) {\n    // xstep / ystep may be negative -- normalize.\n    step = Math.abs(step);\n    // MAX_PATTERN_SIZE is used to avoid OOM situation.\n    // Use the destination canvas's size if it is bigger than the hard-coded\n    // limit of MAX_PATTERN_SIZE to avoid clipping patterns that cover the\n    // whole canvas.\n    const maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);\n    let size = Math.ceil(step * scale);\n    if (size >= maxSize) {\n      size = maxSize;\n    } else {\n      scale = size / step;\n    }\n    return { scale, size };\n  }\n\n  clipBbox(graphics, x0, y0, x1, y1) {\n    const bboxWidth = x1 - x0;\n    const bboxHeight = y1 - y0;\n    graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n    graphics.clip();\n    graphics.endPath();\n  }\n\n  setFillAndStrokeStyleToContext(graphics, paintType, color) {\n    const context = graphics.ctx,\n      current = graphics.current;\n    switch (paintType) {\n      case PaintType.COLORED:\n        const ctx = this.ctx;\n        context.fillStyle = ctx.fillStyle;\n        context.strokeStyle = ctx.strokeStyle;\n        current.fillColor = ctx.fillStyle;\n        current.strokeColor = ctx.strokeStyle;\n        break;\n      case PaintType.UNCOLORED:\n        const cssColor = Util.makeHexColor(color[0], color[1], color[2]);\n        context.fillStyle = cssColor;\n        context.strokeStyle = cssColor;\n        // Set color needed by image masks (fixes issues 3226 and 8741).\n        current.fillColor = cssColor;\n        current.strokeColor = cssColor;\n        break;\n      default:\n        throw new FormatError(`Unsupported paint type: ${paintType}`);\n    }\n  }\n\n  getPattern(ctx, owner, inverse, shadingFill = false) {\n    // PDF spec 8.7.2 NOTE 1: pattern's matrix is relative to initial matrix.\n    let matrix = inverse;\n    if (!shadingFill) {\n      matrix = Util.transform(matrix, owner.baseTransform);\n      if (this.matrix) {\n        matrix = Util.transform(matrix, this.matrix);\n      }\n    }\n\n    const temporaryPatternCanvas = this.createPatternCanvas(owner);\n\n    let domMatrix = new DOMMatrix(matrix);\n    // Rescale and so that the ctx.createPattern call generates a pattern with\n    // the desired size.\n    domMatrix = domMatrix.translate(\n      temporaryPatternCanvas.offsetX,\n      temporaryPatternCanvas.offsetY\n    );\n    domMatrix = domMatrix.scale(\n      1 / temporaryPatternCanvas.scaleX,\n      1 / temporaryPatternCanvas.scaleY\n    );\n\n    const pattern = ctx.createPattern(temporaryPatternCanvas.canvas, \"repeat\");\n    try {\n      pattern.setTransform(domMatrix);\n    } catch (ex) {\n      // Avoid rendering breaking completely in Firefox 78 ESR,\n      // and in Node.js (see issue 13724).\n      warn(`TilingPattern.getPattern: \"${ex?.message}\".`);\n    }\n    return pattern;\n  }\n}\n\nexport { getShadingPattern, TilingPattern };\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef {Object} GlobalWorkerOptionsType\n * @property {Worker | null} workerPort - Defines global port for worker\n *   process. Overrides the `workerSrc` option.\n * @property {string} workerSrc - A string containing the path and filename\n *   of the worker file.\n *\n *   NOTE: The `workerSrc` option should always be set, in order to prevent any\n *         issues when using the PDF.js library.\n */\n\n/** @type {GlobalWorkerOptionsType} */\nconst GlobalWorkerOptions = Object.create(null);\n\nGlobalWorkerOptions.workerPort =\n  GlobalWorkerOptions.workerPort === undefined\n    ? null\n    : GlobalWorkerOptions.workerPort;\n\nGlobalWorkerOptions.workerSrc =\n  GlobalWorkerOptions.workerSrc === undefined\n    ? \"\"\n    : GlobalWorkerOptions.workerSrc;\n\nexport { GlobalWorkerOptions };\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n  MissingPDFException,\n  UnexpectedResponseException,\n  UnknownErrorException,\n} from \"./util.js\";\n\nconst CallbackKind = {\n  UNKNOWN: 0,\n  DATA: 1,\n  ERROR: 2,\n};\n\nconst StreamKind = {\n  UNKNOWN: 0,\n  CANCEL: 1,\n  CANCEL_COMPLETE: 2,\n  CLOSE: 3,\n  ENQUEUE: 4,\n  ERROR: 5,\n  PULL: 6,\n  PULL_COMPLETE: 7,\n  START_COMPLETE: 8,\n};\n\nfunction wrapReason(reason) {\n  if (\n    typeof PDFJSDev === \"undefined\" ||\n    PDFJSDev.test(\"!PRODUCTION || TESTING\")\n  ) {\n    assert(\n      reason instanceof Error ||\n        (typeof reason === \"object\" && reason !== null),\n      'wrapReason: Expected \"reason\" to be a (possibly cloned) Error.'\n    );\n  } else {\n    if (typeof reason !== \"object\" || reason === null) {\n      return reason;\n    }\n  }\n  switch (reason.name) {\n    case \"AbortException\":\n      return new AbortException(reason.message);\n    case \"MissingPDFException\":\n      return new MissingPDFException(reason.message);\n    case \"UnexpectedResponseException\":\n      return new UnexpectedResponseException(reason.message, reason.status);\n    case \"UnknownErrorException\":\n      return new UnknownErrorException(reason.message, reason.details);\n    default:\n      return new UnknownErrorException(reason.message, reason.toString());\n  }\n}\n\nclass MessageHandler {\n  constructor(sourceName, targetName, comObj) {\n    this.sourceName = sourceName;\n    this.targetName = targetName;\n    this.comObj = comObj;\n    this.callbackId = 1;\n    this.streamId = 1;\n    this.postMessageTransfers = true;\n    this.streamSinks = Object.create(null);\n    this.streamControllers = Object.create(null);\n    this.callbackCapabilities = Object.create(null);\n    this.actionHandler = Object.create(null);\n\n    this._onComObjOnMessage = event => {\n      const data = event.data;\n      if (data.targetName !== this.sourceName) {\n        return;\n      }\n      if (data.stream) {\n        this._processStreamMessage(data);\n        return;\n      }\n      if (data.callback) {\n        const callbackId = data.callbackId;\n        const capability = this.callbackCapabilities[callbackId];\n        if (!capability) {\n          throw new Error(`Cannot resolve callback ${callbackId}`);\n        }\n        delete this.callbackCapabilities[callbackId];\n\n        if (data.callback === CallbackKind.DATA) {\n          capability.resolve(data.data);\n        } else if (data.callback === CallbackKind.ERROR) {\n          capability.reject(wrapReason(data.reason));\n        } else {\n          throw new Error(\"Unexpected callback case\");\n        }\n        return;\n      }\n      const action = this.actionHandler[data.action];\n      if (!action) {\n        throw new Error(`Unknown action from worker: ${data.action}`);\n      }\n      if (data.callbackId) {\n        const cbSourceName = this.sourceName;\n        const cbTargetName = data.sourceName;\n        new Promise(function (resolve) {\n          resolve(action(data.data));\n        }).then(\n          function (result) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.DATA,\n              callbackId: data.callbackId,\n              data: result,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.ERROR,\n              callbackId: data.callbackId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        return;\n      }\n      if (data.streamId) {\n        this._createStreamSink(data);\n        return;\n      }\n      action(data.data);\n    };\n    comObj.addEventListener(\"message\", this._onComObjOnMessage);\n  }\n\n  on(actionName, handler) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        typeof handler === \"function\",\n        'MessageHandler.on: Expected \"handler\" to be a function.'\n      );\n    }\n    const ah = this.actionHandler;\n    if (ah[actionName]) {\n      throw new Error(`There is already an actionName called \"${actionName}\"`);\n    }\n    ah[actionName] = handler;\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   */\n  send(actionName, data, transfers) {\n    this._postMessage(\n      {\n        sourceName: this.sourceName,\n        targetName: this.targetName,\n        action: actionName,\n        data,\n      },\n      transfers\n    );\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expects that the other side will callback with the response.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {Promise} Promise to be resolved with response data.\n   */\n  sendWithPromise(actionName, data, transfers) {\n    const callbackId = this.callbackId++;\n    const capability = createPromiseCapability();\n    this.callbackCapabilities[callbackId] = capability;\n    try {\n      this._postMessage(\n        {\n          sourceName: this.sourceName,\n          targetName: this.targetName,\n          action: actionName,\n          callbackId,\n          data,\n        },\n        transfers\n      );\n    } catch (ex) {\n      capability.reject(ex);\n    }\n    return capability.promise;\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expect that the other side will callback to signal 'start_complete'.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Object} queueingStrategy - Strategy to signal backpressure based on\n   *                 internal queue.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {ReadableStream} ReadableStream to read data in chunks.\n   */\n  sendWithStream(actionName, data, queueingStrategy, transfers) {\n    const streamId = this.streamId++;\n    const sourceName = this.sourceName;\n    const targetName = this.targetName;\n    const comObj = this.comObj;\n\n    return new ReadableStream(\n      {\n        start: controller => {\n          const startCapability = createPromiseCapability();\n          this.streamControllers[streamId] = {\n            controller,\n            startCall: startCapability,\n            pullCall: null,\n            cancelCall: null,\n            isClosed: false,\n          };\n          this._postMessage(\n            {\n              sourceName,\n              targetName,\n              action: actionName,\n              streamId,\n              data,\n              desiredSize: controller.desiredSize,\n            },\n            transfers\n          );\n          // Return Promise for Async process, to signal success/failure.\n          return startCapability.promise;\n        },\n\n        pull: controller => {\n          const pullCapability = createPromiseCapability();\n          this.streamControllers[streamId].pullCall = pullCapability;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL,\n            streamId,\n            desiredSize: controller.desiredSize,\n          });\n          // Returning Promise will not call \"pull\"\n          // again until current pull is resolved.\n          return pullCapability.promise;\n        },\n\n        cancel: reason => {\n          assert(reason instanceof Error, \"cancel must have a valid reason\");\n          const cancelCapability = createPromiseCapability();\n          this.streamControllers[streamId].cancelCall = cancelCapability;\n          this.streamControllers[streamId].isClosed = true;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CANCEL,\n            streamId,\n            reason: wrapReason(reason),\n          });\n          // Return Promise to signal success or failure.\n          return cancelCapability.promise;\n        },\n      },\n      queueingStrategy\n    );\n  }\n\n  /**\n   * @private\n   */\n  _createStreamSink(data) {\n    const self = this;\n    const action = this.actionHandler[data.action];\n    const streamId = data.streamId;\n    const sourceName = this.sourceName;\n    const targetName = data.sourceName;\n    const comObj = this.comObj;\n\n    const streamSink = {\n      enqueue(chunk, size = 1, transfers) {\n        if (this.isCancelled) {\n          return;\n        }\n        const lastDesiredSize = this.desiredSize;\n        this.desiredSize -= size;\n        // Enqueue decreases the desiredSize property of sink,\n        // so when it changes from positive to negative,\n        // set ready as unresolved promise.\n        if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n          this.sinkCapability = createPromiseCapability();\n          this.ready = this.sinkCapability.promise;\n        }\n        self._postMessage(\n          {\n            sourceName,\n            targetName,\n            stream: StreamKind.ENQUEUE,\n            streamId,\n            chunk,\n          },\n          transfers\n        );\n      },\n\n      close() {\n        if (this.isCancelled) {\n          return;\n        }\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.CLOSE,\n          streamId,\n        });\n        delete self.streamSinks[streamId];\n      },\n\n      error(reason) {\n        assert(reason instanceof Error, \"error must have a valid reason\");\n        if (this.isCancelled) {\n          return;\n        }\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.ERROR,\n          streamId,\n          reason: wrapReason(reason),\n        });\n      },\n\n      sinkCapability: createPromiseCapability(),\n      onPull: null,\n      onCancel: null,\n      isCancelled: false,\n      desiredSize: data.desiredSize,\n      ready: null,\n    };\n\n    streamSink.sinkCapability.resolve();\n    streamSink.ready = streamSink.sinkCapability.promise;\n    this.streamSinks[streamId] = streamSink;\n    new Promise(function (resolve) {\n      resolve(action(data.data, streamSink));\n    }).then(\n      function () {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          success: true,\n        });\n      },\n      function (reason) {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          reason: wrapReason(reason),\n        });\n      }\n    );\n  }\n\n  /**\n   * @private\n   */\n  _processStreamMessage(data) {\n    const streamId = data.streamId;\n    const sourceName = this.sourceName;\n    const targetName = data.sourceName;\n    const comObj = this.comObj;\n\n    switch (data.stream) {\n      case StreamKind.START_COMPLETE:\n        if (data.success) {\n          this.streamControllers[streamId].startCall.resolve();\n        } else {\n          this.streamControllers[streamId].startCall.reject(\n            wrapReason(data.reason)\n          );\n        }\n        break;\n      case StreamKind.PULL_COMPLETE:\n        if (data.success) {\n          this.streamControllers[streamId].pullCall.resolve();\n        } else {\n          this.streamControllers[streamId].pullCall.reject(\n            wrapReason(data.reason)\n          );\n        }\n        break;\n      case StreamKind.PULL:\n        // Ignore any pull after close is called.\n        if (!this.streamSinks[streamId]) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL_COMPLETE,\n            streamId,\n            success: true,\n          });\n          break;\n        }\n        // Pull increases the desiredSize property of sink,\n        // so when it changes from negative to positive,\n        // set ready property as resolved promise.\n        if (\n          this.streamSinks[streamId].desiredSize <= 0 &&\n          data.desiredSize > 0\n        ) {\n          this.streamSinks[streamId].sinkCapability.resolve();\n        }\n        // Reset desiredSize property of sink on every pull.\n        this.streamSinks[streamId].desiredSize = data.desiredSize;\n        const { onPull } = this.streamSinks[data.streamId];\n        new Promise(function (resolve) {\n          resolve(onPull && onPull());\n        }).then(\n          function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              success: true,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        break;\n      case StreamKind.ENQUEUE:\n        assert(\n          this.streamControllers[streamId],\n          \"enqueue should have stream controller\"\n        );\n        if (this.streamControllers[streamId].isClosed) {\n          break;\n        }\n        this.streamControllers[streamId].controller.enqueue(data.chunk);\n        break;\n      case StreamKind.CLOSE:\n        assert(\n          this.streamControllers[streamId],\n          \"close should have stream controller\"\n        );\n        if (this.streamControllers[streamId].isClosed) {\n          break;\n        }\n        this.streamControllers[streamId].isClosed = true;\n        this.streamControllers[streamId].controller.close();\n        this._deleteStreamController(streamId);\n        break;\n      case StreamKind.ERROR:\n        assert(\n          this.streamControllers[streamId],\n          \"error should have stream controller\"\n        );\n        this.streamControllers[streamId].controller.error(\n          wrapReason(data.reason)\n        );\n        this._deleteStreamController(streamId);\n        break;\n      case StreamKind.CANCEL_COMPLETE:\n        if (data.success) {\n          this.streamControllers[streamId].cancelCall.resolve();\n        } else {\n          this.streamControllers[streamId].cancelCall.reject(\n            wrapReason(data.reason)\n          );\n        }\n        this._deleteStreamController(streamId);\n        break;\n      case StreamKind.CANCEL:\n        if (!this.streamSinks[streamId]) {\n          break;\n        }\n        const { onCancel } = this.streamSinks[data.streamId];\n        new Promise(function (resolve) {\n          resolve(onCancel && onCancel(wrapReason(data.reason)));\n        }).then(\n          function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              success: true,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        this.streamSinks[streamId].sinkCapability.reject(\n          wrapReason(data.reason)\n        );\n        this.streamSinks[streamId].isCancelled = true;\n        delete this.streamSinks[streamId];\n        break;\n      default:\n        throw new Error(\"Unexpected stream case\");\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _deleteStreamController(streamId) {\n    // Delete the `streamController` only when the start, pull, and cancel\n    // capabilities have settled, to prevent `TypeError`s.\n    await Promise.allSettled(\n      [\n        this.streamControllers[streamId].startCall,\n        this.streamControllers[streamId].pullCall,\n        this.streamControllers[streamId].cancelCall,\n      ].map(function (capability) {\n        return capability && capability.promise;\n      })\n    );\n    delete this.streamControllers[streamId];\n  }\n\n  /**\n   * Sends raw message to the comObj.\n   * @param {Object} message - Raw message.\n   * @param transfers List of transfers/ArrayBuffers, or undefined.\n   * @private\n   */\n  _postMessage(message, transfers) {\n    if (transfers && this.postMessageTransfers) {\n      this.comObj.postMessage(message, transfers);\n    } else {\n      this.comObj.postMessage(message);\n    }\n  }\n\n  destroy() {\n    this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n  }\n}\n\nexport { MessageHandler };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { objectFromMap } from \"../shared/util.js\";\n\nclass Metadata {\n  constructor({ parsedData, rawData }) {\n    this._metadataMap = parsedData;\n    this._data = rawData;\n  }\n\n  getRaw() {\n    return this._data;\n  }\n\n  get(name) {\n    return this._metadataMap.get(name) ?? null;\n  }\n\n  getAll() {\n    return objectFromMap(this._metadataMap);\n  }\n\n  has(name) {\n    return this._metadataMap.has(name);\n  }\n}\n\nexport { Metadata };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { objectFromMap, warn } from \"../shared/util.js\";\n\nclass OptionalContentGroup {\n  constructor(name, intent) {\n    this.visible = true;\n    this.name = name;\n    this.intent = intent;\n  }\n}\n\nclass OptionalContentConfig {\n  constructor(data) {\n    this.name = null;\n    this.creator = null;\n    this._order = null;\n    this._groups = new Map();\n\n    if (data === null) {\n      return;\n    }\n    this.name = data.name;\n    this.creator = data.creator;\n    this._order = data.order;\n    for (const group of data.groups) {\n      this._groups.set(\n        group.id,\n        new OptionalContentGroup(group.name, group.intent)\n      );\n    }\n\n    if (data.baseState === \"OFF\") {\n      for (const group of this._groups) {\n        group.visible = false;\n      }\n    }\n\n    for (const on of data.on) {\n      this._groups.get(on).visible = true;\n    }\n\n    for (const off of data.off) {\n      this._groups.get(off).visible = false;\n    }\n  }\n\n  _evaluateVisibilityExpression(array) {\n    const length = array.length;\n    if (length < 2) {\n      return true;\n    }\n    const operator = array[0];\n    for (let i = 1; i < length; i++) {\n      const element = array[i];\n      let state;\n      if (Array.isArray(element)) {\n        state = this._evaluateVisibilityExpression(element);\n      } else if (this._groups.has(element)) {\n        state = this._groups.get(element).visible;\n      } else {\n        warn(`Optional content group not found: ${element}`);\n        return true;\n      }\n      switch (operator) {\n        case \"And\":\n          if (!state) {\n            return false;\n          }\n          break;\n        case \"Or\":\n          if (state) {\n            return true;\n          }\n          break;\n        case \"Not\":\n          return !state;\n        default:\n          return true;\n      }\n    }\n    return operator === \"And\";\n  }\n\n  isVisible(group) {\n    if (group.type === \"OCG\") {\n      if (!this._groups.has(group.id)) {\n        warn(`Optional content group not found: ${group.id}`);\n        return true;\n      }\n      return this._groups.get(group.id).visible;\n    } else if (group.type === \"OCMD\") {\n      // Per the spec, the expression should be preferred if available.\n      if (group.expression) {\n        return this._evaluateVisibilityExpression(group.expression);\n      }\n      if (!group.policy || group.policy === \"AnyOn\") {\n        // Default\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (this._groups.get(id).visible) {\n            return true;\n          }\n        }\n        return false;\n      } else if (group.policy === \"AllOn\") {\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (!this._groups.get(id).visible) {\n            return false;\n          }\n        }\n        return true;\n      } else if (group.policy === \"AnyOff\") {\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (!this._groups.get(id).visible) {\n            return true;\n          }\n        }\n        return false;\n      } else if (group.policy === \"AllOff\") {\n        for (const id of group.ids) {\n          if (!this._groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (this._groups.get(id).visible) {\n            return false;\n          }\n        }\n        return true;\n      }\n      warn(`Unknown optional content policy ${group.policy}.`);\n      return true;\n    }\n    warn(`Unknown group type ${group.type}.`);\n    return true;\n  }\n\n  setVisibility(id, visible = true) {\n    if (!this._groups.has(id)) {\n      warn(`Optional content group not found: ${id}`);\n      return;\n    }\n    this._groups.get(id).visible = !!visible;\n  }\n\n  getOrder() {\n    if (!this._groups.size) {\n      return null;\n    }\n    if (this._order) {\n      return this._order.slice();\n    }\n    return Array.from(this._groups.keys());\n  }\n\n  getGroups() {\n    return this._groups.size > 0 ? objectFromMap(this._groups) : null;\n  }\n\n  getGroup(id) {\n    return this._groups.get(id) || null;\n  }\n}\n\nexport { OptionalContentConfig };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, createPromiseCapability } from \"../shared/util.js\";\nimport { isPdfFile } from \"./display_utils.js\";\n\n/** @implements {IPDFStream} */\nclass PDFDataTransportStream {\n  constructor(params, pdfDataRangeTransport) {\n    assert(\n      pdfDataRangeTransport,\n      'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.'\n    );\n\n    this._queuedChunks = [];\n    this._progressiveDone = params.progressiveDone || false;\n    this._contentDispositionFilename =\n      params.contentDispositionFilename || null;\n\n    const initialData = params.initialData;\n    if (initialData?.length > 0) {\n      const buffer = new Uint8Array(initialData).buffer;\n      this._queuedChunks.push(buffer);\n    }\n\n    this._pdfDataRangeTransport = pdfDataRangeTransport;\n    this._isStreamingSupported = !params.disableStream;\n    this._isRangeSupported = !params.disableRange;\n    this._contentLength = params.length;\n\n    this._fullRequestReader = null;\n    this._rangeReaders = [];\n\n    this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {\n      this._onReceiveData({ begin, chunk });\n    });\n\n    this._pdfDataRangeTransport.addProgressListener((loaded, total) => {\n      this._onProgress({ loaded, total });\n    });\n\n    this._pdfDataRangeTransport.addProgressiveReadListener(chunk => {\n      this._onReceiveData({ chunk });\n    });\n\n    this._pdfDataRangeTransport.addProgressiveDoneListener(() => {\n      this._onProgressiveDone();\n    });\n\n    this._pdfDataRangeTransport.transportReady();\n  }\n\n  _onReceiveData(args) {\n    const buffer = new Uint8Array(args.chunk).buffer;\n    if (args.begin === undefined) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader._enqueue(buffer);\n      } else {\n        this._queuedChunks.push(buffer);\n      }\n    } else {\n      const found = this._rangeReaders.some(function (rangeReader) {\n        if (rangeReader._begin !== args.begin) {\n          return false;\n        }\n        rangeReader._enqueue(buffer);\n        return true;\n      });\n      assert(\n        found,\n        \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\"\n      );\n    }\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  _onProgress(evt) {\n    if (evt.total === undefined) {\n      // Reporting to first range reader, if it exists.\n      const firstReader = this._rangeReaders[0];\n      if (firstReader?.onProgress) {\n        firstReader.onProgress({ loaded: evt.loaded });\n      }\n    } else {\n      const fullReader = this._fullRequestReader;\n      if (fullReader?.onProgress) {\n        fullReader.onProgress({ loaded: evt.loaded, total: evt.total });\n      }\n    }\n  }\n\n  _onProgressiveDone() {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.progressiveDone();\n    }\n    this._progressiveDone = true;\n  }\n\n  _removeRangeReader(reader) {\n    const i = this._rangeReaders.indexOf(reader);\n    if (i >= 0) {\n      this._rangeReaders.splice(i, 1);\n    }\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFDataTransportStream.getFullReader can only be called once.\"\n    );\n    const queuedChunks = this._queuedChunks;\n    this._queuedChunks = null;\n    return new PDFDataTransportStreamReader(\n      this,\n      queuedChunks,\n      this._progressiveDone,\n      this._contentDispositionFilename\n    );\n  }\n\n  getRangeReader(begin, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n    this._pdfDataRangeTransport.requestDataRange(begin, end);\n    this._rangeReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n    for (const reader of this._rangeReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n    this._pdfDataRangeTransport.abort();\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFDataTransportStreamReader {\n  constructor(\n    stream,\n    queuedChunks,\n    progressiveDone = false,\n    contentDispositionFilename = null\n  ) {\n    this._stream = stream;\n    this._done = progressiveDone || false;\n    this._filename = isPdfFile(contentDispositionFilename)\n      ? contentDispositionFilename\n      : null;\n    this._queuedChunks = queuedChunks || [];\n    this._loaded = 0;\n    for (const chunk of this._queuedChunks) {\n      this._loaded += chunk.byteLength;\n    }\n    this._requests = [];\n    this._headersReady = Promise.resolve();\n    stream._fullRequestReader = this;\n\n    this.onProgress = null;\n  }\n\n  _enqueue(chunk) {\n    if (this._done) {\n      return; // Ignore new data.\n    }\n    if (this._requests.length > 0) {\n      const requestCapability = this._requests.shift();\n      requestCapability.resolve({ value: chunk, done: false });\n    } else {\n      this._queuedChunks.push(chunk);\n    }\n    this._loaded += chunk.byteLength;\n  }\n\n  get headersReady() {\n    return this._headersReady;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get isRangeSupported() {\n    return this._stream._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._stream._isStreamingSupported;\n  }\n\n  get contentLength() {\n    return this._stream._contentLength;\n  }\n\n  async read() {\n    if (this._queuedChunks.length > 0) {\n      const chunk = this._queuedChunks.shift();\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n  }\n\n  progressiveDone() {\n    if (this._done) {\n      return;\n    }\n    this._done = true;\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFDataTransportStreamRangeReader {\n  constructor(stream, begin, end) {\n    this._stream = stream;\n    this._begin = begin;\n    this._end = end;\n    this._queuedChunk = null;\n    this._requests = [];\n    this._done = false;\n\n    this.onProgress = null;\n  }\n\n  _enqueue(chunk) {\n    if (this._done) {\n      return; // ignore new data\n    }\n    if (this._requests.length === 0) {\n      this._queuedChunk = chunk;\n    } else {\n      const requestsCapability = this._requests.shift();\n      requestsCapability.resolve({ value: chunk, done: false });\n      for (const requestCapability of this._requests) {\n        requestCapability.resolve({ value: undefined, done: true });\n      }\n      this._requests.length = 0;\n    }\n    this._done = true;\n    this._stream._removeRangeReader(this);\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    if (this._queuedChunk) {\n      const chunk = this._queuedChunk;\n      this._queuedChunk = null;\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    this._stream._removeRangeReader(this);\n  }\n}\n\nexport { PDFDataTransportStream };\n","/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  addLinkAttributes,\n  DOMSVGFactory,\n  getFilenameFromUrl,\n  LinkTarget,\n  PDFDateString,\n} from \"./display_utils.js\";\nimport {\n  AnnotationBorderStyleType,\n  AnnotationType,\n  assert,\n  stringToPDFString,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport { AnnotationStorage } from \"./annotation_storage.js\";\nimport { ColorConverters } from \"../shared/scripting_utils.js\";\n\n/**\n * @typedef {Object} AnnotationElementParameters\n * @property {Object} data\n * @property {HTMLDivElement} layer\n * @property {PDFPage} page\n * @property {PageViewport} viewport\n * @property {IPDFLinkService} linkService\n * @property {DownloadManager} downloadManager\n * @property {AnnotationStorage} [annotationStorage]\n * @property {string} [imageResourcesPath] - Path for image resources, mainly\n *   for annotation icons. Include trailing slash.\n * @property {boolean} renderInteractiveForms\n * @property {Object} svgFactory\n * @property {boolean} [enableScripting]\n * @property {boolean} [hasJSActions]\n * @property {Object} [mouseState]\n */\n\nclass AnnotationElementFactory {\n  /**\n   * @param {AnnotationElementParameters} parameters\n   * @returns {AnnotationElement}\n   */\n  static create(parameters) {\n    const subtype = parameters.data.annotationType;\n\n    switch (subtype) {\n      case AnnotationType.LINK:\n        return new LinkAnnotationElement(parameters);\n\n      case AnnotationType.TEXT:\n        return new TextAnnotationElement(parameters);\n\n      case AnnotationType.WIDGET:\n        const fieldType = parameters.data.fieldType;\n\n        switch (fieldType) {\n          case \"Tx\":\n            return new TextWidgetAnnotationElement(parameters);\n          case \"Btn\":\n            if (parameters.data.radioButton) {\n              return new RadioButtonWidgetAnnotationElement(parameters);\n            } else if (parameters.data.checkBox) {\n              return new CheckboxWidgetAnnotationElement(parameters);\n            }\n            return new PushButtonWidgetAnnotationElement(parameters);\n          case \"Ch\":\n            return new ChoiceWidgetAnnotationElement(parameters);\n        }\n        return new WidgetAnnotationElement(parameters);\n\n      case AnnotationType.POPUP:\n        return new PopupAnnotationElement(parameters);\n\n      case AnnotationType.FREETEXT:\n        return new FreeTextAnnotationElement(parameters);\n\n      case AnnotationType.LINE:\n        return new LineAnnotationElement(parameters);\n\n      case AnnotationType.SQUARE:\n        return new SquareAnnotationElement(parameters);\n\n      case AnnotationType.CIRCLE:\n        return new CircleAnnotationElement(parameters);\n\n      case AnnotationType.POLYLINE:\n        return new PolylineAnnotationElement(parameters);\n\n      case AnnotationType.CARET:\n        return new CaretAnnotationElement(parameters);\n\n      case AnnotationType.INK:\n        return new InkAnnotationElement(parameters);\n\n      case AnnotationType.POLYGON:\n        return new PolygonAnnotationElement(parameters);\n\n      case AnnotationType.HIGHLIGHT:\n        return new HighlightAnnotationElement(parameters);\n\n      case AnnotationType.UNDERLINE:\n        return new UnderlineAnnotationElement(parameters);\n\n      case AnnotationType.SQUIGGLY:\n        return new SquigglyAnnotationElement(parameters);\n\n      case AnnotationType.STRIKEOUT:\n        return new StrikeOutAnnotationElement(parameters);\n\n      case AnnotationType.STAMP:\n        return new StampAnnotationElement(parameters);\n\n      case AnnotationType.FILEATTACHMENT:\n        return new FileAttachmentAnnotationElement(parameters);\n\n      default:\n        return new AnnotationElement(parameters);\n    }\n  }\n}\n\nclass AnnotationElement {\n  constructor(\n    parameters,\n    {\n      isRenderable = false,\n      ignoreBorder = false,\n      createQuadrilaterals = false,\n    } = {}\n  ) {\n    this.isRenderable = isRenderable;\n    this.data = parameters.data;\n    this.layer = parameters.layer;\n    this.page = parameters.page;\n    this.viewport = parameters.viewport;\n    this.linkService = parameters.linkService;\n    this.downloadManager = parameters.downloadManager;\n    this.imageResourcesPath = parameters.imageResourcesPath;\n    this.renderInteractiveForms = parameters.renderInteractiveForms;\n    this.svgFactory = parameters.svgFactory;\n    this.annotationStorage = parameters.annotationStorage;\n    this.enableScripting = parameters.enableScripting;\n    this.hasJSActions = parameters.hasJSActions;\n    this._mouseState = parameters.mouseState;\n\n    if (isRenderable) {\n      this.container = this._createContainer(ignoreBorder);\n    }\n    if (createQuadrilaterals) {\n      this.quadrilaterals = this._createQuadrilaterals(ignoreBorder);\n    }\n  }\n\n  /**\n   * Create an empty container for the annotation's HTML element.\n   *\n   * @private\n   * @param {boolean} ignoreBorder\n   * @memberof AnnotationElement\n   * @returns {HTMLSectionElement}\n   */\n  _createContainer(ignoreBorder = false) {\n    const data = this.data,\n      page = this.page,\n      viewport = this.viewport;\n    const container = document.createElement(\"section\");\n    let width = data.rect[2] - data.rect[0];\n    let height = data.rect[3] - data.rect[1];\n\n    container.setAttribute(\"data-annotation-id\", data.id);\n\n    // Do *not* modify `data.rect`, since that will corrupt the annotation\n    // position on subsequent calls to `_createContainer` (see issue 6804).\n    const rect = Util.normalizeRect([\n      data.rect[0],\n      page.view[3] - data.rect[1] + page.view[1],\n      data.rect[2],\n      page.view[3] - data.rect[3] + page.view[1],\n    ]);\n\n    container.style.transform = `matrix(${viewport.transform.join(\",\")})`;\n    container.style.transformOrigin = `${-rect[0]}px ${-rect[1]}px`;\n\n    if (!ignoreBorder && data.borderStyle.width > 0) {\n      container.style.borderWidth = `${data.borderStyle.width}px`;\n      if (data.borderStyle.style !== AnnotationBorderStyleType.UNDERLINE) {\n        // Underline styles only have a bottom border, so we do not need\n        // to adjust for all borders. This yields a similar result as\n        // Adobe Acrobat/Reader.\n        width -= 2 * data.borderStyle.width;\n        height -= 2 * data.borderStyle.width;\n      }\n\n      const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n      const verticalRadius = data.borderStyle.verticalCornerRadius;\n      if (horizontalRadius > 0 || verticalRadius > 0) {\n        const radius = `${horizontalRadius}px / ${verticalRadius}px`;\n        container.style.borderRadius = radius;\n      }\n\n      switch (data.borderStyle.style) {\n        case AnnotationBorderStyleType.SOLID:\n          container.style.borderStyle = \"solid\";\n          break;\n\n        case AnnotationBorderStyleType.DASHED:\n          container.style.borderStyle = \"dashed\";\n          break;\n\n        case AnnotationBorderStyleType.BEVELED:\n          warn(\"Unimplemented border style: beveled\");\n          break;\n\n        case AnnotationBorderStyleType.INSET:\n          warn(\"Unimplemented border style: inset\");\n          break;\n\n        case AnnotationBorderStyleType.UNDERLINE:\n          container.style.borderBottomStyle = \"solid\";\n          break;\n\n        default:\n          break;\n      }\n\n      if (data.color) {\n        container.style.borderColor = Util.makeHexColor(\n          data.color[0] | 0,\n          data.color[1] | 0,\n          data.color[2] | 0\n        );\n      } else {\n        // Transparent (invisible) border, so do not draw it at all.\n        container.style.borderWidth = 0;\n      }\n    }\n\n    container.style.left = `${rect[0]}px`;\n    container.style.top = `${rect[1]}px`;\n    container.style.width = `${width}px`;\n    container.style.height = `${height}px`;\n    return container;\n  }\n\n  /**\n   * Create quadrilaterals from the annotation's quadpoints.\n   *\n   * @private\n   * @param {boolean} ignoreBorder\n   * @memberof AnnotationElement\n   * @returns {Array<HTMLSectionElement>}\n   */\n  _createQuadrilaterals(ignoreBorder = false) {\n    if (!this.data.quadPoints) {\n      return null;\n    }\n\n    const quadrilaterals = [];\n    const savedRect = this.data.rect;\n    for (const quadPoint of this.data.quadPoints) {\n      this.data.rect = [\n        quadPoint[2].x,\n        quadPoint[2].y,\n        quadPoint[1].x,\n        quadPoint[1].y,\n      ];\n      quadrilaterals.push(this._createContainer(ignoreBorder));\n    }\n    this.data.rect = savedRect;\n    return quadrilaterals;\n  }\n\n  /**\n   * Create a popup for the annotation's HTML element. This is used for\n   * annotations that do not have a Popup entry in the dictionary, but\n   * are of a type that works with popups (such as Highlight annotations).\n   *\n   * @private\n   * @param {HTMLDivElement|HTMLImageElement|null} trigger\n   * @param {Object} data\n   * @memberof AnnotationElement\n   */\n  _createPopup(trigger, data) {\n    let container = this.container;\n    if (this.quadrilaterals) {\n      trigger = trigger || this.quadrilaterals;\n      container = this.quadrilaterals[0];\n    }\n\n    // If no trigger element is specified, create it.\n    if (!trigger) {\n      trigger = document.createElement(\"div\");\n      trigger.style.height = container.style.height;\n      trigger.style.width = container.style.width;\n      container.appendChild(trigger);\n    }\n\n    const popupElement = new PopupElement({\n      container,\n      trigger,\n      color: data.color,\n      title: data.title,\n      modificationDate: data.modificationDate,\n      contents: data.contents,\n      hideWrapper: true,\n    });\n    const popup = popupElement.render();\n\n    // Position the popup next to the annotation's container.\n    popup.style.left = container.style.width;\n\n    container.appendChild(popup);\n  }\n\n  /**\n   * Render the quadrilaterals of the annotation.\n   *\n   * @private\n   * @param {string} className\n   * @memberof AnnotationElement\n   * @returns {Array<HTMLSectionElement>}\n   */\n  _renderQuadrilaterals(className) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(this.quadrilaterals, \"Missing quadrilaterals during rendering\");\n    }\n\n    for (const quadrilateral of this.quadrilaterals) {\n      quadrilateral.className = className;\n    }\n    return this.quadrilaterals;\n  }\n\n  /**\n   * Render the annotation's HTML element(s).\n   *\n   * @public\n   * @memberof AnnotationElement\n   * @returns {HTMLSectionElement|Array<HTMLSectionElement>}\n   */\n  render() {\n    unreachable(\"Abstract method `AnnotationElement.render` called\");\n  }\n}\n\nclass LinkAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.url ||\n      parameters.data.dest ||\n      parameters.data.action ||\n      parameters.data.isTooltipOnly ||\n      (parameters.data.actions &&\n        (parameters.data.actions.Action ||\n          parameters.data.actions[\"Mouse Up\"] ||\n          parameters.data.actions[\"Mouse Down\"]))\n    );\n    super(parameters, { isRenderable, createQuadrilaterals: true });\n  }\n\n  render() {\n    const { data, linkService } = this;\n    const link = document.createElement(\"a\");\n\n    if (data.url) {\n      addLinkAttributes(link, {\n        url: data.url,\n        target: data.newWindow\n          ? LinkTarget.BLANK\n          : linkService.externalLinkTarget,\n        rel: linkService.externalLinkRel,\n        enabled: linkService.externalLinkEnabled,\n      });\n    } else if (data.action) {\n      this._bindNamedAction(link, data.action);\n    } else if (data.dest) {\n      this._bindLink(link, data.dest);\n    } else if (\n      data.actions &&\n      (data.actions.Action ||\n        data.actions[\"Mouse Up\"] ||\n        data.actions[\"Mouse Down\"]) &&\n      this.enableScripting &&\n      this.hasJSActions\n    ) {\n      this._bindJSAction(link, data);\n    } else {\n      this._bindLink(link, \"\");\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"linkAnnotation\").map(\n        (quadrilateral, index) => {\n          const linkElement = index === 0 ? link : link.cloneNode();\n          quadrilateral.appendChild(linkElement);\n          return quadrilateral;\n        }\n      );\n    }\n\n    this.container.className = \"linkAnnotation\";\n    this.container.appendChild(link);\n    return this.container;\n  }\n\n  /**\n   * Bind internal links to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} destination\n   * @memberof LinkAnnotationElement\n   */\n  _bindLink(link, destination) {\n    link.href = this.linkService.getDestinationHash(destination);\n    link.onclick = () => {\n      if (destination) {\n        this.linkService.goToDestination(destination);\n      }\n      return false;\n    };\n    if (destination || destination === /* isTooltipOnly = */ \"\") {\n      link.className = \"internalLink\";\n    }\n  }\n\n  /**\n   * Bind named actions to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} action\n   * @memberof LinkAnnotationElement\n   */\n  _bindNamedAction(link, action) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    link.onclick = () => {\n      this.linkService.executeNamedAction(action);\n      return false;\n    };\n    link.className = \"internalLink\";\n  }\n\n  /**\n   * Bind JS actions to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} data\n   * @memberof LinkAnnotationElement\n   */\n  _bindJSAction(link, data) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    const map = new Map([\n      [\"Action\", \"onclick\"],\n      [\"Mouse Up\", \"onmouseup\"],\n      [\"Mouse Down\", \"onmousedown\"],\n    ]);\n    for (const name of Object.keys(data.actions)) {\n      const jsName = map.get(name);\n      if (!jsName) {\n        continue;\n      }\n      link[jsName] = () => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: data.id,\n            name,\n          },\n        });\n        return false;\n      };\n    }\n    link.className = \"internalLink\";\n  }\n}\n\nclass TextAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, { isRenderable });\n  }\n\n  render() {\n    this.container.className = \"textAnnotation\";\n\n    const image = document.createElement(\"img\");\n    image.style.height = this.container.style.height;\n    image.style.width = this.container.style.width;\n    image.src =\n      this.imageResourcesPath +\n      \"annotation-\" +\n      this.data.name.toLowerCase() +\n      \".svg\";\n    image.alt = \"[{{type}} Annotation]\";\n    image.dataset.l10nId = \"text_annotation_type\";\n    image.dataset.l10nArgs = JSON.stringify({ type: this.data.name });\n\n    if (!this.data.hasPopup) {\n      this._createPopup(image, this.data);\n    }\n\n    this.container.appendChild(image);\n    return this.container;\n  }\n}\n\nclass WidgetAnnotationElement extends AnnotationElement {\n  render() {\n    // Show only the container for unsupported field types.\n    if (this.data.alternativeText) {\n      this.container.title = this.data.alternativeText;\n    }\n\n    return this.container;\n  }\n\n  _getKeyModifier(event) {\n    return (\n      (navigator.platform.includes(\"Win\") && event.ctrlKey) ||\n      (navigator.platform.includes(\"Mac\") && event.metaKey)\n    );\n  }\n\n  _setEventListener(element, baseName, eventName, valueGetter) {\n    if (baseName.includes(\"mouse\")) {\n      // Mouse events\n      element.addEventListener(baseName, event => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: this.data.id,\n            name: eventName,\n            value: valueGetter(event),\n            shift: event.shiftKey,\n            modifier: this._getKeyModifier(event),\n          },\n        });\n      });\n    } else {\n      // Non mouse event\n      element.addEventListener(baseName, event => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: this.data.id,\n            name: eventName,\n            value: event.target.checked,\n          },\n        });\n      });\n    }\n  }\n\n  _setEventListeners(element, names, getter) {\n    for (const [baseName, eventName] of names) {\n      if (eventName === \"Action\" || this.data.actions?.[eventName]) {\n        this._setEventListener(element, baseName, eventName, getter);\n      }\n    }\n  }\n\n  _dispatchEventFromSandbox(actions, jsEvent) {\n    const setColor = (jsName, styleName, event) => {\n      const color = event.detail[jsName];\n      event.target.style[styleName] = ColorConverters[`${color[0]}_HTML`](\n        color.slice(1)\n      );\n    };\n\n    const commonActions = {\n      display: event => {\n        const hidden = event.detail.display % 2 === 1;\n        event.target.style.visibility = hidden ? \"hidden\" : \"visible\";\n        this.annotationStorage.setValue(this.data.id, {\n          hidden,\n          print: event.detail.display === 0 || event.detail.display === 3,\n        });\n      },\n      print: event => {\n        this.annotationStorage.setValue(this.data.id, {\n          print: event.detail.print,\n        });\n      },\n      hidden: event => {\n        event.target.style.visibility = event.detail.hidden\n          ? \"hidden\"\n          : \"visible\";\n        this.annotationStorage.setValue(this.data.id, {\n          hidden: event.detail.hidden,\n        });\n      },\n      focus: event => {\n        setTimeout(() => event.target.focus({ preventScroll: false }), 0);\n      },\n      userName: event => {\n        // tooltip\n        event.target.title = event.detail.userName;\n      },\n      readonly: event => {\n        if (event.detail.readonly) {\n          event.target.setAttribute(\"readonly\", \"\");\n        } else {\n          event.target.removeAttribute(\"readonly\");\n        }\n      },\n      required: event => {\n        if (event.detail.required) {\n          event.target.setAttribute(\"required\", \"\");\n        } else {\n          event.target.removeAttribute(\"required\");\n        }\n      },\n      bgColor: event => {\n        setColor(\"bgColor\", \"backgroundColor\", event);\n      },\n      fillColor: event => {\n        setColor(\"fillColor\", \"backgroundColor\", event);\n      },\n      fgColor: event => {\n        setColor(\"fgColor\", \"color\", event);\n      },\n      textColor: event => {\n        setColor(\"textColor\", \"color\", event);\n      },\n      borderColor: event => {\n        setColor(\"borderColor\", \"borderColor\", event);\n      },\n      strokeColor: event => {\n        setColor(\"strokeColor\", \"borderColor\", event);\n      },\n    };\n\n    for (const name of Object.keys(jsEvent.detail)) {\n      const action = actions[name] || commonActions[name];\n      if (action) {\n        action(jsEvent);\n      }\n    }\n  }\n}\n\nclass TextWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    const isRenderable =\n      parameters.renderInteractiveForms ||\n      (!parameters.data.hasAppearance && !!parameters.data.fieldValue);\n    super(parameters, { isRenderable });\n  }\n\n  setPropertyOnSiblings(base, key, value, keyInStorage) {\n    const storage = this.annotationStorage;\n    for (const element of document.getElementsByName(base.name)) {\n      if (element !== base) {\n        element[key] = value;\n        const data = Object.create(null);\n        data[keyInStorage] = value;\n        storage.setValue(element.getAttribute(\"id\"), data);\n      }\n    }\n  }\n\n  render() {\n    const storage = this.annotationStorage;\n    const id = this.data.id;\n\n    this.container.className = \"textWidgetAnnotation\";\n\n    let element = null;\n    if (this.renderInteractiveForms) {\n      // NOTE: We cannot set the values using `element.value` below, since it\n      //       prevents the AnnotationLayer rasterizer in `test/driver.js`\n      //       from parsing the elements correctly for the reference tests.\n      const storedData = storage.getValue(id, {\n        value: this.data.fieldValue,\n        valueAsString: this.data.fieldValue,\n      });\n      const textContent = storedData.valueAsString || storedData.value || \"\";\n      const elementData = {\n        userValue: null,\n        formattedValue: null,\n        beforeInputSelectionRange: null,\n        beforeInputValue: null,\n      };\n\n      if (this.data.multiLine) {\n        element = document.createElement(\"textarea\");\n        element.textContent = textContent;\n      } else {\n        element = document.createElement(\"input\");\n        element.type = \"text\";\n        element.setAttribute(\"value\", textContent);\n      }\n\n      elementData.userValue = textContent;\n      element.setAttribute(\"id\", id);\n\n      element.addEventListener(\"input\", event => {\n        storage.setValue(id, { value: event.target.value });\n        this.setPropertyOnSiblings(\n          element,\n          \"value\",\n          event.target.value,\n          \"value\"\n        );\n      });\n\n      let blurListener = event => {\n        if (elementData.formattedValue) {\n          event.target.value = elementData.formattedValue;\n        }\n        // Reset the cursor position to the start of the field (issue 12359).\n        event.target.scrollLeft = 0;\n        elementData.beforeInputSelectionRange = null;\n      };\n\n      if (this.enableScripting && this.hasJSActions) {\n        element.addEventListener(\"focus\", event => {\n          if (elementData.userValue) {\n            event.target.value = elementData.userValue;\n          }\n        });\n\n        element.addEventListener(\"updatefromsandbox\", jsEvent => {\n          const actions = {\n            value(event) {\n              elementData.userValue = event.detail.value || \"\";\n              storage.setValue(id, { value: elementData.userValue.toString() });\n              if (!elementData.formattedValue) {\n                event.target.value = elementData.userValue;\n              }\n            },\n            valueAsString(event) {\n              elementData.formattedValue = event.detail.valueAsString || \"\";\n              if (event.target !== document.activeElement) {\n                // Input hasn't the focus so display formatted string\n                event.target.value = elementData.formattedValue;\n              }\n              storage.setValue(id, {\n                formattedValue: elementData.formattedValue,\n              });\n            },\n            selRange(event) {\n              const [selStart, selEnd] = event.detail.selRange;\n              if (selStart >= 0 && selEnd < event.target.value.length) {\n                event.target.setSelectionRange(selStart, selEnd);\n              }\n            },\n          };\n          this._dispatchEventFromSandbox(actions, jsEvent);\n        });\n\n        // Even if the field hasn't any actions\n        // leaving it can still trigger some actions with Calculate\n        element.addEventListener(\"keydown\", event => {\n          elementData.beforeInputValue = event.target.value;\n          // if the key is one of Escape, Enter or Tab\n          // then the data are committed\n          let commitKey = -1;\n          if (event.key === \"Escape\") {\n            commitKey = 0;\n          } else if (event.key === \"Enter\") {\n            commitKey = 2;\n          } else if (event.key === \"Tab\") {\n            commitKey = 3;\n          }\n          if (commitKey === -1) {\n            return;\n          }\n          // Save the entered value\n          elementData.userValue = event.target.value;\n          this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n            source: this,\n            detail: {\n              id,\n              name: \"Keystroke\",\n              value: event.target.value,\n              willCommit: true,\n              commitKey,\n              selStart: event.target.selectionStart,\n              selEnd: event.target.selectionEnd,\n            },\n          });\n        });\n        const _blurListener = blurListener;\n        blurListener = null;\n        element.addEventListener(\"blur\", event => {\n          if (this._mouseState.isDown) {\n            // Focus out using the mouse: data are committed\n            elementData.userValue = event.target.value;\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value: event.target.value,\n                willCommit: true,\n                commitKey: 1,\n                selStart: event.target.selectionStart,\n                selEnd: event.target.selectionEnd,\n              },\n            });\n          }\n          _blurListener(event);\n        });\n        element.addEventListener(\"mousedown\", event => {\n          elementData.beforeInputValue = event.target.value;\n          elementData.beforeInputSelectionRange = null;\n        });\n        element.addEventListener(\"keyup\", event => {\n          // keyup is triggered after input\n          if (event.target.selectionStart === event.target.selectionEnd) {\n            elementData.beforeInputSelectionRange = null;\n          }\n        });\n        element.addEventListener(\"select\", event => {\n          elementData.beforeInputSelectionRange = [\n            event.target.selectionStart,\n            event.target.selectionEnd,\n          ];\n        });\n\n        if (this.data.actions?.Keystroke) {\n          // We should use beforeinput but this\n          // event isn't available in Firefox\n          element.addEventListener(\"input\", event => {\n            let selStart = -1;\n            let selEnd = -1;\n            if (elementData.beforeInputSelectionRange) {\n              [selStart, selEnd] = elementData.beforeInputSelectionRange;\n            }\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value: elementData.beforeInputValue,\n                change: event.data,\n                willCommit: false,\n                selStart,\n                selEnd,\n              },\n            });\n          });\n        }\n\n        this._setEventListeners(\n          element,\n          [\n            [\"focus\", \"Focus\"],\n            [\"blur\", \"Blur\"],\n            [\"mousedown\", \"Mouse Down\"],\n            [\"mouseenter\", \"Mouse Enter\"],\n            [\"mouseleave\", \"Mouse Exit\"],\n            [\"mouseup\", \"Mouse Up\"],\n          ],\n          event => event.target.value\n        );\n      }\n\n      if (blurListener) {\n        element.addEventListener(\"blur\", blurListener);\n      }\n\n      element.disabled = this.data.readOnly;\n      element.name = this.data.fieldName;\n\n      if (this.data.maxLen !== null) {\n        element.maxLength = this.data.maxLen;\n      }\n\n      if (this.data.comb) {\n        const fieldWidth = this.data.rect[2] - this.data.rect[0];\n        const combWidth = fieldWidth / this.data.maxLen;\n\n        element.classList.add(\"comb\");\n        element.style.letterSpacing = `calc(${combWidth}px - 1ch)`;\n      }\n    } else {\n      element = document.createElement(\"div\");\n      element.textContent = this.data.fieldValue;\n      element.style.verticalAlign = \"middle\";\n      element.style.display = \"table-cell\";\n    }\n\n    this._setTextStyle(element);\n\n    this.container.appendChild(element);\n    return this.container;\n  }\n\n  /**\n   * Apply text styles to the text in the element.\n   *\n   * @private\n   * @param {HTMLDivElement} element\n   * @memberof TextWidgetAnnotationElement\n   */\n  _setTextStyle(element) {\n    const TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\n    const { fontSize, fontColor } = this.data.defaultAppearanceData;\n    const style = element.style;\n\n    // TODO: If the font-size is zero, calculate it based on the height and\n    //       width of the element.\n    // Not setting `style.fontSize` will use the default font-size for now.\n    if (fontSize) {\n      style.fontSize = `${fontSize}px`;\n    }\n\n    style.color = Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n\n    if (this.data.textAlignment !== null) {\n      style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n    }\n  }\n}\n\nclass CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderInteractiveForms });\n  }\n\n  render() {\n    const storage = this.annotationStorage;\n    const data = this.data;\n    const id = data.id;\n    let value = storage.getValue(id, {\n      value:\n        data.fieldValue &&\n        ((data.exportValue && data.exportValue === data.fieldValue) ||\n          (!data.exportValue && data.fieldValue !== \"Off\")),\n    }).value;\n    if (typeof value === \"string\") {\n      // The value has been changed through js and set in annotationStorage.\n      value = value !== \"Off\";\n      storage.setValue(id, { value });\n    }\n\n    this.container.className = \"buttonWidgetAnnotation checkBox\";\n\n    const element = document.createElement(\"input\");\n    element.disabled = data.readOnly;\n    element.type = \"checkbox\";\n    element.name = this.data.fieldName;\n    if (value) {\n      element.setAttribute(\"checked\", true);\n    }\n    element.setAttribute(\"id\", id);\n\n    element.addEventListener(\"change\", function (event) {\n      const name = event.target.name;\n      for (const checkbox of document.getElementsByName(name)) {\n        if (checkbox !== event.target) {\n          checkbox.checked = false;\n          storage.setValue(\n            checkbox.parentNode.getAttribute(\"data-annotation-id\"),\n            { value: false }\n          );\n        }\n      }\n      storage.setValue(id, { value: event.target.checked });\n    });\n\n    if (this.enableScripting && this.hasJSActions) {\n      element.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value(event) {\n            event.target.checked = event.detail.value !== \"Off\";\n            storage.setValue(id, { value: event.target.checked });\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      this._setEventListeners(\n        element,\n        [\n          [\"change\", \"Validate\"],\n          [\"change\", \"Action\"],\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n        ],\n        event => event.target.checked\n      );\n    }\n\n    this.container.appendChild(element);\n    return this.container;\n  }\n}\n\nclass RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderInteractiveForms });\n  }\n\n  render() {\n    this.container.className = \"buttonWidgetAnnotation radioButton\";\n    const storage = this.annotationStorage;\n    const data = this.data;\n    const id = data.id;\n    let value = storage.getValue(id, {\n      value: data.fieldValue === data.buttonValue,\n    }).value;\n    if (typeof value === \"string\") {\n      // The value has been changed through js and set in annotationStorage.\n      value = value !== data.buttonValue;\n      storage.setValue(id, { value });\n    }\n\n    const element = document.createElement(\"input\");\n    element.disabled = data.readOnly;\n    element.type = \"radio\";\n    element.name = data.fieldName;\n    if (value) {\n      element.setAttribute(\"checked\", true);\n    }\n    element.setAttribute(\"id\", id);\n\n    element.addEventListener(\"change\", function (event) {\n      const { target } = event;\n      for (const radio of document.getElementsByName(target.name)) {\n        if (radio !== target) {\n          storage.setValue(radio.getAttribute(\"id\"), { value: false });\n        }\n      }\n      storage.setValue(id, { value: target.checked });\n    });\n\n    if (this.enableScripting && this.hasJSActions) {\n      const pdfButtonValue = data.buttonValue;\n      element.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value(event) {\n            const checked = pdfButtonValue === event.detail.value;\n            for (const radio of document.getElementsByName(event.target.name)) {\n              const radioId = radio.getAttribute(\"id\");\n              radio.checked = radioId === id && checked;\n              storage.setValue(radioId, { value: radio.checked });\n            }\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      this._setEventListeners(\n        element,\n        [\n          [\"change\", \"Validate\"],\n          [\"change\", \"Action\"],\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n        ],\n        event => event.target.checked\n      );\n    }\n\n    this.container.appendChild(element);\n    return this.container;\n  }\n}\n\nclass PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n  render() {\n    // The rendering and functionality of a push button widget annotation is\n    // equal to that of a link annotation, but may have more functionality, such\n    // as performing actions on form fields (resetting, submitting, et cetera).\n    const container = super.render();\n    container.className = \"buttonWidgetAnnotation pushButton\";\n\n    if (this.data.alternativeText) {\n      container.title = this.data.alternativeText;\n    }\n\n    return container;\n  }\n}\n\nclass ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderInteractiveForms });\n  }\n\n  render() {\n    this.container.className = \"choiceWidgetAnnotation\";\n    const storage = this.annotationStorage;\n    const id = this.data.id;\n\n    // For printing/saving we currently only support choice widgets with one\n    // option selection. Therefore, listboxes (#12189) and comboboxes (#12224)\n    // are not properly printed/saved yet, so we only store the first item in\n    // the field value array instead of the entire array. Once support for those\n    // two field types is implemented, we should use the same pattern as the\n    // other interactive widgets where the return value of `getValue`\n    // is used and the full array of field values is stored.\n    storage.getValue(id, {\n      value:\n        this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : undefined,\n    });\n\n    const selectElement = document.createElement(\"select\");\n    selectElement.disabled = this.data.readOnly;\n    selectElement.name = this.data.fieldName;\n    selectElement.setAttribute(\"id\", id);\n\n    if (!this.data.combo) {\n      // List boxes have a size and (optionally) multiple selection.\n      selectElement.size = this.data.options.length;\n      if (this.data.multiSelect) {\n        selectElement.multiple = true;\n      }\n    }\n\n    // Insert the options into the choice field.\n    for (const option of this.data.options) {\n      const optionElement = document.createElement(\"option\");\n      optionElement.textContent = option.displayValue;\n      optionElement.value = option.exportValue;\n      if (this.data.fieldValue.includes(option.exportValue)) {\n        optionElement.setAttribute(\"selected\", true);\n      }\n      selectElement.appendChild(optionElement);\n    }\n\n    const getValue = (event, isExport) => {\n      const name = isExport ? \"value\" : \"textContent\";\n      const options = event.target.options;\n      if (!event.target.multiple) {\n        return options.selectedIndex === -1\n          ? null\n          : options[options.selectedIndex][name];\n      }\n      return Array.prototype.filter\n        .call(options, option => option.selected)\n        .map(option => option[name]);\n    };\n\n    const getItems = event => {\n      const options = event.target.options;\n      return Array.prototype.map.call(options, option => {\n        return { displayValue: option.textContent, exportValue: option.value };\n      });\n    };\n\n    if (this.enableScripting && this.hasJSActions) {\n      selectElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value(event) {\n            const options = selectElement.options;\n            const value = event.detail.value;\n            const values = new Set(Array.isArray(value) ? value : [value]);\n            Array.prototype.forEach.call(options, option => {\n              option.selected = values.has(option.value);\n            });\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n            });\n          },\n          multipleSelection(event) {\n            selectElement.multiple = true;\n          },\n          remove(event) {\n            const options = selectElement.options;\n            const index = event.detail.remove;\n            options[index].selected = false;\n            selectElement.remove(index);\n            if (options.length > 0) {\n              const i = Array.prototype.findIndex.call(\n                options,\n                option => option.selected\n              );\n              if (i === -1) {\n                options[0].selected = true;\n              }\n            }\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n              items: getItems(event),\n            });\n          },\n          clear(event) {\n            while (selectElement.length !== 0) {\n              selectElement.remove(0);\n            }\n            storage.setValue(id, { value: null, items: [] });\n          },\n          insert(event) {\n            const { index, displayValue, exportValue } = event.detail.insert;\n            const optionElement = document.createElement(\"option\");\n            optionElement.textContent = displayValue;\n            optionElement.value = exportValue;\n            selectElement.insertBefore(\n              optionElement,\n              selectElement.children[index]\n            );\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n              items: getItems(event),\n            });\n          },\n          items(event) {\n            const { items } = event.detail;\n            while (selectElement.length !== 0) {\n              selectElement.remove(0);\n            }\n            for (const item of items) {\n              const { displayValue, exportValue } = item;\n              const optionElement = document.createElement(\"option\");\n              optionElement.textContent = displayValue;\n              optionElement.value = exportValue;\n              selectElement.appendChild(optionElement);\n            }\n            if (selectElement.options.length > 0) {\n              selectElement.options[0].selected = true;\n            }\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n              items: getItems(event),\n            });\n          },\n          indices(event) {\n            const indices = new Set(event.detail.indices);\n            const options = event.target.options;\n            Array.prototype.forEach.call(options, (option, i) => {\n              option.selected = indices.has(i);\n            });\n            storage.setValue(id, {\n              value: getValue(event, /* isExport */ true),\n            });\n          },\n          editable(event) {\n            event.target.disabled = !event.detail.editable;\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      selectElement.addEventListener(\"input\", event => {\n        const exportValue = getValue(event, /* isExport */ true);\n        const value = getValue(event, /* isExport */ false);\n        storage.setValue(id, { value: exportValue });\n\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id,\n            name: \"Keystroke\",\n            value,\n            changeEx: exportValue,\n            willCommit: true,\n            commitKey: 1,\n            keyDown: false,\n          },\n        });\n      });\n\n      this._setEventListeners(\n        selectElement,\n        [\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n          [\"input\", \"Action\"],\n        ],\n        event => event.target.checked\n      );\n    } else {\n      selectElement.addEventListener(\"input\", function (event) {\n        storage.setValue(id, { value: getValue(event) });\n      });\n    }\n\n    this.container.appendChild(selectElement);\n    return this.container;\n  }\n}\n\nclass PopupAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(parameters.data.title || parameters.data.contents);\n    super(parameters, { isRenderable });\n  }\n\n  render() {\n    // Do not render popup annotations for parent elements with these types as\n    // they create the popups themselves (because of custom trigger divs).\n    const IGNORE_TYPES = [\n      \"Line\",\n      \"Square\",\n      \"Circle\",\n      \"PolyLine\",\n      \"Polygon\",\n      \"Ink\",\n    ];\n\n    this.container.className = \"popupAnnotation\";\n\n    if (IGNORE_TYPES.includes(this.data.parentType)) {\n      return this.container;\n    }\n\n    const selector = `[data-annotation-id=\"${this.data.parentId}\"]`;\n    const parentElements = this.layer.querySelectorAll(selector);\n    if (parentElements.length === 0) {\n      return this.container;\n    }\n\n    const popup = new PopupElement({\n      container: this.container,\n      trigger: Array.from(parentElements),\n      color: this.data.color,\n      title: this.data.title,\n      modificationDate: this.data.modificationDate,\n      contents: this.data.contents,\n    });\n\n    // Position the popup next to the parent annotation's container.\n    // PDF viewers ignore a popup annotation's rectangle.\n    const page = this.page;\n    const rect = Util.normalizeRect([\n      this.data.parentRect[0],\n      page.view[3] - this.data.parentRect[1] + page.view[1],\n      this.data.parentRect[2],\n      page.view[3] - this.data.parentRect[3] + page.view[1],\n    ]);\n    const popupLeft =\n      rect[0] + this.data.parentRect[2] - this.data.parentRect[0];\n    const popupTop = rect[1];\n\n    this.container.style.transformOrigin = `${-popupLeft}px ${-popupTop}px`;\n    this.container.style.left = `${popupLeft}px`;\n    this.container.style.top = `${popupTop}px`;\n\n    this.container.appendChild(popup.render());\n    return this.container;\n  }\n}\n\nclass PopupElement {\n  constructor(parameters) {\n    this.container = parameters.container;\n    this.trigger = parameters.trigger;\n    this.color = parameters.color;\n    this.title = parameters.title;\n    this.modificationDate = parameters.modificationDate;\n    this.contents = parameters.contents;\n    this.hideWrapper = parameters.hideWrapper || false;\n\n    this.pinned = false;\n  }\n\n  render() {\n    const BACKGROUND_ENLIGHT = 0.7;\n\n    const wrapper = document.createElement(\"div\");\n    wrapper.className = \"popupWrapper\";\n\n    // For Popup annotations we hide the entire section because it contains\n    // only the popup. However, for Text annotations without a separate Popup\n    // annotation, we cannot hide the entire container as the image would\n    // disappear too. In that special case, hiding the wrapper suffices.\n    this.hideElement = this.hideWrapper ? wrapper : this.container;\n    this.hideElement.hidden = true;\n\n    const popup = document.createElement(\"div\");\n    popup.className = \"popup\";\n\n    const color = this.color;\n    if (color) {\n      // Enlighten the color.\n      const r = BACKGROUND_ENLIGHT * (255 - color[0]) + color[0];\n      const g = BACKGROUND_ENLIGHT * (255 - color[1]) + color[1];\n      const b = BACKGROUND_ENLIGHT * (255 - color[2]) + color[2];\n      popup.style.backgroundColor = Util.makeHexColor(r | 0, g | 0, b | 0);\n    }\n\n    const title = document.createElement(\"h1\");\n    title.textContent = this.title;\n    popup.appendChild(title);\n\n    // The modification date is shown in the popup instead of the creation\n    // date if it is available and can be parsed correctly, which is\n    // consistent with other viewers such as Adobe Acrobat.\n    const dateObject = PDFDateString.toDateObject(this.modificationDate);\n    if (dateObject) {\n      const modificationDate = document.createElement(\"span\");\n      modificationDate.textContent = \"{{date}}, {{time}}\";\n      modificationDate.dataset.l10nId = \"annotation_date_string\";\n      modificationDate.dataset.l10nArgs = JSON.stringify({\n        date: dateObject.toLocaleDateString(),\n        time: dateObject.toLocaleTimeString(),\n      });\n      popup.appendChild(modificationDate);\n    }\n\n    const contents = this._formatContents(this.contents);\n    popup.appendChild(contents);\n\n    if (!Array.isArray(this.trigger)) {\n      this.trigger = [this.trigger];\n    }\n\n    // Attach the event listeners to the trigger element.\n    for (const element of this.trigger) {\n      element.addEventListener(\"click\", this._toggle.bind(this));\n      element.addEventListener(\"mouseover\", this._show.bind(this, false));\n      element.addEventListener(\"mouseout\", this._hide.bind(this, false));\n    }\n    popup.addEventListener(\"click\", this._hide.bind(this, true));\n\n    wrapper.appendChild(popup);\n    return wrapper;\n  }\n\n  /**\n   * Format the contents of the popup by adding newlines where necessary.\n   *\n   * @private\n   * @param {string} contents\n   * @memberof PopupElement\n   * @returns {HTMLParagraphElement}\n   */\n  _formatContents(contents) {\n    const p = document.createElement(\"p\");\n    const lines = contents.split(/(?:\\r\\n?|\\n)/);\n    for (let i = 0, ii = lines.length; i < ii; ++i) {\n      const line = lines[i];\n      p.appendChild(document.createTextNode(line));\n      if (i < ii - 1) {\n        p.appendChild(document.createElement(\"br\"));\n      }\n    }\n    return p;\n  }\n\n  /**\n   * Toggle the visibility of the popup.\n   *\n   * @private\n   * @memberof PopupElement\n   */\n  _toggle() {\n    if (this.pinned) {\n      this._hide(true);\n    } else {\n      this._show(true);\n    }\n  }\n\n  /**\n   * Show the popup.\n   *\n   * @private\n   * @param {boolean} pin\n   * @memberof PopupElement\n   */\n  _show(pin = false) {\n    if (pin) {\n      this.pinned = true;\n    }\n    if (this.hideElement.hidden) {\n      this.hideElement.hidden = false;\n      this.container.style.zIndex += 1;\n    }\n  }\n\n  /**\n   * Hide the popup.\n   *\n   * @private\n   * @param {boolean} unpin\n   * @memberof PopupElement\n   */\n  _hide(unpin = true) {\n    if (unpin) {\n      this.pinned = false;\n    }\n    if (!this.hideElement.hidden && !this.pinned) {\n      this.hideElement.hidden = true;\n      this.container.style.zIndex -= 1;\n    }\n  }\n}\n\nclass FreeTextAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"freeTextAnnotation\";\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass LineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"lineAnnotation\";\n\n    // Create an invisible line with the same starting and ending coordinates\n    // that acts as the trigger for the popup. Only the line itself should\n    // trigger the popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // PDF coordinates are calculated from a bottom left origin, so transform\n    // the line coordinates to a top left origin for the SVG element.\n    const line = this.svgFactory.createElement(\"svg:line\");\n    line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n    line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n    line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n    line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n    line.setAttribute(\"stroke\", \"transparent\");\n\n    svg.appendChild(line);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the line instead\n    // of to the entire container (which is the default).\n    this._createPopup(line, data);\n\n    return this.container;\n  }\n}\n\nclass SquareAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"squareAnnotation\";\n\n    // Create an invisible square with the same rectangle that acts as the\n    // trigger for the popup. Only the square itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // The browser draws half of the borders inside the square and half of\n    // the borders outside the square by default. This behavior cannot be\n    // changed programmatically, so correct for that here.\n    const borderWidth = data.borderStyle.width;\n    const square = this.svgFactory.createElement(\"svg:rect\");\n    square.setAttribute(\"x\", borderWidth / 2);\n    square.setAttribute(\"y\", borderWidth / 2);\n    square.setAttribute(\"width\", width - borderWidth);\n    square.setAttribute(\"height\", height - borderWidth);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    square.setAttribute(\"stroke-width\", borderWidth || 1);\n    square.setAttribute(\"stroke\", \"transparent\");\n    square.setAttribute(\"fill\", \"none\");\n\n    svg.appendChild(square);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the square instead\n    // of to the entire container (which is the default).\n    this._createPopup(square, data);\n\n    return this.container;\n  }\n}\n\nclass CircleAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"circleAnnotation\";\n\n    // Create an invisible circle with the same ellipse that acts as the\n    // trigger for the popup. Only the circle itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // The browser draws half of the borders inside the circle and half of\n    // the borders outside the circle by default. This behavior cannot be\n    // changed programmatically, so correct for that here.\n    const borderWidth = data.borderStyle.width;\n    const circle = this.svgFactory.createElement(\"svg:ellipse\");\n    circle.setAttribute(\"cx\", width / 2);\n    circle.setAttribute(\"cy\", height / 2);\n    circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n    circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    circle.setAttribute(\"stroke-width\", borderWidth || 1);\n    circle.setAttribute(\"stroke\", \"transparent\");\n    circle.setAttribute(\"fill\", \"none\");\n\n    svg.appendChild(circle);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the circle instead\n    // of to the entire container (which is the default).\n    this._createPopup(circle, data);\n\n    return this.container;\n  }\n}\n\nclass PolylineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n\n    this.containerClassName = \"polylineAnnotation\";\n    this.svgElementName = \"svg:polyline\";\n  }\n\n  render() {\n    this.container.className = this.containerClassName;\n\n    // Create an invisible polyline with the same points that acts as the\n    // trigger for the popup. Only the polyline itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    // Convert the vertices array to a single points string that the SVG\n    // polyline element expects (\"x1,y1 x2,y2 ...\"). PDF coordinates are\n    // calculated from a bottom left origin, so transform the polyline\n    // coordinates to a top left origin for the SVG element.\n    let points = [];\n    for (const coordinate of data.vertices) {\n      const x = coordinate.x - data.rect[0];\n      const y = data.rect[3] - coordinate.y;\n      points.push(x + \",\" + y);\n    }\n    points = points.join(\" \");\n\n    const polyline = this.svgFactory.createElement(this.svgElementName);\n    polyline.setAttribute(\"points\", points);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n    polyline.setAttribute(\"stroke\", \"transparent\");\n    polyline.setAttribute(\"fill\", \"none\");\n\n    svg.appendChild(polyline);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the polyline\n    // instead of to the entire container (which is the default).\n    this._createPopup(polyline, data);\n\n    return this.container;\n  }\n}\n\nclass PolygonAnnotationElement extends PolylineAnnotationElement {\n  constructor(parameters) {\n    // Polygons are specific forms of polylines, so reuse their logic.\n    super(parameters);\n\n    this.containerClassName = \"polygonAnnotation\";\n    this.svgElementName = \"svg:polygon\";\n  }\n}\n\nclass CaretAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"caretAnnotation\";\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass InkAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n\n    this.containerClassName = \"inkAnnotation\";\n\n    // Use the polyline SVG element since it allows us to use coordinates\n    // directly and to draw both straight lines and curves.\n    this.svgElementName = \"svg:polyline\";\n  }\n\n  render() {\n    this.container.className = this.containerClassName;\n\n    // Create an invisible polyline with the same points that acts as the\n    // trigger for the popup.\n    const data = this.data;\n    const width = data.rect[2] - data.rect[0];\n    const height = data.rect[3] - data.rect[1];\n    const svg = this.svgFactory.create(width, height);\n\n    for (const inkList of data.inkLists) {\n      // Convert the ink list to a single points string that the SVG\n      // polyline element expects (\"x1,y1 x2,y2 ...\"). PDF coordinates are\n      // calculated from a bottom left origin, so transform the polyline\n      // coordinates to a top left origin for the SVG element.\n      let points = [];\n      for (const coordinate of inkList) {\n        const x = coordinate.x - data.rect[0];\n        const y = data.rect[3] - coordinate.y;\n        points.push(`${x},${y}`);\n      }\n      points = points.join(\" \");\n\n      const polyline = this.svgFactory.createElement(this.svgElementName);\n      polyline.setAttribute(\"points\", points);\n      // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n      // won't be possible to open/close the popup (note e.g. issue 11122).\n      polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n      polyline.setAttribute(\"stroke\", \"transparent\");\n      polyline.setAttribute(\"fill\", \"none\");\n\n      // Create the popup ourselves so that we can bind it to the polyline\n      // instead of to the entire container (which is the default).\n      this._createPopup(polyline, data);\n\n      svg.appendChild(polyline);\n    }\n\n    this.container.append(svg);\n    return this.container;\n  }\n}\n\nclass HighlightAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"highlightAnnotation\");\n    }\n\n    this.container.className = \"highlightAnnotation\";\n    return this.container;\n  }\n}\n\nclass UnderlineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"underlineAnnotation\");\n    }\n\n    this.container.className = \"underlineAnnotation\";\n    return this.container;\n  }\n}\n\nclass SquigglyAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"squigglyAnnotation\");\n    }\n\n    this.container.className = \"squigglyAnnotation\";\n    return this.container;\n  }\n}\n\nclass StrikeOutAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, {\n      isRenderable,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n\n    if (this.quadrilaterals) {\n      return this._renderQuadrilaterals(\"strikeoutAnnotation\");\n    }\n\n    this.container.className = \"strikeoutAnnotation\";\n    return this.container;\n  }\n}\n\nclass StampAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const isRenderable = !!(\n      parameters.data.hasPopup ||\n      parameters.data.title ||\n      parameters.data.contents\n    );\n    super(parameters, { isRenderable, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.className = \"stampAnnotation\";\n\n    if (!this.data.hasPopup) {\n      this._createPopup(null, this.data);\n    }\n    return this.container;\n  }\n}\n\nclass FileAttachmentAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: true });\n\n    const { filename, content } = this.data.file;\n    this.filename = getFilenameFromUrl(filename);\n    this.content = content;\n\n    this.linkService.eventBus?.dispatch(\"fileattachmentannotation\", {\n      source: this,\n      id: stringToPDFString(filename),\n      filename,\n      content,\n    });\n  }\n\n  render() {\n    this.container.className = \"fileAttachmentAnnotation\";\n\n    const trigger = document.createElement(\"div\");\n    trigger.style.height = this.container.style.height;\n    trigger.style.width = this.container.style.width;\n    trigger.addEventListener(\"dblclick\", this._download.bind(this));\n\n    if (!this.data.hasPopup && (this.data.title || this.data.contents)) {\n      this._createPopup(trigger, this.data);\n    }\n\n    this.container.appendChild(trigger);\n    return this.container;\n  }\n\n  /**\n   * Download the file attachment associated with this annotation.\n   *\n   * @private\n   * @memberof FileAttachmentAnnotationElement\n   */\n  _download() {\n    this.downloadManager?.openOrDownloadData(\n      this.container,\n      this.content,\n      this.filename\n    );\n  }\n}\n\n/**\n * @typedef {Object} AnnotationLayerParameters\n * @property {PageViewport} viewport\n * @property {HTMLDivElement} div\n * @property {Array} annotations\n * @property {PDFPage} page\n * @property {IPDFLinkService} linkService\n * @property {DownloadManager} downloadManager\n * @property {string} [imageResourcesPath] - Path for image resources, mainly\n *   for annotation icons. Include trailing slash.\n * @property {boolean} renderInteractiveForms\n * @property {boolean} [enableScripting] - Enable embedded script execution.\n * @property {boolean} [hasJSActions] - Some fields have JS actions.\n *   The default value is `false`.\n */\n\nclass AnnotationLayer {\n  /**\n   * Render a new annotation layer with all annotation elements.\n   *\n   * @public\n   * @param {AnnotationLayerParameters} parameters\n   * @memberof AnnotationLayer\n   */\n  static render(parameters) {\n    const sortedAnnotations = [],\n      popupAnnotations = [];\n    // Ensure that Popup annotations are handled last, since they're dependant\n    // upon the parent annotation having already been rendered (please refer to\n    // the `PopupAnnotationElement.render` method); fixes issue 11362.\n    for (const data of parameters.annotations) {\n      if (!data) {\n        continue;\n      }\n      if (data.annotationType === AnnotationType.POPUP) {\n        popupAnnotations.push(data);\n        continue;\n      }\n      sortedAnnotations.push(data);\n    }\n    if (popupAnnotations.length) {\n      sortedAnnotations.push(...popupAnnotations);\n    }\n\n    for (const data of sortedAnnotations) {\n      const element = AnnotationElementFactory.create({\n        data,\n        layer: parameters.div,\n        page: parameters.page,\n        viewport: parameters.viewport,\n        linkService: parameters.linkService,\n        downloadManager: parameters.downloadManager,\n        imageResourcesPath: parameters.imageResourcesPath || \"\",\n        renderInteractiveForms: parameters.renderInteractiveForms !== false,\n        svgFactory: new DOMSVGFactory(),\n        annotationStorage:\n          parameters.annotationStorage || new AnnotationStorage(),\n        enableScripting: parameters.enableScripting,\n        hasJSActions: parameters.hasJSActions,\n        mouseState: parameters.mouseState || { isDown: false },\n      });\n      if (element.isRenderable) {\n        const rendered = element.render();\n        if (data.hidden) {\n          rendered.style.visibility = \"hidden\";\n        }\n        if (Array.isArray(rendered)) {\n          for (const renderedElement of rendered) {\n            parameters.div.appendChild(renderedElement);\n          }\n        } else {\n          if (element instanceof PopupAnnotationElement) {\n            // Popup annotation elements should not be on top of other\n            // annotation elements to prevent interfering with mouse events.\n            parameters.div.prepend(rendered);\n          } else {\n            parameters.div.appendChild(rendered);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Update the annotation elements on existing annotation layer.\n   *\n   * @public\n   * @param {AnnotationLayerParameters} parameters\n   * @memberof AnnotationLayer\n   */\n  static update(parameters) {\n    const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n    for (const data of parameters.annotations) {\n      const elements = parameters.div.querySelectorAll(\n        `[data-annotation-id=\"${data.id}\"]`\n      );\n      if (elements) {\n        for (const element of elements) {\n          element.style.transform = transform;\n        }\n      }\n    }\n    parameters.div.hidden = false;\n  }\n}\n\nexport { AnnotationLayer };\n","/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * PLEASE NOTE: This file is currently imported in both the `../display/` and\n *              `../scripting_api/` folders, hence be EXTREMELY careful about\n *              introducing any dependencies here since that can lead to an\n *              unexpected/unnecessary size increase of the *built* files.\n */\n\nfunction makeColorComp(n) {\n  return Math.floor(Math.max(0, Math.min(1, n)) * 255)\n    .toString(16)\n    .padStart(2, \"0\");\n}\n\n// PDF specifications section 10.3\nclass ColorConverters {\n  static CMYK_G([c, y, m, k]) {\n    return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\n  }\n\n  static G_CMYK([g]) {\n    return [\"CMYK\", 0, 0, 0, 1 - g];\n  }\n\n  static G_RGB([g]) {\n    return [\"RGB\", g, g, g];\n  }\n\n  static G_HTML([g]) {\n    const G = makeColorComp(g);\n    return `#${G}${G}${G}`;\n  }\n\n  static RGB_G([r, g, b]) {\n    return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\n  }\n\n  static RGB_HTML([r, g, b]) {\n    const R = makeColorComp(r);\n    const G = makeColorComp(g);\n    const B = makeColorComp(b);\n    return `#${R}${G}${B}`;\n  }\n\n  static T_HTML() {\n    return \"#00000000\";\n  }\n\n  static CMYK_RGB([c, y, m, k]) {\n    return [\n      \"RGB\",\n      1 - Math.min(1, c + k),\n      1 - Math.min(1, m + k),\n      1 - Math.min(1, y + k),\n    ];\n  }\n\n  static CMYK_HTML(components) {\n    return this.RGB_HTML(this.CMYK_RGB(components));\n  }\n\n  static RGB_CMYK([r, g, b]) {\n    const c = 1 - r;\n    const m = 1 - g;\n    const y = 1 - b;\n    const k = Math.min(c, m, y);\n    return [\"CMYK\", c, m, y, k];\n  }\n}\n\nexport { ColorConverters };\n","/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  createPromiseCapability,\n  Util,\n} from \"../shared/util.js\";\n\n/**\n * Text layer render parameters.\n *\n * @typedef {Object} TextLayerRenderParameters\n * @property {import(\"./api\").TextContent} [textContent] - Text content to\n *   render (the object is returned by the page's `getTextContent` method).\n * @property {ReadableStream} [textContentStream] - Text content stream to\n *   render (the stream is returned by the page's `streamTextContent` method).\n * @property {HTMLElement} container - HTML element that will contain text runs.\n * @property {import(\"./display_utils\").PageViewport} viewport - The target\n *   viewport to properly layout the text runs.\n * @property {Array<HTMLElement>} [textDivs] - HTML elements that are correspond\n *   to the text items of the textContent input. This is output and shall be\n *   initially be set to empty array.\n * @property {Array<string>} [textContentItemsStr] - Strings that correspond to\n *    the `str` property of the text items of textContent input. This is output\n *   and shall be initially be set to empty array.\n * @property {number} [timeout] - Delay in milliseconds before rendering of the\n *   text runs occurs.\n * @property {boolean} [enhanceTextSelection] - Whether to turn on the text\n *   selection enhancement.\n */\n\nconst MAX_TEXT_DIVS_TO_RENDER = 100000;\nconst DEFAULT_FONT_SIZE = 30;\nconst DEFAULT_FONT_ASCENT = 0.8;\nconst ascentCache = new Map();\nconst AllWhitespaceRegexp = /^\\s+$/g;\n\nfunction getAscent(fontFamily, ctx) {\n  const cachedAscent = ascentCache.get(fontFamily);\n  if (cachedAscent) {\n    return cachedAscent;\n  }\n\n  ctx.save();\n  ctx.font = `${DEFAULT_FONT_SIZE}px ${fontFamily}`;\n  const metrics = ctx.measureText(\"\");\n\n  // Both properties aren't available by default in Firefox.\n  let ascent = metrics.fontBoundingBoxAscent;\n  let descent = Math.abs(metrics.fontBoundingBoxDescent);\n  if (ascent) {\n    ctx.restore();\n    const ratio = ascent / (ascent + descent);\n    ascentCache.set(fontFamily, ratio);\n    return ratio;\n  }\n\n  // Try basic heuristic to guess ascent/descent.\n  // Draw a g with baseline at 0,0 and then get the line\n  // number where a pixel has non-null red component (starting\n  // from bottom).\n  ctx.strokeStyle = \"red\";\n  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n  ctx.strokeText(\"g\", 0, 0);\n  let pixels = ctx.getImageData(\n    0,\n    0,\n    DEFAULT_FONT_SIZE,\n    DEFAULT_FONT_SIZE\n  ).data;\n  descent = 0;\n  for (let i = pixels.length - 1 - 3; i >= 0; i -= 4) {\n    if (pixels[i] > 0) {\n      descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);\n      break;\n    }\n  }\n\n  // Draw an A with baseline at 0,DEFAULT_FONT_SIZE and then get the line\n  // number where a pixel has non-null red component (starting\n  // from top).\n  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n  ctx.strokeText(\"A\", 0, DEFAULT_FONT_SIZE);\n  pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n  ascent = 0;\n  for (let i = 0, ii = pixels.length; i < ii; i += 4) {\n    if (pixels[i] > 0) {\n      ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);\n      break;\n    }\n  }\n\n  ctx.restore();\n\n  if (ascent) {\n    const ratio = ascent / (ascent + descent);\n    ascentCache.set(fontFamily, ratio);\n    return ratio;\n  }\n\n  ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);\n  return DEFAULT_FONT_ASCENT;\n}\n\nfunction appendText(task, geom, styles, ctx) {\n  // Initialize all used properties to keep the caches monomorphic.\n  const textDiv = document.createElement(\"span\");\n  const textDivProperties = {\n    angle: 0,\n    canvasWidth: 0,\n    hasText: geom.str !== \"\",\n    hasEOL: geom.hasEOL,\n    originalTransform: null,\n    paddingBottom: 0,\n    paddingLeft: 0,\n    paddingRight: 0,\n    paddingTop: 0,\n    scale: 1,\n  };\n\n  task._textDivs.push(textDiv);\n\n  const tx = Util.transform(task._viewport.transform, geom.transform);\n  let angle = Math.atan2(tx[1], tx[0]);\n  const style = styles[geom.fontName];\n  if (style.vertical) {\n    angle += Math.PI / 2;\n  }\n  const fontHeight = Math.hypot(tx[2], tx[3]);\n  const fontAscent = fontHeight * getAscent(style.fontFamily, ctx);\n\n  let left, top;\n  if (angle === 0) {\n    left = tx[4];\n    top = tx[5] - fontAscent;\n  } else {\n    left = tx[4] + fontAscent * Math.sin(angle);\n    top = tx[5] - fontAscent * Math.cos(angle);\n  }\n  // Setting the style properties individually, rather than all at once,\n  // should be OK since the `textDiv` isn't appended to the document yet.\n  textDiv.style.left = `${left}px`;\n  textDiv.style.top = `${top}px`;\n  textDiv.style.fontSize = `${fontHeight}px`;\n  textDiv.style.fontFamily = style.fontFamily;\n\n  // Keeps screen readers from pausing on every new text span.\n  textDiv.setAttribute(\"role\", \"presentation\");\n\n  textDiv.textContent = geom.str;\n  // geom.dir may be 'ttb' for vertical texts.\n  textDiv.dir = geom.dir;\n\n  // `fontName` is only used by the FontInspector, and we only use `dataset`\n  // here to make the font name available in the debugger.\n  if (task._fontInspectorEnabled) {\n    textDiv.dataset.fontName = geom.fontName;\n  }\n  if (angle !== 0) {\n    textDivProperties.angle = angle * (180 / Math.PI);\n  }\n  // We don't bother scaling single-char text divs, because it has very\n  // little effect on text highlighting. This makes scrolling on docs with\n  // lots of such divs a lot faster.\n  let shouldScaleText = false;\n  if (\n    geom.str.length > 1 ||\n    (task._enhanceTextSelection && AllWhitespaceRegexp.test(geom.str))\n  ) {\n    shouldScaleText = true;\n  } else if (geom.transform[0] !== geom.transform[3]) {\n    const absScaleX = Math.abs(geom.transform[0]),\n      absScaleY = Math.abs(geom.transform[3]);\n    // When the horizontal/vertical scaling differs significantly, also scale\n    // even single-char text to improve highlighting (fixes issue11713.pdf).\n    if (\n      absScaleX !== absScaleY &&\n      Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5\n    ) {\n      shouldScaleText = true;\n    }\n  }\n  if (shouldScaleText) {\n    if (style.vertical) {\n      textDivProperties.canvasWidth = geom.height * task._viewport.scale;\n    } else {\n      textDivProperties.canvasWidth = geom.width * task._viewport.scale;\n    }\n  }\n  task._textDivProperties.set(textDiv, textDivProperties);\n  if (task._textContentStream) {\n    task._layoutText(textDiv);\n  }\n\n  if (task._enhanceTextSelection && textDivProperties.hasText) {\n    let angleCos = 1,\n      angleSin = 0;\n    if (angle !== 0) {\n      angleCos = Math.cos(angle);\n      angleSin = Math.sin(angle);\n    }\n    const divWidth =\n      (style.vertical ? geom.height : geom.width) * task._viewport.scale;\n    const divHeight = fontHeight;\n\n    let m, b;\n    if (angle !== 0) {\n      m = [angleCos, angleSin, -angleSin, angleCos, left, top];\n      b = Util.getAxialAlignedBoundingBox([0, 0, divWidth, divHeight], m);\n    } else {\n      b = [left, top, left + divWidth, top + divHeight];\n    }\n\n    task._bounds.push({\n      left: b[0],\n      top: b[1],\n      right: b[2],\n      bottom: b[3],\n      div: textDiv,\n      size: [divWidth, divHeight],\n      m,\n    });\n  }\n}\n\nfunction render(task) {\n  if (task._canceled) {\n    return;\n  }\n  const textDivs = task._textDivs;\n  const capability = task._capability;\n  const textDivsLength = textDivs.length;\n\n  // No point in rendering many divs as it would make the browser\n  // unusable even after the divs are rendered.\n  if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n    task._renderingDone = true;\n    capability.resolve();\n    return;\n  }\n\n  if (!task._textContentStream) {\n    for (let i = 0; i < textDivsLength; i++) {\n      task._layoutText(textDivs[i]);\n    }\n  }\n\n  task._renderingDone = true;\n  capability.resolve();\n}\n\nfunction findPositiveMin(ts, offset, count) {\n  let result = 0;\n  for (let i = 0; i < count; i++) {\n    const t = ts[offset++];\n    if (t > 0) {\n      result = result ? Math.min(t, result) : t;\n    }\n  }\n  return result;\n}\n\nfunction expand(task) {\n  const bounds = task._bounds;\n  const viewport = task._viewport;\n\n  const expanded = expandBounds(viewport.width, viewport.height, bounds);\n  for (let i = 0; i < expanded.length; i++) {\n    const div = bounds[i].div;\n    const divProperties = task._textDivProperties.get(div);\n    if (divProperties.angle === 0) {\n      divProperties.paddingLeft = bounds[i].left - expanded[i].left;\n      divProperties.paddingTop = bounds[i].top - expanded[i].top;\n      divProperties.paddingRight = expanded[i].right - bounds[i].right;\n      divProperties.paddingBottom = expanded[i].bottom - bounds[i].bottom;\n      task._textDivProperties.set(div, divProperties);\n      continue;\n    }\n    // Box is rotated -- trying to find padding so rotated div will not\n    // exceed its expanded bounds.\n    const e = expanded[i],\n      b = bounds[i];\n    const m = b.m,\n      c = m[0],\n      s = m[1];\n    // Finding intersections with expanded box.\n    const points = [[0, 0], [0, b.size[1]], [b.size[0], 0], b.size];\n    const ts = new Float64Array(64);\n    for (let j = 0, jj = points.length; j < jj; j++) {\n      const t = Util.applyTransform(points[j], m);\n      ts[j + 0] = c && (e.left - t[0]) / c;\n      ts[j + 4] = s && (e.top - t[1]) / s;\n      ts[j + 8] = c && (e.right - t[0]) / c;\n      ts[j + 12] = s && (e.bottom - t[1]) / s;\n\n      ts[j + 16] = s && (e.left - t[0]) / -s;\n      ts[j + 20] = c && (e.top - t[1]) / c;\n      ts[j + 24] = s && (e.right - t[0]) / -s;\n      ts[j + 28] = c && (e.bottom - t[1]) / c;\n\n      ts[j + 32] = c && (e.left - t[0]) / -c;\n      ts[j + 36] = s && (e.top - t[1]) / -s;\n      ts[j + 40] = c && (e.right - t[0]) / -c;\n      ts[j + 44] = s && (e.bottom - t[1]) / -s;\n\n      ts[j + 48] = s && (e.left - t[0]) / s;\n      ts[j + 52] = c && (e.top - t[1]) / -c;\n      ts[j + 56] = s && (e.right - t[0]) / s;\n      ts[j + 60] = c && (e.bottom - t[1]) / -c;\n    }\n    // Not based on math, but to simplify calculations, using cos and sin\n    // absolute values to not exceed the box (it can but insignificantly).\n    const boxScale = 1 + Math.min(Math.abs(c), Math.abs(s));\n    divProperties.paddingLeft = findPositiveMin(ts, 32, 16) / boxScale;\n    divProperties.paddingTop = findPositiveMin(ts, 48, 16) / boxScale;\n    divProperties.paddingRight = findPositiveMin(ts, 0, 16) / boxScale;\n    divProperties.paddingBottom = findPositiveMin(ts, 16, 16) / boxScale;\n    task._textDivProperties.set(div, divProperties);\n  }\n}\n\nfunction expandBounds(width, height, boxes) {\n  const bounds = boxes.map(function (box, i) {\n    return {\n      x1: box.left,\n      y1: box.top,\n      x2: box.right,\n      y2: box.bottom,\n      index: i,\n      x1New: undefined,\n      x2New: undefined,\n    };\n  });\n  expandBoundsLTR(width, bounds);\n\n  const expanded = new Array(boxes.length);\n  for (const b of bounds) {\n    const i = b.index;\n    expanded[i] = {\n      left: b.x1New,\n      top: 0,\n      right: b.x2New,\n      bottom: 0,\n    };\n  }\n\n  // Rotating on 90 degrees and extending extended boxes. Reusing the bounds\n  // array and objects.\n  boxes.map(function (box, i) {\n    const e = expanded[i],\n      b = bounds[i];\n    b.x1 = box.top;\n    b.y1 = width - e.right;\n    b.x2 = box.bottom;\n    b.y2 = width - e.left;\n    b.index = i;\n    b.x1New = undefined;\n    b.x2New = undefined;\n  });\n  expandBoundsLTR(height, bounds);\n\n  for (const b of bounds) {\n    const i = b.index;\n    expanded[i].top = b.x1New;\n    expanded[i].bottom = b.x2New;\n  }\n  return expanded;\n}\n\nfunction expandBoundsLTR(width, bounds) {\n  // Sorting by x1 coordinate and walk by the bounds in the same order.\n  bounds.sort(function (a, b) {\n    return a.x1 - b.x1 || a.index - b.index;\n  });\n\n  // First we see on the horizon is a fake boundary.\n  const fakeBoundary = {\n    x1: -Infinity,\n    y1: -Infinity,\n    x2: 0,\n    y2: Infinity,\n    index: -1,\n    x1New: 0,\n    x2New: 0,\n  };\n  const horizon = [\n    {\n      start: -Infinity,\n      end: Infinity,\n      boundary: fakeBoundary,\n    },\n  ];\n\n  for (const boundary of bounds) {\n    // Searching for the affected part of horizon.\n    // TODO red-black tree or simple binary search\n    let i = 0;\n    while (i < horizon.length && horizon[i].end <= boundary.y1) {\n      i++;\n    }\n    let j = horizon.length - 1;\n    while (j >= 0 && horizon[j].start >= boundary.y2) {\n      j--;\n    }\n\n    let horizonPart, affectedBoundary;\n    let q,\n      k,\n      maxXNew = -Infinity;\n    for (q = i; q <= j; q++) {\n      horizonPart = horizon[q];\n      affectedBoundary = horizonPart.boundary;\n      let xNew;\n      if (affectedBoundary.x2 > boundary.x1) {\n        // In the middle of the previous element, new x shall be at the\n        // boundary start. Extending if further if the affected boundary\n        // placed on top of the current one.\n        xNew =\n          affectedBoundary.index > boundary.index\n            ? affectedBoundary.x1New\n            : boundary.x1;\n      } else if (affectedBoundary.x2New === undefined) {\n        // We have some space in between, new x in middle will be a fair\n        // choice.\n        xNew = (affectedBoundary.x2 + boundary.x1) / 2;\n      } else {\n        // Affected boundary has x2new set, using it as new x.\n        xNew = affectedBoundary.x2New;\n      }\n      if (xNew > maxXNew) {\n        maxXNew = xNew;\n      }\n    }\n\n    // Set new x1 for current boundary.\n    boundary.x1New = maxXNew;\n\n    // Adjusts new x2 for the affected boundaries.\n    for (q = i; q <= j; q++) {\n      horizonPart = horizon[q];\n      affectedBoundary = horizonPart.boundary;\n      if (affectedBoundary.x2New === undefined) {\n        // Was not set yet, choosing new x if possible.\n        if (affectedBoundary.x2 > boundary.x1) {\n          // Current and affected boundaries intersect. If affected boundary\n          // is placed on top of the current, shrinking the affected.\n          if (affectedBoundary.index > boundary.index) {\n            affectedBoundary.x2New = affectedBoundary.x2;\n          }\n        } else {\n          affectedBoundary.x2New = maxXNew;\n        }\n      } else if (affectedBoundary.x2New > maxXNew) {\n        // Affected boundary is touching new x, pushing it back.\n        affectedBoundary.x2New = Math.max(maxXNew, affectedBoundary.x2);\n      }\n    }\n\n    // Fixing the horizon.\n    const changedHorizon = [];\n    let lastBoundary = null;\n    for (q = i; q <= j; q++) {\n      horizonPart = horizon[q];\n      affectedBoundary = horizonPart.boundary;\n      // Checking which boundary will be visible.\n      const useBoundary =\n        affectedBoundary.x2 > boundary.x2 ? affectedBoundary : boundary;\n      if (lastBoundary === useBoundary) {\n        // Merging with previous.\n        changedHorizon[changedHorizon.length - 1].end = horizonPart.end;\n      } else {\n        changedHorizon.push({\n          start: horizonPart.start,\n          end: horizonPart.end,\n          boundary: useBoundary,\n        });\n        lastBoundary = useBoundary;\n      }\n    }\n    if (horizon[i].start < boundary.y1) {\n      changedHorizon[0].start = boundary.y1;\n      changedHorizon.unshift({\n        start: horizon[i].start,\n        end: boundary.y1,\n        boundary: horizon[i].boundary,\n      });\n    }\n    if (boundary.y2 < horizon[j].end) {\n      changedHorizon[changedHorizon.length - 1].end = boundary.y2;\n      changedHorizon.push({\n        start: boundary.y2,\n        end: horizon[j].end,\n        boundary: horizon[j].boundary,\n      });\n    }\n\n    // Set x2 new of boundary that is no longer visible (see overlapping case\n    // above).\n    // TODO more efficient, e.g. via reference counting.\n    for (q = i; q <= j; q++) {\n      horizonPart = horizon[q];\n      affectedBoundary = horizonPart.boundary;\n      if (affectedBoundary.x2New !== undefined) {\n        continue;\n      }\n      let used = false;\n      for (\n        k = i - 1;\n        !used && k >= 0 && horizon[k].start >= affectedBoundary.y1;\n        k--\n      ) {\n        used = horizon[k].boundary === affectedBoundary;\n      }\n      for (\n        k = j + 1;\n        !used && k < horizon.length && horizon[k].end <= affectedBoundary.y2;\n        k++\n      ) {\n        used = horizon[k].boundary === affectedBoundary;\n      }\n      for (k = 0; !used && k < changedHorizon.length; k++) {\n        used = changedHorizon[k].boundary === affectedBoundary;\n      }\n      if (!used) {\n        affectedBoundary.x2New = maxXNew;\n      }\n    }\n\n    Array.prototype.splice.apply(\n      horizon,\n      [i, j - i + 1].concat(changedHorizon)\n    );\n  }\n\n  // Set new x2 for all unset boundaries.\n  for (const horizonPart of horizon) {\n    const affectedBoundary = horizonPart.boundary;\n    if (affectedBoundary.x2New === undefined) {\n      affectedBoundary.x2New = Math.max(width, affectedBoundary.x2);\n    }\n  }\n}\n\nclass TextLayerRenderTask {\n  constructor({\n    textContent,\n    textContentStream,\n    container,\n    viewport,\n    textDivs,\n    textContentItemsStr,\n    enhanceTextSelection,\n  }) {\n    this._textContent = textContent;\n    this._textContentStream = textContentStream;\n    this._container = container;\n    this._document = container.ownerDocument;\n    this._viewport = viewport;\n    this._textDivs = textDivs || [];\n    this._textContentItemsStr = textContentItemsStr || [];\n    this._enhanceTextSelection = !!enhanceTextSelection;\n    this._fontInspectorEnabled = !!globalThis.FontInspector?.enabled;\n\n    this._reader = null;\n    this._layoutTextLastFontSize = null;\n    this._layoutTextLastFontFamily = null;\n    this._layoutTextCtx = null;\n    this._textDivProperties = new WeakMap();\n    this._renderingDone = false;\n    this._canceled = false;\n    this._capability = createPromiseCapability();\n    this._renderTimer = null;\n    this._bounds = [];\n\n    // Always clean-up the temporary canvas once rendering is no longer pending.\n    this._capability.promise\n      .finally(() => {\n        if (this._layoutTextCtx) {\n          // Zeroing the width and height cause Firefox to release graphics\n          // resources immediately, which can greatly reduce memory consumption.\n          this._layoutTextCtx.canvas.width = 0;\n          this._layoutTextCtx.canvas.height = 0;\n          this._layoutTextCtx = null;\n        }\n      })\n      .catch(() => {\n        /* Avoid \"Uncaught promise\" messages in the console. */\n      });\n  }\n\n  /**\n   * Promise for textLayer rendering task completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._capability.promise;\n  }\n\n  /**\n   * Cancel rendering of the textLayer.\n   */\n  cancel() {\n    this._canceled = true;\n    if (this._reader) {\n      this._reader.cancel(new AbortException(\"TextLayer task cancelled.\"));\n      this._reader = null;\n    }\n    if (this._renderTimer !== null) {\n      clearTimeout(this._renderTimer);\n      this._renderTimer = null;\n    }\n    this._capability.reject(new Error(\"TextLayer task cancelled.\"));\n  }\n\n  /**\n   * @private\n   */\n  _processItems(items, styleCache) {\n    for (let i = 0, len = items.length; i < len; i++) {\n      if (items[i].str === undefined) {\n        if (\n          items[i].type === \"beginMarkedContentProps\" ||\n          items[i].type === \"beginMarkedContent\"\n        ) {\n          const parent = this._container;\n          this._container = document.createElement(\"span\");\n          this._container.classList.add(\"markedContent\");\n          if (items[i].id !== null) {\n            this._container.setAttribute(\"id\", `${items[i].id}`);\n          }\n          parent.appendChild(this._container);\n        } else if (items[i].type === \"endMarkedContent\") {\n          this._container = this._container.parentNode;\n        }\n        continue;\n      }\n      this._textContentItemsStr.push(items[i].str);\n      appendText(this, items[i], styleCache, this._layoutTextCtx);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _layoutText(textDiv) {\n    const textDivProperties = this._textDivProperties.get(textDiv);\n\n    let transform = \"\";\n    if (textDivProperties.canvasWidth !== 0 && textDivProperties.hasText) {\n      const { fontSize, fontFamily } = textDiv.style;\n\n      // Only build font string and set to context if different from last.\n      if (\n        fontSize !== this._layoutTextLastFontSize ||\n        fontFamily !== this._layoutTextLastFontFamily\n      ) {\n        this._layoutTextCtx.font = `${fontSize} ${fontFamily}`;\n        this._layoutTextLastFontSize = fontSize;\n        this._layoutTextLastFontFamily = fontFamily;\n      }\n      // Only measure the width for multi-char text divs, see `appendText`.\n      const { width } = this._layoutTextCtx.measureText(textDiv.textContent);\n\n      if (width > 0) {\n        textDivProperties.scale = textDivProperties.canvasWidth / width;\n        transform = `scaleX(${textDivProperties.scale})`;\n      }\n    }\n    if (textDivProperties.angle !== 0) {\n      transform = `rotate(${textDivProperties.angle}deg) ${transform}`;\n    }\n    if (transform.length > 0) {\n      if (this._enhanceTextSelection) {\n        textDivProperties.originalTransform = transform;\n      }\n      textDiv.style.transform = transform;\n    }\n\n    if (textDivProperties.hasText) {\n      this._container.appendChild(textDiv);\n    }\n    if (textDivProperties.hasEOL) {\n      const br = document.createElement(\"br\");\n      br.setAttribute(\"role\", \"presentation\");\n      this._container.appendChild(br);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _render(timeout = 0) {\n    const capability = createPromiseCapability();\n    let styleCache = Object.create(null);\n\n    // The temporary canvas is used to measure text length in the DOM.\n    const canvas = this._document.createElement(\"canvas\");\n    canvas.height = canvas.width = DEFAULT_FONT_SIZE;\n\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"MOZCENTRAL || GENERIC\")\n    ) {\n      canvas.mozOpaque = true;\n    }\n    this._layoutTextCtx = canvas.getContext(\"2d\", { alpha: false });\n\n    if (this._textContent) {\n      const textItems = this._textContent.items;\n      const textStyles = this._textContent.styles;\n      this._processItems(textItems, textStyles);\n      capability.resolve();\n    } else if (this._textContentStream) {\n      const pump = () => {\n        this._reader.read().then(({ value, done }) => {\n          if (done) {\n            capability.resolve();\n            return;\n          }\n\n          Object.assign(styleCache, value.styles);\n          this._processItems(value.items, styleCache);\n          pump();\n        }, capability.reject);\n      };\n\n      this._reader = this._textContentStream.getReader();\n      pump();\n    } else {\n      throw new Error(\n        'Neither \"textContent\" nor \"textContentStream\"' +\n          \" parameters specified.\"\n      );\n    }\n\n    capability.promise.then(() => {\n      styleCache = null;\n      if (!timeout) {\n        // Render right away\n        render(this);\n      } else {\n        // Schedule\n        this._renderTimer = setTimeout(() => {\n          render(this);\n          this._renderTimer = null;\n        }, timeout);\n      }\n    }, this._capability.reject);\n  }\n\n  /**\n   * @param {boolean} [expandDivs]\n   */\n  expandTextDivs(expandDivs = false) {\n    if (!this._enhanceTextSelection || !this._renderingDone) {\n      return;\n    }\n    if (this._bounds !== null) {\n      expand(this);\n      this._bounds = null;\n    }\n    const transformBuf = [],\n      paddingBuf = [];\n\n    for (let i = 0, ii = this._textDivs.length; i < ii; i++) {\n      const div = this._textDivs[i];\n      const divProps = this._textDivProperties.get(div);\n\n      if (!divProps.hasText) {\n        continue;\n      }\n      if (expandDivs) {\n        transformBuf.length = 0;\n        paddingBuf.length = 0;\n\n        if (divProps.originalTransform) {\n          transformBuf.push(divProps.originalTransform);\n        }\n        if (divProps.paddingTop > 0) {\n          paddingBuf.push(`${divProps.paddingTop}px`);\n          transformBuf.push(`translateY(${-divProps.paddingTop}px)`);\n        } else {\n          paddingBuf.push(0);\n        }\n        if (divProps.paddingRight > 0) {\n          paddingBuf.push(`${divProps.paddingRight / divProps.scale}px`);\n        } else {\n          paddingBuf.push(0);\n        }\n        if (divProps.paddingBottom > 0) {\n          paddingBuf.push(`${divProps.paddingBottom}px`);\n        } else {\n          paddingBuf.push(0);\n        }\n        if (divProps.paddingLeft > 0) {\n          paddingBuf.push(`${divProps.paddingLeft / divProps.scale}px`);\n          transformBuf.push(\n            `translateX(${-divProps.paddingLeft / divProps.scale}px)`\n          );\n        } else {\n          paddingBuf.push(0);\n        }\n\n        div.style.padding = paddingBuf.join(\" \");\n        if (transformBuf.length) {\n          div.style.transform = transformBuf.join(\" \");\n        }\n      } else {\n        div.style.padding = null;\n        div.style.transform = divProps.originalTransform;\n      }\n    }\n  }\n}\n\n/**\n * @param {TextLayerRenderParameters} renderParameters\n * @returns {TextLayerRenderTask}\n */\nfunction renderTextLayer(renderParameters) {\n  const task = new TextLayerRenderTask({\n    textContent: renderParameters.textContent,\n    textContentStream: renderParameters.textContentStream,\n    container: renderParameters.container,\n    viewport: renderParameters.viewport,\n    textDivs: renderParameters.textDivs,\n    textContentItemsStr: renderParameters.textContentItemsStr,\n    enhanceTextSelection: renderParameters.enhanceTextSelection,\n  });\n  task._render(renderParameters.timeout);\n  return task;\n}\n\nexport { renderTextLayer };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  createObjectURL,\n  FONT_IDENTITY_MATRIX,\n  IDENTITY_MATRIX,\n  ImageKind,\n  isNum,\n  OPS,\n  TextRenderingMode,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport { DOMSVGFactory } from \"./display_utils.js\";\nimport { isNodeJS } from \"../shared/is_node.js\";\n\n/** @type {any} */\nlet SVGGraphics = class {\n  constructor() {\n    unreachable(\"Not implemented: SVGGraphics\");\n  }\n};\n\nif (\n  typeof PDFJSDev === \"undefined\" ||\n  PDFJSDev.test(\"!PRODUCTION || GENERIC\")\n) {\n  const SVG_DEFAULTS = {\n    fontStyle: \"normal\",\n    fontWeight: \"normal\",\n    fillColor: \"#000000\",\n  };\n  const XML_NS = \"http://www.w3.org/XML/1998/namespace\";\n  const XLINK_NS = \"http://www.w3.org/1999/xlink\";\n  const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n  const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n\n  const convertImgDataToPng = (function () {\n    const PNG_HEADER = new Uint8Array([\n      0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,\n    ]);\n    const CHUNK_WRAPPER_SIZE = 12;\n\n    const crcTable = new Int32Array(256);\n    for (let i = 0; i < 256; i++) {\n      let c = i;\n      for (let h = 0; h < 8; h++) {\n        if (c & 1) {\n          c = 0xedb88320 ^ ((c >> 1) & 0x7fffffff);\n        } else {\n          c = (c >> 1) & 0x7fffffff;\n        }\n      }\n      crcTable[i] = c;\n    }\n\n    function crc32(data, start, end) {\n      let crc = -1;\n      for (let i = start; i < end; i++) {\n        const a = (crc ^ data[i]) & 0xff;\n        const b = crcTable[a];\n        crc = (crc >>> 8) ^ b;\n      }\n      return crc ^ -1;\n    }\n\n    function writePngChunk(type, body, data, offset) {\n      let p = offset;\n      const len = body.length;\n\n      data[p] = (len >> 24) & 0xff;\n      data[p + 1] = (len >> 16) & 0xff;\n      data[p + 2] = (len >> 8) & 0xff;\n      data[p + 3] = len & 0xff;\n      p += 4;\n\n      data[p] = type.charCodeAt(0) & 0xff;\n      data[p + 1] = type.charCodeAt(1) & 0xff;\n      data[p + 2] = type.charCodeAt(2) & 0xff;\n      data[p + 3] = type.charCodeAt(3) & 0xff;\n      p += 4;\n\n      data.set(body, p);\n      p += body.length;\n\n      const crc = crc32(data, offset + 4, p);\n      data[p] = (crc >> 24) & 0xff;\n      data[p + 1] = (crc >> 16) & 0xff;\n      data[p + 2] = (crc >> 8) & 0xff;\n      data[p + 3] = crc & 0xff;\n    }\n\n    function adler32(data, start, end) {\n      let a = 1;\n      let b = 0;\n      for (let i = start; i < end; ++i) {\n        a = (a + (data[i] & 0xff)) % 65521;\n        b = (b + a) % 65521;\n      }\n      return (b << 16) | a;\n    }\n\n    /**\n     * @param {Uint8Array} literals The input data.\n     * @returns {Uint8Array} The DEFLATE-compressed data stream in zlib format.\n     *   This is the required format for compressed streams in the PNG format:\n     *   http://www.libpng.org/pub/png/spec/1.2/PNG-Compression.html\n     */\n    function deflateSync(literals) {\n      if (!isNodeJS) {\n        // zlib is certainly not available outside of Node.js. We can either use\n        // the pako library for client-side DEFLATE compression, or use the\n        // canvas API of the browser to obtain a more optimal PNG file.\n        return deflateSyncUncompressed(literals);\n      }\n      try {\n        // NOTE: This implementation is far from perfect, but already way better\n        // than not applying any compression.\n        //\n        // A better algorithm will try to choose a good predictor/filter and\n        // then choose a suitable zlib compression strategy (e.g. 3,Z_RLE).\n        //\n        // Node v0.11.12 zlib.deflateSync is introduced (and returns a Buffer).\n        // Node v3.0.0   Buffer inherits from Uint8Array.\n        // Node v8.0.0   zlib.deflateSync accepts Uint8Array as input.\n        let input;\n        // eslint-disable-next-line no-undef\n        if (parseInt(process.versions.node) >= 8) {\n          input = literals;\n        } else {\n          // eslint-disable-next-line no-undef\n          input = Buffer.from(literals);\n        }\n        const output = __non_webpack_require__(\"zlib\").deflateSync(input, {\n          level: 9,\n        });\n        return output instanceof Uint8Array ? output : new Uint8Array(output);\n      } catch (e) {\n        warn(\n          \"Not compressing PNG because zlib.deflateSync is unavailable: \" + e\n        );\n      }\n\n      return deflateSyncUncompressed(literals);\n    }\n\n    // An implementation of DEFLATE with compression level 0 (Z_NO_COMPRESSION).\n    function deflateSyncUncompressed(literals) {\n      let len = literals.length;\n      const maxBlockLength = 0xffff;\n\n      const deflateBlocks = Math.ceil(len / maxBlockLength);\n      const idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);\n      let pi = 0;\n      idat[pi++] = 0x78; // compression method and flags\n      idat[pi++] = 0x9c; // flags\n\n      let pos = 0;\n      while (len > maxBlockLength) {\n        // writing non-final DEFLATE blocks type 0 and length of 65535\n        idat[pi++] = 0x00;\n        idat[pi++] = 0xff;\n        idat[pi++] = 0xff;\n        idat[pi++] = 0x00;\n        idat[pi++] = 0x00;\n        idat.set(literals.subarray(pos, pos + maxBlockLength), pi);\n        pi += maxBlockLength;\n        pos += maxBlockLength;\n        len -= maxBlockLength;\n      }\n\n      // writing non-final DEFLATE blocks type 0\n      idat[pi++] = 0x01;\n      idat[pi++] = len & 0xff;\n      idat[pi++] = (len >> 8) & 0xff;\n      idat[pi++] = ~len & 0xffff & 0xff;\n      idat[pi++] = ((~len & 0xffff) >> 8) & 0xff;\n      idat.set(literals.subarray(pos), pi);\n      pi += literals.length - pos;\n\n      const adler = adler32(literals, 0, literals.length); // checksum\n      idat[pi++] = (adler >> 24) & 0xff;\n      idat[pi++] = (adler >> 16) & 0xff;\n      idat[pi++] = (adler >> 8) & 0xff;\n      idat[pi++] = adler & 0xff;\n      return idat;\n    }\n\n    function encode(imgData, kind, forceDataSchema, isMask) {\n      const width = imgData.width;\n      const height = imgData.height;\n      let bitDepth, colorType, lineSize;\n      const bytes = imgData.data;\n\n      switch (kind) {\n        case ImageKind.GRAYSCALE_1BPP:\n          colorType = 0;\n          bitDepth = 1;\n          lineSize = (width + 7) >> 3;\n          break;\n        case ImageKind.RGB_24BPP:\n          colorType = 2;\n          bitDepth = 8;\n          lineSize = width * 3;\n          break;\n        case ImageKind.RGBA_32BPP:\n          colorType = 6;\n          bitDepth = 8;\n          lineSize = width * 4;\n          break;\n        default:\n          throw new Error(\"invalid format\");\n      }\n\n      // prefix every row with predictor 0\n      const literals = new Uint8Array((1 + lineSize) * height);\n      let offsetLiterals = 0,\n        offsetBytes = 0;\n      for (let y = 0; y < height; ++y) {\n        literals[offsetLiterals++] = 0; // no prediction\n        literals.set(\n          bytes.subarray(offsetBytes, offsetBytes + lineSize),\n          offsetLiterals\n        );\n        offsetBytes += lineSize;\n        offsetLiterals += lineSize;\n      }\n\n      if (kind === ImageKind.GRAYSCALE_1BPP && isMask) {\n        // inverting for image masks\n        offsetLiterals = 0;\n        for (let y = 0; y < height; y++) {\n          offsetLiterals++; // skipping predictor\n          for (let i = 0; i < lineSize; i++) {\n            literals[offsetLiterals++] ^= 0xff;\n          }\n        }\n      }\n\n      const ihdr = new Uint8Array([\n        (width >> 24) & 0xff,\n        (width >> 16) & 0xff,\n        (width >> 8) & 0xff,\n        width & 0xff,\n        (height >> 24) & 0xff,\n        (height >> 16) & 0xff,\n        (height >> 8) & 0xff,\n        height & 0xff,\n        bitDepth, // bit depth\n        colorType, // color type\n        0x00, // compression method\n        0x00, // filter method\n        0x00, // interlace method\n      ]);\n      const idat = deflateSync(literals);\n\n      // PNG consists of: header, IHDR+data, IDAT+data, and IEND.\n      const pngLength =\n        PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;\n      const data = new Uint8Array(pngLength);\n      let offset = 0;\n      data.set(PNG_HEADER, offset);\n      offset += PNG_HEADER.length;\n      writePngChunk(\"IHDR\", ihdr, data, offset);\n      offset += CHUNK_WRAPPER_SIZE + ihdr.length;\n      writePngChunk(\"IDATA\", idat, data, offset);\n      offset += CHUNK_WRAPPER_SIZE + idat.length;\n      writePngChunk(\"IEND\", new Uint8Array(0), data, offset);\n\n      return createObjectURL(data, \"image/png\", forceDataSchema);\n    }\n\n    // eslint-disable-next-line no-shadow\n    return function convertImgDataToPng(imgData, forceDataSchema, isMask) {\n      const kind =\n        imgData.kind === undefined ? ImageKind.GRAYSCALE_1BPP : imgData.kind;\n      return encode(imgData, kind, forceDataSchema, isMask);\n    };\n  })();\n\n  class SVGExtraState {\n    constructor() {\n      this.fontSizeScale = 1;\n      this.fontWeight = SVG_DEFAULTS.fontWeight;\n      this.fontSize = 0;\n\n      this.textMatrix = IDENTITY_MATRIX;\n      this.fontMatrix = FONT_IDENTITY_MATRIX;\n      this.leading = 0;\n      this.textRenderingMode = TextRenderingMode.FILL;\n      this.textMatrixScale = 1;\n\n      // Current point (in user coordinates)\n      this.x = 0;\n      this.y = 0;\n\n      // Start of text line (in text coordinates)\n      this.lineX = 0;\n      this.lineY = 0;\n\n      // Character and word spacing\n      this.charSpacing = 0;\n      this.wordSpacing = 0;\n      this.textHScale = 1;\n      this.textRise = 0;\n\n      // Default foreground and background colors\n      this.fillColor = SVG_DEFAULTS.fillColor;\n      this.strokeColor = \"#000000\";\n\n      this.fillAlpha = 1;\n      this.strokeAlpha = 1;\n      this.lineWidth = 1;\n      this.lineJoin = \"\";\n      this.lineCap = \"\";\n      this.miterLimit = 0;\n\n      this.dashArray = [];\n      this.dashPhase = 0;\n\n      this.dependencies = [];\n\n      // Clipping\n      this.activeClipUrl = null;\n      this.clipGroup = null;\n\n      this.maskId = \"\";\n    }\n\n    clone() {\n      return Object.create(this);\n    }\n\n    setCurrentPoint(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n  }\n\n  // eslint-disable-next-line no-inner-declarations\n  function opListToTree(opList) {\n    let opTree = [];\n    const tmp = [];\n\n    for (const opListElement of opList) {\n      if (opListElement.fn === \"save\") {\n        opTree.push({ fnId: 92, fn: \"group\", items: [] });\n        tmp.push(opTree);\n        opTree = opTree[opTree.length - 1].items;\n        continue;\n      }\n\n      if (opListElement.fn === \"restore\") {\n        opTree = tmp.pop();\n      } else {\n        opTree.push(opListElement);\n      }\n    }\n    return opTree;\n  }\n\n  /**\n   * Format a float number as a string.\n   *\n   * @param value {number} - The float number to format.\n   * @returns {string}\n   */\n  // eslint-disable-next-line no-inner-declarations\n  function pf(value) {\n    if (Number.isInteger(value)) {\n      return value.toString();\n    }\n    const s = value.toFixed(10);\n    let i = s.length - 1;\n    if (s[i] !== \"0\") {\n      return s;\n    }\n\n    // Remove trailing zeros.\n    do {\n      i--;\n    } while (s[i] === \"0\");\n    return s.substring(0, s[i] === \".\" ? i : i + 1);\n  }\n\n  /**\n   * Format a transform matrix as a string. The standard rotation, scale and\n   * translation matrices are replaced by their shorter forms, and for\n   * identity matrices an empty string is returned to save memory.\n   *\n   * @param m {Array} - The transform matrix to format.\n   * @returns {string}\n   */\n  // eslint-disable-next-line no-inner-declarations\n  function pm(m) {\n    if (m[4] === 0 && m[5] === 0) {\n      if (m[1] === 0 && m[2] === 0) {\n        if (m[0] === 1 && m[3] === 1) {\n          return \"\";\n        }\n        return `scale(${pf(m[0])} ${pf(m[3])})`;\n      }\n      if (m[0] === m[3] && m[1] === -m[2]) {\n        const a = (Math.acos(m[0]) * 180) / Math.PI;\n        return `rotate(${pf(a)})`;\n      }\n    } else {\n      if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {\n        return `translate(${pf(m[4])} ${pf(m[5])})`;\n      }\n    }\n    return (\n      `matrix(${pf(m[0])} ${pf(m[1])} ${pf(m[2])} ${pf(m[3])} ${pf(m[4])} ` +\n      `${pf(m[5])})`\n    );\n  }\n\n  // The counts below are relevant for all pages, so they have to be global\n  // instead of being members of `SVGGraphics` (which is recreated for\n  // each page).\n  let clipCount = 0;\n  let maskCount = 0;\n  let shadingCount = 0;\n\n  SVGGraphics = class {\n    constructor(commonObjs, objs, forceDataSchema = false) {\n      this.svgFactory = new DOMSVGFactory();\n\n      this.current = new SVGExtraState();\n      this.transformMatrix = IDENTITY_MATRIX; // Graphics state matrix\n      this.transformStack = [];\n      this.extraStack = [];\n      this.commonObjs = commonObjs;\n      this.objs = objs;\n      this.pendingClip = null;\n      this.pendingEOFill = false;\n\n      this.embedFonts = false;\n      this.embeddedFonts = Object.create(null);\n      this.cssStyle = null;\n      this.forceDataSchema = !!forceDataSchema;\n\n      // In `src/shared/util.js` the operator names are mapped to IDs.\n      // The list below represents the reverse of that, i.e., it maps IDs\n      // to operator names.\n      this._operatorIdMapping = [];\n      for (const op in OPS) {\n        this._operatorIdMapping[OPS[op]] = op;\n      }\n    }\n\n    save() {\n      this.transformStack.push(this.transformMatrix);\n      const old = this.current;\n      this.extraStack.push(old);\n      this.current = old.clone();\n    }\n\n    restore() {\n      this.transformMatrix = this.transformStack.pop();\n      this.current = this.extraStack.pop();\n      this.pendingClip = null;\n      this.tgrp = null;\n    }\n\n    group(items) {\n      this.save();\n      this.executeOpTree(items);\n      this.restore();\n    }\n\n    loadDependencies(operatorList) {\n      const fnArray = operatorList.fnArray;\n      const argsArray = operatorList.argsArray;\n\n      for (let i = 0, ii = fnArray.length; i < ii; i++) {\n        if (fnArray[i] !== OPS.dependency) {\n          continue;\n        }\n\n        for (const obj of argsArray[i]) {\n          const objsPool = obj.startsWith(\"g_\") ? this.commonObjs : this.objs;\n          const promise = new Promise(resolve => {\n            objsPool.get(obj, resolve);\n          });\n          this.current.dependencies.push(promise);\n        }\n      }\n      return Promise.all(this.current.dependencies);\n    }\n\n    transform(a, b, c, d, e, f) {\n      const transformMatrix = [a, b, c, d, e, f];\n      this.transformMatrix = Util.transform(\n        this.transformMatrix,\n        transformMatrix\n      );\n      this.tgrp = null;\n    }\n\n    getSVG(operatorList, viewport) {\n      this.viewport = viewport;\n\n      const svgElement = this._initialize(viewport);\n      return this.loadDependencies(operatorList).then(() => {\n        this.transformMatrix = IDENTITY_MATRIX;\n        this.executeOpTree(this.convertOpList(operatorList));\n        return svgElement;\n      });\n    }\n\n    convertOpList(operatorList) {\n      const operatorIdMapping = this._operatorIdMapping;\n      const argsArray = operatorList.argsArray;\n      const fnArray = operatorList.fnArray;\n      const opList = [];\n      for (let i = 0, ii = fnArray.length; i < ii; i++) {\n        const fnId = fnArray[i];\n        opList.push({\n          fnId,\n          fn: operatorIdMapping[fnId],\n          args: argsArray[i],\n        });\n      }\n      return opListToTree(opList);\n    }\n\n    executeOpTree(opTree) {\n      for (const opTreeElement of opTree) {\n        const fn = opTreeElement.fn;\n        const fnId = opTreeElement.fnId;\n        const args = opTreeElement.args;\n\n        switch (fnId | 0) {\n          case OPS.beginText:\n            this.beginText();\n            break;\n          case OPS.dependency:\n            // Handled in `loadDependencies`, so no warning should be shown.\n            break;\n          case OPS.setLeading:\n            this.setLeading(args);\n            break;\n          case OPS.setLeadingMoveText:\n            this.setLeadingMoveText(args[0], args[1]);\n            break;\n          case OPS.setFont:\n            this.setFont(args);\n            break;\n          case OPS.showText:\n            this.showText(args[0]);\n            break;\n          case OPS.showSpacedText:\n            this.showText(args[0]);\n            break;\n          case OPS.endText:\n            this.endText();\n            break;\n          case OPS.moveText:\n            this.moveText(args[0], args[1]);\n            break;\n          case OPS.setCharSpacing:\n            this.setCharSpacing(args[0]);\n            break;\n          case OPS.setWordSpacing:\n            this.setWordSpacing(args[0]);\n            break;\n          case OPS.setHScale:\n            this.setHScale(args[0]);\n            break;\n          case OPS.setTextMatrix:\n            this.setTextMatrix(\n              args[0],\n              args[1],\n              args[2],\n              args[3],\n              args[4],\n              args[5]\n            );\n            break;\n          case OPS.setTextRise:\n            this.setTextRise(args[0]);\n            break;\n          case OPS.setTextRenderingMode:\n            this.setTextRenderingMode(args[0]);\n            break;\n          case OPS.setLineWidth:\n            this.setLineWidth(args[0]);\n            break;\n          case OPS.setLineJoin:\n            this.setLineJoin(args[0]);\n            break;\n          case OPS.setLineCap:\n            this.setLineCap(args[0]);\n            break;\n          case OPS.setMiterLimit:\n            this.setMiterLimit(args[0]);\n            break;\n          case OPS.setFillRGBColor:\n            this.setFillRGBColor(args[0], args[1], args[2]);\n            break;\n          case OPS.setStrokeRGBColor:\n            this.setStrokeRGBColor(args[0], args[1], args[2]);\n            break;\n          case OPS.setStrokeColorN:\n            this.setStrokeColorN(args);\n            break;\n          case OPS.setFillColorN:\n            this.setFillColorN(args);\n            break;\n          case OPS.shadingFill:\n            this.shadingFill(args[0]);\n            break;\n          case OPS.setDash:\n            this.setDash(args[0], args[1]);\n            break;\n          case OPS.setRenderingIntent:\n            this.setRenderingIntent(args[0]);\n            break;\n          case OPS.setFlatness:\n            this.setFlatness(args[0]);\n            break;\n          case OPS.setGState:\n            this.setGState(args[0]);\n            break;\n          case OPS.fill:\n            this.fill();\n            break;\n          case OPS.eoFill:\n            this.eoFill();\n            break;\n          case OPS.stroke:\n            this.stroke();\n            break;\n          case OPS.fillStroke:\n            this.fillStroke();\n            break;\n          case OPS.eoFillStroke:\n            this.eoFillStroke();\n            break;\n          case OPS.clip:\n            this.clip(\"nonzero\");\n            break;\n          case OPS.eoClip:\n            this.clip(\"evenodd\");\n            break;\n          case OPS.paintSolidColorImageMask:\n            this.paintSolidColorImageMask();\n            break;\n          case OPS.paintImageXObject:\n            this.paintImageXObject(args[0]);\n            break;\n          case OPS.paintInlineImageXObject:\n            this.paintInlineImageXObject(args[0]);\n            break;\n          case OPS.paintImageMaskXObject:\n            this.paintImageMaskXObject(args[0]);\n            break;\n          case OPS.paintFormXObjectBegin:\n            this.paintFormXObjectBegin(args[0], args[1]);\n            break;\n          case OPS.paintFormXObjectEnd:\n            this.paintFormXObjectEnd();\n            break;\n          case OPS.closePath:\n            this.closePath();\n            break;\n          case OPS.closeStroke:\n            this.closeStroke();\n            break;\n          case OPS.closeFillStroke:\n            this.closeFillStroke();\n            break;\n          case OPS.closeEOFillStroke:\n            this.closeEOFillStroke();\n            break;\n          case OPS.nextLine:\n            this.nextLine();\n            break;\n          case OPS.transform:\n            this.transform(\n              args[0],\n              args[1],\n              args[2],\n              args[3],\n              args[4],\n              args[5]\n            );\n            break;\n          case OPS.constructPath:\n            this.constructPath(args[0], args[1]);\n            break;\n          case OPS.endPath:\n            this.endPath();\n            break;\n          case 92:\n            this.group(opTreeElement.items);\n            break;\n          default:\n            warn(`Unimplemented operator ${fn}`);\n            break;\n        }\n      }\n    }\n\n    setWordSpacing(wordSpacing) {\n      this.current.wordSpacing = wordSpacing;\n    }\n\n    setCharSpacing(charSpacing) {\n      this.current.charSpacing = charSpacing;\n    }\n\n    nextLine() {\n      this.moveText(0, this.current.leading);\n    }\n\n    setTextMatrix(a, b, c, d, e, f) {\n      const current = this.current;\n      current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];\n      current.textMatrixScale = Math.hypot(a, b);\n\n      current.x = current.lineX = 0;\n      current.y = current.lineY = 0;\n\n      current.xcoords = [];\n      current.ycoords = [];\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n\n      current.txtElement = this.svgFactory.createElement(\"svg:text\");\n      current.txtElement.appendChild(current.tspan);\n    }\n\n    beginText() {\n      const current = this.current;\n      current.x = current.lineX = 0;\n      current.y = current.lineY = 0;\n      current.textMatrix = IDENTITY_MATRIX;\n      current.lineMatrix = IDENTITY_MATRIX;\n      current.textMatrixScale = 1;\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.txtElement = this.svgFactory.createElement(\"svg:text\");\n      current.txtgrp = this.svgFactory.createElement(\"svg:g\");\n      current.xcoords = [];\n      current.ycoords = [];\n    }\n\n    moveText(x, y) {\n      const current = this.current;\n      current.x = current.lineX += x;\n      current.y = current.lineY += y;\n\n      current.xcoords = [];\n      current.ycoords = [];\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n    }\n\n    showText(glyphs) {\n      const current = this.current;\n      const font = current.font;\n      const fontSize = current.fontSize;\n      if (fontSize === 0) {\n        return;\n      }\n\n      const fontSizeScale = current.fontSizeScale;\n      const charSpacing = current.charSpacing;\n      const wordSpacing = current.wordSpacing;\n      const fontDirection = current.fontDirection;\n      const textHScale = current.textHScale * fontDirection;\n      const vertical = font.vertical;\n      const spacingDir = vertical ? 1 : -1;\n      const defaultVMetrics = font.defaultVMetrics;\n      const widthAdvanceScale = fontSize * current.fontMatrix[0];\n\n      let x = 0;\n      for (const glyph of glyphs) {\n        if (glyph === null) {\n          // Word break\n          x += fontDirection * wordSpacing;\n          continue;\n        } else if (isNum(glyph)) {\n          x += (spacingDir * glyph * fontSize) / 1000;\n          continue;\n        }\n\n        const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n        const character = glyph.fontChar;\n        let scaledX, scaledY;\n        let width = glyph.width;\n        if (vertical) {\n          let vx;\n          const vmetric = glyph.vmetric || defaultVMetrics;\n          vx = glyph.vmetric ? vmetric[1] : width * 0.5;\n          vx = -vx * widthAdvanceScale;\n          const vy = vmetric[2] * widthAdvanceScale;\n\n          width = vmetric ? -vmetric[0] : width;\n          scaledX = vx / fontSizeScale;\n          scaledY = (x + vy) / fontSizeScale;\n        } else {\n          scaledX = x / fontSizeScale;\n          scaledY = 0;\n        }\n\n        if (glyph.isInFont || font.missingFile) {\n          current.xcoords.push(current.x + scaledX);\n          if (vertical) {\n            current.ycoords.push(-current.y + scaledY);\n          }\n          current.tspan.textContent += character;\n        } else {\n          // TODO: To assist with text selection, we should replace the missing\n          // character with a space character if charWidth is not zero.\n          // But we cannot just do \"character = ' '\", because the ' ' character\n          // might actually map to a different glyph.\n        }\n\n        let charWidth;\n        if (vertical) {\n          charWidth = width * widthAdvanceScale - spacing * fontDirection;\n        } else {\n          charWidth = width * widthAdvanceScale + spacing * fontDirection;\n        }\n\n        x += charWidth;\n      }\n      current.tspan.setAttributeNS(\n        null,\n        \"x\",\n        current.xcoords.map(pf).join(\" \")\n      );\n      if (vertical) {\n        current.tspan.setAttributeNS(\n          null,\n          \"y\",\n          current.ycoords.map(pf).join(\" \")\n        );\n      } else {\n        current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n      }\n\n      if (vertical) {\n        current.y -= x;\n      } else {\n        current.x += x * textHScale;\n      }\n\n      current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n      current.tspan.setAttributeNS(\n        null,\n        \"font-size\",\n        `${pf(current.fontSize)}px`\n      );\n      if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {\n        current.tspan.setAttributeNS(null, \"font-style\", current.fontStyle);\n      }\n      if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {\n        current.tspan.setAttributeNS(null, \"font-weight\", current.fontWeight);\n      }\n\n      const fillStrokeMode =\n        current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        if (current.fillColor !== SVG_DEFAULTS.fillColor) {\n          current.tspan.setAttributeNS(null, \"fill\", current.fillColor);\n        }\n        if (current.fillAlpha < 1) {\n          current.tspan.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n        }\n      } else if (current.textRenderingMode === TextRenderingMode.ADD_TO_PATH) {\n        // Workaround for Firefox: We must set fill=\"transparent\" because\n        // fill=\"none\" would generate an empty clipping path.\n        current.tspan.setAttributeNS(null, \"fill\", \"transparent\");\n      } else {\n        current.tspan.setAttributeNS(null, \"fill\", \"none\");\n      }\n\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        const lineWidthScale = 1 / (current.textMatrixScale || 1);\n        this._setStrokeAttributes(current.tspan, lineWidthScale);\n      }\n\n      // Include the text rise in the text matrix since the `pm` function\n      // creates the SVG element's `translate` entry (work on a copy to avoid\n      // altering the original text matrix).\n      let textMatrix = current.textMatrix;\n      if (current.textRise !== 0) {\n        textMatrix = textMatrix.slice();\n        textMatrix[5] += current.textRise;\n      }\n\n      current.txtElement.setAttributeNS(\n        null,\n        \"transform\",\n        `${pm(textMatrix)} scale(${pf(textHScale)}, -1)`\n      );\n      current.txtElement.setAttributeNS(XML_NS, \"xml:space\", \"preserve\");\n      current.txtElement.appendChild(current.tspan);\n      current.txtgrp.appendChild(current.txtElement);\n\n      this._ensureTransformGroup().appendChild(current.txtElement);\n    }\n\n    setLeadingMoveText(x, y) {\n      this.setLeading(-y);\n      this.moveText(x, y);\n    }\n\n    addFontStyle(fontObj) {\n      if (!fontObj.data) {\n        throw new Error(\n          \"addFontStyle: No font data available, \" +\n            'ensure that the \"fontExtraProperties\" API parameter is set.'\n        );\n      }\n      if (!this.cssStyle) {\n        this.cssStyle = this.svgFactory.createElement(\"svg:style\");\n        this.cssStyle.setAttributeNS(null, \"type\", \"text/css\");\n        this.defs.appendChild(this.cssStyle);\n      }\n\n      const url = createObjectURL(\n        fontObj.data,\n        fontObj.mimetype,\n        this.forceDataSchema\n      );\n      this.cssStyle.textContent +=\n        `@font-face { font-family: \"${fontObj.loadedName}\";` +\n        ` src: url(${url}); }\\n`;\n    }\n\n    setFont(details) {\n      const current = this.current;\n      const fontObj = this.commonObjs.get(details[0]);\n      let size = details[1];\n      current.font = fontObj;\n\n      if (\n        this.embedFonts &&\n        !fontObj.missingFile &&\n        !this.embeddedFonts[fontObj.loadedName]\n      ) {\n        this.addFontStyle(fontObj);\n        this.embeddedFonts[fontObj.loadedName] = fontObj;\n      }\n      current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;\n\n      let bold = \"normal\";\n      if (fontObj.black) {\n        bold = \"900\";\n      } else if (fontObj.bold) {\n        bold = \"bold\";\n      }\n      const italic = fontObj.italic ? \"italic\" : \"normal\";\n\n      if (size < 0) {\n        size = -size;\n        current.fontDirection = -1;\n      } else {\n        current.fontDirection = 1;\n      }\n      current.fontSize = size;\n      current.fontFamily = fontObj.loadedName;\n      current.fontWeight = bold;\n      current.fontStyle = italic;\n\n      current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n      current.xcoords = [];\n      current.ycoords = [];\n    }\n\n    endText() {\n      const current = this.current;\n      if (\n        current.textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG &&\n        current.txtElement?.hasChildNodes()\n      ) {\n        // If no glyphs are shown (i.e. no child nodes), no clipping occurs.\n        current.element = current.txtElement;\n        this.clip(\"nonzero\");\n        this.endPath();\n      }\n    }\n\n    // Path properties\n    setLineWidth(width) {\n      if (width > 0) {\n        this.current.lineWidth = width;\n      }\n    }\n\n    setLineCap(style) {\n      this.current.lineCap = LINE_CAP_STYLES[style];\n    }\n\n    setLineJoin(style) {\n      this.current.lineJoin = LINE_JOIN_STYLES[style];\n    }\n\n    setMiterLimit(limit) {\n      this.current.miterLimit = limit;\n    }\n\n    setStrokeAlpha(strokeAlpha) {\n      this.current.strokeAlpha = strokeAlpha;\n    }\n\n    setStrokeRGBColor(r, g, b) {\n      this.current.strokeColor = Util.makeHexColor(r, g, b);\n    }\n\n    setFillAlpha(fillAlpha) {\n      this.current.fillAlpha = fillAlpha;\n    }\n\n    setFillRGBColor(r, g, b) {\n      this.current.fillColor = Util.makeHexColor(r, g, b);\n      this.current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n      this.current.xcoords = [];\n      this.current.ycoords = [];\n    }\n\n    setStrokeColorN(args) {\n      this.current.strokeColor = this._makeColorN_Pattern(args);\n    }\n\n    setFillColorN(args) {\n      this.current.fillColor = this._makeColorN_Pattern(args);\n    }\n\n    shadingFill(args) {\n      const width = this.viewport.width;\n      const height = this.viewport.height;\n      const inv = Util.inverseTransform(this.transformMatrix);\n      const bl = Util.applyTransform([0, 0], inv);\n      const br = Util.applyTransform([0, height], inv);\n      const ul = Util.applyTransform([width, 0], inv);\n      const ur = Util.applyTransform([width, height], inv);\n      const x0 = Math.min(bl[0], br[0], ul[0], ur[0]);\n      const y0 = Math.min(bl[1], br[1], ul[1], ur[1]);\n      const x1 = Math.max(bl[0], br[0], ul[0], ur[0]);\n      const y1 = Math.max(bl[1], br[1], ul[1], ur[1]);\n\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", x0);\n      rect.setAttributeNS(null, \"y\", y0);\n      rect.setAttributeNS(null, \"width\", x1 - x0);\n      rect.setAttributeNS(null, \"height\", y1 - y0);\n      rect.setAttributeNS(null, \"fill\", this._makeShadingPattern(args));\n      if (this.current.fillAlpha < 1) {\n        rect.setAttributeNS(null, \"fill-opacity\", this.current.fillAlpha);\n      }\n      this._ensureTransformGroup().appendChild(rect);\n    }\n\n    /**\n     * @private\n     */\n    _makeColorN_Pattern(args) {\n      if (args[0] === \"TilingPattern\") {\n        return this._makeTilingPattern(args);\n      }\n      return this._makeShadingPattern(args);\n    }\n\n    /**\n     * @private\n     */\n    _makeTilingPattern(args) {\n      const color = args[1];\n      const operatorList = args[2];\n      const matrix = args[3] || IDENTITY_MATRIX;\n      const [x0, y0, x1, y1] = args[4];\n      const xstep = args[5];\n      const ystep = args[6];\n      const paintType = args[7];\n\n      const tilingId = `shading${shadingCount++}`;\n      const [tx0, ty0, tx1, ty1] = Util.normalizeRect([\n        ...Util.applyTransform([x0, y0], matrix),\n        ...Util.applyTransform([x1, y1], matrix),\n      ]);\n      const [xscale, yscale] = Util.singularValueDecompose2dScale(matrix);\n      const txstep = xstep * xscale;\n      const tystep = ystep * yscale;\n\n      const tiling = this.svgFactory.createElement(\"svg:pattern\");\n      tiling.setAttributeNS(null, \"id\", tilingId);\n      tiling.setAttributeNS(null, \"patternUnits\", \"userSpaceOnUse\");\n      tiling.setAttributeNS(null, \"width\", txstep);\n      tiling.setAttributeNS(null, \"height\", tystep);\n      tiling.setAttributeNS(null, \"x\", `${tx0}`);\n      tiling.setAttributeNS(null, \"y\", `${ty0}`);\n\n      // Save current state.\n      const svg = this.svg;\n      const transformMatrix = this.transformMatrix;\n      const fillColor = this.current.fillColor;\n      const strokeColor = this.current.strokeColor;\n\n      const bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);\n      this.svg = bbox;\n      this.transformMatrix = matrix;\n      if (paintType === 2) {\n        const cssColor = Util.makeHexColor(...color);\n        this.current.fillColor = cssColor;\n        this.current.strokeColor = cssColor;\n      }\n      this.executeOpTree(this.convertOpList(operatorList));\n\n      // Restore saved state.\n      this.svg = svg;\n      this.transformMatrix = transformMatrix;\n      this.current.fillColor = fillColor;\n      this.current.strokeColor = strokeColor;\n\n      tiling.appendChild(bbox.childNodes[0]);\n      this.defs.appendChild(tiling);\n      return `url(#${tilingId})`;\n    }\n\n    /**\n     * @private\n     */\n    _makeShadingPattern(args) {\n      switch (args[0]) {\n        case \"RadialAxial\":\n          const shadingId = `shading${shadingCount++}`;\n          const colorStops = args[3];\n          let gradient;\n\n          switch (args[1]) {\n            case \"axial\":\n              const point0 = args[4];\n              const point1 = args[5];\n              gradient = this.svgFactory.createElement(\"svg:linearGradient\");\n              gradient.setAttributeNS(null, \"id\", shadingId);\n              gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n              gradient.setAttributeNS(null, \"x1\", point0[0]);\n              gradient.setAttributeNS(null, \"y1\", point0[1]);\n              gradient.setAttributeNS(null, \"x2\", point1[0]);\n              gradient.setAttributeNS(null, \"y2\", point1[1]);\n              break;\n            case \"radial\":\n              const focalPoint = args[4];\n              const circlePoint = args[5];\n              const focalRadius = args[6];\n              const circleRadius = args[7];\n              gradient = this.svgFactory.createElement(\"svg:radialGradient\");\n              gradient.setAttributeNS(null, \"id\", shadingId);\n              gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n              gradient.setAttributeNS(null, \"cx\", circlePoint[0]);\n              gradient.setAttributeNS(null, \"cy\", circlePoint[1]);\n              gradient.setAttributeNS(null, \"r\", circleRadius);\n              gradient.setAttributeNS(null, \"fx\", focalPoint[0]);\n              gradient.setAttributeNS(null, \"fy\", focalPoint[1]);\n              gradient.setAttributeNS(null, \"fr\", focalRadius);\n              break;\n            default:\n              throw new Error(`Unknown RadialAxial type: ${args[1]}`);\n          }\n          for (const colorStop of colorStops) {\n            const stop = this.svgFactory.createElement(\"svg:stop\");\n            stop.setAttributeNS(null, \"offset\", colorStop[0]);\n            stop.setAttributeNS(null, \"stop-color\", colorStop[1]);\n            gradient.appendChild(stop);\n          }\n          this.defs.appendChild(gradient);\n          return `url(#${shadingId})`;\n        case \"Mesh\":\n          warn(\"Unimplemented pattern Mesh\");\n          return null;\n        case \"Dummy\":\n          return \"hotpink\";\n        default:\n          throw new Error(`Unknown IR type: ${args[0]}`);\n      }\n    }\n\n    setDash(dashArray, dashPhase) {\n      this.current.dashArray = dashArray;\n      this.current.dashPhase = dashPhase;\n    }\n\n    constructPath(ops, args) {\n      const current = this.current;\n      let x = current.x,\n        y = current.y;\n      let d = [];\n      let j = 0;\n\n      for (const op of ops) {\n        switch (op | 0) {\n          case OPS.rectangle:\n            x = args[j++];\n            y = args[j++];\n            const width = args[j++];\n            const height = args[j++];\n            const xw = x + width;\n            const yh = y + height;\n            d.push(\n              \"M\",\n              pf(x),\n              pf(y),\n              \"L\",\n              pf(xw),\n              pf(y),\n              \"L\",\n              pf(xw),\n              pf(yh),\n              \"L\",\n              pf(x),\n              pf(yh),\n              \"Z\"\n            );\n            break;\n          case OPS.moveTo:\n            x = args[j++];\n            y = args[j++];\n            d.push(\"M\", pf(x), pf(y));\n            break;\n          case OPS.lineTo:\n            x = args[j++];\n            y = args[j++];\n            d.push(\"L\", pf(x), pf(y));\n            break;\n          case OPS.curveTo:\n            x = args[j + 4];\n            y = args[j + 5];\n            d.push(\n              \"C\",\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(args[j + 2]),\n              pf(args[j + 3]),\n              pf(x),\n              pf(y)\n            );\n            j += 6;\n            break;\n          case OPS.curveTo2:\n            d.push(\n              \"C\",\n              pf(x),\n              pf(y),\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(args[j + 2]),\n              pf(args[j + 3])\n            );\n            x = args[j + 2];\n            y = args[j + 3];\n            j += 4;\n            break;\n          case OPS.curveTo3:\n            x = args[j + 2];\n            y = args[j + 3];\n            d.push(\n              \"C\",\n              pf(args[j]),\n              pf(args[j + 1]),\n              pf(x),\n              pf(y),\n              pf(x),\n              pf(y)\n            );\n            j += 4;\n            break;\n          case OPS.closePath:\n            d.push(\"Z\");\n            break;\n        }\n      }\n\n      d = d.join(\" \");\n\n      if (\n        current.path &&\n        ops.length > 0 &&\n        ops[0] !== OPS.rectangle &&\n        ops[0] !== OPS.moveTo\n      ) {\n        // If a path does not start with an OPS.rectangle or OPS.moveTo, it has\n        // probably been divided into two OPS.constructPath operators by\n        // OperatorList. Append the commands to the previous path element.\n        d = current.path.getAttributeNS(null, \"d\") + d;\n      } else {\n        current.path = this.svgFactory.createElement(\"svg:path\");\n        this._ensureTransformGroup().appendChild(current.path);\n      }\n\n      current.path.setAttributeNS(null, \"d\", d);\n      current.path.setAttributeNS(null, \"fill\", \"none\");\n\n      // Saving a reference in current.element so that it can be addressed\n      // in 'fill' and 'stroke'\n      current.element = current.path;\n      current.setCurrentPoint(x, y);\n    }\n\n    endPath() {\n      const current = this.current;\n\n      // Painting operators end a path.\n      current.path = null;\n\n      if (!this.pendingClip) {\n        return;\n      }\n      if (!current.element) {\n        this.pendingClip = null;\n        return;\n      }\n\n      // Add the current path to a clipping path.\n      const clipId = `clippath${clipCount++}`;\n      const clipPath = this.svgFactory.createElement(\"svg:clipPath\");\n      clipPath.setAttributeNS(null, \"id\", clipId);\n      clipPath.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n\n      // A deep clone is needed when text is used as a clipping path.\n      const clipElement = current.element.cloneNode(true);\n      if (this.pendingClip === \"evenodd\") {\n        clipElement.setAttributeNS(null, \"clip-rule\", \"evenodd\");\n      } else {\n        clipElement.setAttributeNS(null, \"clip-rule\", \"nonzero\");\n      }\n      this.pendingClip = null;\n      clipPath.appendChild(clipElement);\n      this.defs.appendChild(clipPath);\n\n      if (current.activeClipUrl) {\n        // The previous clipping group content can go out of order -- resetting\n        // cached clipGroups.\n        current.clipGroup = null;\n        for (const prev of this.extraStack) {\n          prev.clipGroup = null;\n        }\n        // Intersect with the previous clipping path.\n        clipPath.setAttributeNS(null, \"clip-path\", current.activeClipUrl);\n      }\n      current.activeClipUrl = `url(#${clipId})`;\n\n      this.tgrp = null;\n    }\n\n    clip(type) {\n      this.pendingClip = type;\n    }\n\n    closePath() {\n      const current = this.current;\n      if (current.path) {\n        const d = `${current.path.getAttributeNS(null, \"d\")}Z`;\n        current.path.setAttributeNS(null, \"d\", d);\n      }\n    }\n\n    setLeading(leading) {\n      this.current.leading = -leading;\n    }\n\n    setTextRise(textRise) {\n      this.current.textRise = textRise;\n    }\n\n    setTextRenderingMode(textRenderingMode) {\n      this.current.textRenderingMode = textRenderingMode;\n    }\n\n    setHScale(scale) {\n      this.current.textHScale = scale / 100;\n    }\n\n    setRenderingIntent(intent) {\n      // This operation is ignored since we haven't found a use case for it yet.\n    }\n\n    setFlatness(flatness) {\n      // This operation is ignored since we haven't found a use case for it yet.\n    }\n\n    setGState(states) {\n      for (const [key, value] of states) {\n        switch (key) {\n          case \"LW\":\n            this.setLineWidth(value);\n            break;\n          case \"LC\":\n            this.setLineCap(value);\n            break;\n          case \"LJ\":\n            this.setLineJoin(value);\n            break;\n          case \"ML\":\n            this.setMiterLimit(value);\n            break;\n          case \"D\":\n            this.setDash(value[0], value[1]);\n            break;\n          case \"RI\":\n            this.setRenderingIntent(value);\n            break;\n          case \"FL\":\n            this.setFlatness(value);\n            break;\n          case \"Font\":\n            this.setFont(value);\n            break;\n          case \"CA\":\n            this.setStrokeAlpha(value);\n            break;\n          case \"ca\":\n            this.setFillAlpha(value);\n            break;\n          default:\n            warn(`Unimplemented graphic state operator ${key}`);\n            break;\n        }\n      }\n    }\n\n    fill() {\n      const current = this.current;\n      if (current.element) {\n        current.element.setAttributeNS(null, \"fill\", current.fillColor);\n        current.element.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n        this.endPath();\n      }\n    }\n\n    stroke() {\n      const current = this.current;\n      if (current.element) {\n        this._setStrokeAttributes(current.element);\n        current.element.setAttributeNS(null, \"fill\", \"none\");\n        this.endPath();\n      }\n    }\n\n    /**\n     * @private\n     */\n    _setStrokeAttributes(element, lineWidthScale = 1) {\n      const current = this.current;\n      let dashArray = current.dashArray;\n      if (lineWidthScale !== 1 && dashArray.length > 0) {\n        dashArray = dashArray.map(function (value) {\n          return lineWidthScale * value;\n        });\n      }\n      element.setAttributeNS(null, \"stroke\", current.strokeColor);\n      element.setAttributeNS(null, \"stroke-opacity\", current.strokeAlpha);\n      element.setAttributeNS(null, \"stroke-miterlimit\", pf(current.miterLimit));\n      element.setAttributeNS(null, \"stroke-linecap\", current.lineCap);\n      element.setAttributeNS(null, \"stroke-linejoin\", current.lineJoin);\n      element.setAttributeNS(\n        null,\n        \"stroke-width\",\n        pf(lineWidthScale * current.lineWidth) + \"px\"\n      );\n      element.setAttributeNS(\n        null,\n        \"stroke-dasharray\",\n        dashArray.map(pf).join(\" \")\n      );\n      element.setAttributeNS(\n        null,\n        \"stroke-dashoffset\",\n        pf(lineWidthScale * current.dashPhase) + \"px\"\n      );\n    }\n\n    eoFill() {\n      if (this.current.element) {\n        this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n      }\n      this.fill();\n    }\n\n    fillStroke() {\n      // Order is important since stroke wants fill to be none.\n      // First stroke, then if fill needed, it will be overwritten.\n      this.stroke();\n      this.fill();\n    }\n\n    eoFillStroke() {\n      if (this.current.element) {\n        this.current.element.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n      }\n      this.fillStroke();\n    }\n\n    closeStroke() {\n      this.closePath();\n      this.stroke();\n    }\n\n    closeFillStroke() {\n      this.closePath();\n      this.fillStroke();\n    }\n\n    closeEOFillStroke() {\n      this.closePath();\n      this.eoFillStroke();\n    }\n\n    paintSolidColorImageMask() {\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", \"0\");\n      rect.setAttributeNS(null, \"y\", \"0\");\n      rect.setAttributeNS(null, \"width\", \"1px\");\n      rect.setAttributeNS(null, \"height\", \"1px\");\n      rect.setAttributeNS(null, \"fill\", this.current.fillColor);\n\n      this._ensureTransformGroup().appendChild(rect);\n    }\n\n    paintImageXObject(objId) {\n      const imgData = objId.startsWith(\"g_\")\n        ? this.commonObjs.get(objId)\n        : this.objs.get(objId);\n      if (!imgData) {\n        warn(`Dependent image with object ID ${objId} is not ready yet`);\n        return;\n      }\n      this.paintInlineImageXObject(imgData);\n    }\n\n    paintInlineImageXObject(imgData, mask) {\n      const width = imgData.width;\n      const height = imgData.height;\n\n      const imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);\n      const cliprect = this.svgFactory.createElement(\"svg:rect\");\n      cliprect.setAttributeNS(null, \"x\", \"0\");\n      cliprect.setAttributeNS(null, \"y\", \"0\");\n      cliprect.setAttributeNS(null, \"width\", pf(width));\n      cliprect.setAttributeNS(null, \"height\", pf(height));\n      this.current.element = cliprect;\n      this.clip(\"nonzero\");\n\n      const imgEl = this.svgFactory.createElement(\"svg:image\");\n      imgEl.setAttributeNS(XLINK_NS, \"xlink:href\", imgSrc);\n      imgEl.setAttributeNS(null, \"x\", \"0\");\n      imgEl.setAttributeNS(null, \"y\", pf(-height));\n      imgEl.setAttributeNS(null, \"width\", pf(width) + \"px\");\n      imgEl.setAttributeNS(null, \"height\", pf(height) + \"px\");\n      imgEl.setAttributeNS(\n        null,\n        \"transform\",\n        `scale(${pf(1 / width)} ${pf(-1 / height)})`\n      );\n      if (mask) {\n        mask.appendChild(imgEl);\n      } else {\n        this._ensureTransformGroup().appendChild(imgEl);\n      }\n    }\n\n    paintImageMaskXObject(imgData) {\n      const current = this.current;\n      const width = imgData.width;\n      const height = imgData.height;\n      const fillColor = current.fillColor;\n\n      current.maskId = `mask${maskCount++}`;\n      const mask = this.svgFactory.createElement(\"svg:mask\");\n      mask.setAttributeNS(null, \"id\", current.maskId);\n\n      const rect = this.svgFactory.createElement(\"svg:rect\");\n      rect.setAttributeNS(null, \"x\", \"0\");\n      rect.setAttributeNS(null, \"y\", \"0\");\n      rect.setAttributeNS(null, \"width\", pf(width));\n      rect.setAttributeNS(null, \"height\", pf(height));\n      rect.setAttributeNS(null, \"fill\", fillColor);\n      rect.setAttributeNS(null, \"mask\", `url(#${current.maskId})`);\n\n      this.defs.appendChild(mask);\n      this._ensureTransformGroup().appendChild(rect);\n\n      this.paintInlineImageXObject(imgData, mask);\n    }\n\n    paintFormXObjectBegin(matrix, bbox) {\n      if (Array.isArray(matrix) && matrix.length === 6) {\n        this.transform(\n          matrix[0],\n          matrix[1],\n          matrix[2],\n          matrix[3],\n          matrix[4],\n          matrix[5]\n        );\n      }\n\n      if (bbox) {\n        const width = bbox[2] - bbox[0];\n        const height = bbox[3] - bbox[1];\n\n        const cliprect = this.svgFactory.createElement(\"svg:rect\");\n        cliprect.setAttributeNS(null, \"x\", bbox[0]);\n        cliprect.setAttributeNS(null, \"y\", bbox[1]);\n        cliprect.setAttributeNS(null, \"width\", pf(width));\n        cliprect.setAttributeNS(null, \"height\", pf(height));\n        this.current.element = cliprect;\n        this.clip(\"nonzero\");\n        this.endPath();\n      }\n    }\n\n    paintFormXObjectEnd() {}\n\n    /**\n     * @private\n     */\n    _initialize(viewport) {\n      const svg = this.svgFactory.create(viewport.width, viewport.height);\n\n      // Create the definitions element.\n      const definitions = this.svgFactory.createElement(\"svg:defs\");\n      svg.appendChild(definitions);\n      this.defs = definitions;\n\n      // Create the root group element, which acts a container for all other\n      // groups and applies the viewport transform.\n      const rootGroup = this.svgFactory.createElement(\"svg:g\");\n      rootGroup.setAttributeNS(null, \"transform\", pm(viewport.transform));\n      svg.appendChild(rootGroup);\n\n      // For the construction of the SVG image we are only interested in the\n      // root group, so we expose it as the entry point of the SVG image for\n      // the other code in this class.\n      this.svg = rootGroup;\n\n      return svg;\n    }\n\n    /**\n     * @private\n     */\n    _ensureClipGroup() {\n      if (!this.current.clipGroup) {\n        const clipGroup = this.svgFactory.createElement(\"svg:g\");\n        clipGroup.setAttributeNS(null, \"clip-path\", this.current.activeClipUrl);\n        this.svg.appendChild(clipGroup);\n        this.current.clipGroup = clipGroup;\n      }\n      return this.current.clipGroup;\n    }\n\n    /**\n     * @private\n     */\n    _ensureTransformGroup() {\n      if (!this.tgrp) {\n        this.tgrp = this.svgFactory.createElement(\"svg:g\");\n        this.tgrp.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n        if (this.current.activeClipUrl) {\n          this._ensureClipGroup().appendChild(this.tgrp);\n        } else {\n          this.svg.appendChild(this.tgrp);\n        }\n      }\n      return this.tgrp;\n    }\n  };\n}\n\nexport { SVGGraphics };\n","/* Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass XfaLayer {\n  static setupStorage(html, id, element, storage, intent) {\n    const storedData = storage.getValue(id, { value: null });\n    switch (element.name) {\n      case \"textarea\":\n        if (storedData.value !== null) {\n          html.textContent = storedData.value;\n        }\n        if (intent === \"print\") {\n          break;\n        }\n        html.addEventListener(\"input\", event => {\n          storage.setValue(id, { value: event.target.value });\n        });\n        break;\n      case \"input\":\n        if (\n          element.attributes.type === \"radio\" ||\n          element.attributes.type === \"checkbox\"\n        ) {\n          if (storedData.value === element.attributes.xfaOn) {\n            html.setAttribute(\"checked\", true);\n          }\n          if (intent === \"print\") {\n            break;\n          }\n          html.addEventListener(\"change\", event => {\n            storage.setValue(id, { value: event.target.getAttribute(\"xfaOn\") });\n          });\n        } else {\n          if (storedData.value !== null) {\n            html.setAttribute(\"value\", storedData.value);\n          }\n          if (intent === \"print\") {\n            break;\n          }\n          html.addEventListener(\"input\", event => {\n            storage.setValue(id, { value: event.target.value });\n          });\n        }\n        break;\n      case \"select\":\n        if (storedData.value !== null) {\n          for (const option of element.children) {\n            if (option.attributes.value === storedData.value) {\n              option.attributes.selected = true;\n            }\n          }\n        }\n        html.addEventListener(\"input\", event => {\n          const options = event.target.options;\n          const value =\n            options.selectedIndex === -1\n              ? \"\"\n              : options[options.selectedIndex].value;\n          storage.setValue(id, { value });\n        });\n        break;\n    }\n  }\n\n  static setAttributes(html, element, storage, intent) {\n    const { attributes } = element;\n    if (attributes.type === \"radio\") {\n      // Avoid to have a radio group when printing with the same as one\n      // already displayed.\n      attributes.name = `${attributes.name}-${intent}`;\n    }\n    for (const [key, value] of Object.entries(attributes)) {\n      // We don't need to add dataId in the html object but it can\n      // be useful to know its value when writing printing tests:\n      // in this case, don't skip dataId to have its value.\n      if (value === null || value === undefined || key === \"dataId\") {\n        continue;\n      }\n\n      if (key !== \"style\") {\n        if (key === \"textContent\") {\n          html.textContent = value;\n        } else if (key === \"class\") {\n          html.setAttribute(key, value.join(\" \"));\n        } else {\n          html.setAttribute(key, value);\n        }\n      } else {\n        Object.assign(html.style, value);\n      }\n    }\n\n    // Set the value after the others to be sure overwrite\n    // any other values.\n    if (storage && attributes.dataId) {\n      this.setupStorage(html, attributes.dataId, element, storage);\n    }\n  }\n\n  static render(parameters) {\n    const storage = parameters.annotationStorage;\n    const root = parameters.xfa;\n    const intent = parameters.intent || \"display\";\n    const rootHtml = document.createElement(root.name);\n    if (root.attributes) {\n      this.setAttributes(rootHtml, root);\n    }\n    const stack = [[root, -1, rootHtml]];\n\n    const rootDiv = parameters.div;\n    rootDiv.appendChild(rootHtml);\n    const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n    rootDiv.style.transform = transform;\n\n    // Set defaults.\n    rootDiv.setAttribute(\"class\", \"xfaLayer xfaFont\");\n\n    while (stack.length > 0) {\n      const [parent, i, html] = stack[stack.length - 1];\n      if (i + 1 === parent.children.length) {\n        stack.pop();\n        continue;\n      }\n\n      const child = parent.children[++stack[stack.length - 1][1]];\n      if (child === null) {\n        continue;\n      }\n\n      const { name } = child;\n      if (name === \"#text\") {\n        html.appendChild(document.createTextNode(child.value));\n        continue;\n      }\n\n      let childHtml;\n      if (child?.attributes?.xmlns) {\n        childHtml = document.createElementNS(child.attributes.xmlns, name);\n      } else {\n        childHtml = document.createElement(name);\n      }\n\n      html.appendChild(childHtml);\n      if (child.attributes) {\n        this.setAttributes(childHtml, child, storage, intent);\n      }\n\n      if (child.children && child.children.length > 0) {\n        stack.push([child, -1, childHtml]);\n      } else if (child.value) {\n        childHtml.appendChild(document.createTextNode(child.value));\n      }\n    }\n\n    /**\n     * TODO: re-enable that stuff once we've JS implementation.\n     * See https://bugzilla.mozilla.org/show_bug.cgi?id=1719465.\n     *\n     * for (const el of rootDiv.querySelectorAll(\n     * \".xfaDisabled input, .xfaDisabled textarea\"\n     * )) {\n     * el.setAttribute(\"disabled\", true);\n     * }\n     * for (const el of rootDiv.querySelectorAll(\n     * \".xfaReadOnly input, .xfaReadOnly textarea\"\n     * )) {\n     * el.setAttribute(\"readOnly\", true);\n     * }\n     */\n\n    for (const el of rootDiv.querySelectorAll(\n      \".xfaNonInteractive input, .xfaNonInteractive textarea\"\n    )) {\n      el.setAttribute(\"readOnly\", true);\n    }\n  }\n\n  /**\n   * Update the xfa layer.\n   *\n   * @public\n   * @param {XfaLayerParameters} parameters\n   * @memberof XfaLayer\n   */\n  static update(parameters) {\n    const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n    parameters.div.style.transform = transform;\n    parameters.div.hidden = false;\n  }\n}\n\nexport { XfaLayer };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n  MissingPDFException,\n} from \"../shared/util.js\";\nimport {\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./node_stream.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nconst fs = __non_webpack_require__(\"fs\");\nconst http = __non_webpack_require__(\"http\");\nconst https = __non_webpack_require__(\"https\");\nconst url = __non_webpack_require__(\"url\");\n\nconst fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n\nfunction parseUrl(sourceUrl) {\n  const parsedUrl = url.parse(sourceUrl);\n  if (parsedUrl.protocol === \"file:\" || parsedUrl.host) {\n    return parsedUrl;\n  }\n  // Prepending 'file:///' to Windows absolute path.\n  if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\n    return url.parse(`file:///${sourceUrl}`);\n  }\n  // Changes protocol to 'file:' if url refers to filesystem.\n  if (!parsedUrl.host) {\n    parsedUrl.protocol = \"file:\";\n  }\n  return parsedUrl;\n}\n\nclass PDFNodeStream {\n  constructor(source) {\n    this.source = source;\n    this.url = parseUrl(source.url);\n    this.isHttp =\n      this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n    // Check if url refers to filesystem.\n    this.isFsUrl = this.url.protocol === \"file:\";\n    this.httpHeaders = (this.isHttp && source.httpHeaders) || {};\n\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFNodeStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = this.isFsUrl\n      ? new PDFNodeStreamFsFullReader(this)\n      : new PDFNodeStreamFullReader(this);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(start, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const rangeReader = this.isFsUrl\n      ? new PDFNodeStreamFsRangeReader(this, start, end)\n      : new PDFNodeStreamRangeReader(this, start, end);\n    this._rangeRequestReaders.push(rangeReader);\n    return rangeReader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\nclass BaseFullReader {\n  constructor(stream) {\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    const source = stream.source;\n    this._contentLength = source.length; // optional\n    this._loaded = 0;\n    this._filename = null;\n\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n\n    this._readableStream = null;\n    this._readCapability = createPromiseCapability();\n    this._headersCapability = createPromiseCapability();\n  }\n\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    if (this._storedError) {\n      throw this._storedError;\n    }\n\n    const chunk = this._readableStream.read();\n    if (chunk === null) {\n      this._readCapability = createPromiseCapability();\n      return this.read();\n    }\n    this._loaded += chunk.length;\n    if (this.onProgress) {\n      this.onProgress({\n        loaded: this._loaded,\n        total: this._contentLength,\n      });\n    }\n    // Ensure that `read()` method returns ArrayBuffer.\n    const buffer = new Uint8Array(chunk).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    // Call `this._error()` method when cancel is called\n    // before _readableStream is set.\n    if (!this._readableStream) {\n      this._error(reason);\n      return;\n    }\n    this._readableStream.destroy(reason);\n  }\n\n  _error(reason) {\n    this._storedError = reason;\n    this._readCapability.resolve();\n  }\n\n  _setReadableStream(readableStream) {\n    this._readableStream = readableStream;\n    readableStream.on(\"readable\", () => {\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"end\", () => {\n      // Destroy readable to minimize resource usage.\n      readableStream.destroy();\n      this._done = true;\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"error\", reason => {\n      this._error(reason);\n    });\n\n    // We need to stop reading when range is supported and streaming is\n    // disabled.\n    if (!this._isStreamingSupported && this._isRangeSupported) {\n      this._error(new AbortException(\"streaming is disabled\"));\n    }\n\n    // Destroy ReadableStream if already in errored state.\n    if (this._storedError) {\n      this._readableStream.destroy(this._storedError);\n    }\n  }\n}\n\nclass BaseRangeReader {\n  constructor(stream) {\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    this._loaded = 0;\n    this._readableStream = null;\n    this._readCapability = createPromiseCapability();\n    const source = stream.source;\n    this._isStreamingSupported = !source.disableStream;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    if (this._storedError) {\n      throw this._storedError;\n    }\n\n    const chunk = this._readableStream.read();\n    if (chunk === null) {\n      this._readCapability = createPromiseCapability();\n      return this.read();\n    }\n    this._loaded += chunk.length;\n    if (this.onProgress) {\n      this.onProgress({ loaded: this._loaded });\n    }\n    // Ensure that `read()` method returns ArrayBuffer.\n    const buffer = new Uint8Array(chunk).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    // Call `this._error()` method when cancel is called\n    // before _readableStream is set.\n    if (!this._readableStream) {\n      this._error(reason);\n      return;\n    }\n    this._readableStream.destroy(reason);\n  }\n\n  _error(reason) {\n    this._storedError = reason;\n    this._readCapability.resolve();\n  }\n\n  _setReadableStream(readableStream) {\n    this._readableStream = readableStream;\n    readableStream.on(\"readable\", () => {\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"end\", () => {\n      // Destroy readableStream to minimize resource usage.\n      readableStream.destroy();\n      this._done = true;\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"error\", reason => {\n      this._error(reason);\n    });\n\n    // Destroy readableStream if already in errored state.\n    if (this._storedError) {\n      this._readableStream.destroy(this._storedError);\n    }\n  }\n}\n\nfunction createRequestOptions(parsedUrl, headers) {\n  return {\n    protocol: parsedUrl.protocol,\n    auth: parsedUrl.auth,\n    host: parsedUrl.hostname,\n    port: parsedUrl.port,\n    path: parsedUrl.path,\n    method: \"GET\",\n    headers,\n  };\n}\n\nclass PDFNodeStreamFullReader extends BaseFullReader {\n  constructor(stream) {\n    super(stream);\n\n    const handleResponse = response => {\n      if (response.statusCode === 404) {\n        const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        this._storedError = error;\n        this._headersCapability.reject(error);\n        return;\n      }\n      this._headersCapability.resolve();\n      this._setReadableStream(response);\n\n      const getResponseHeader = name => {\n        // Make sure that headers name are in lower case, as mentioned\n        // here: https://nodejs.org/api/http.html#http_message_headers.\n        return this._readableStream.headers[name.toLowerCase()];\n      };\n      const { allowRangeRequests, suggestedLength } =\n        validateRangeRequestCapabilities({\n          getResponseHeader,\n          isHttp: stream.isHttp,\n          rangeChunkSize: this._rangeChunkSize,\n          disableRange: this._disableRange,\n        });\n\n      this._isRangeSupported = allowRangeRequests;\n      // Setting right content length.\n      this._contentLength = suggestedLength || this._contentLength;\n\n      this._filename = extractFilenameFromHeader(getResponseHeader);\n    };\n\n    this._request = null;\n    if (this._url.protocol === \"http:\") {\n      this._request = http.request(\n        createRequestOptions(this._url, stream.httpHeaders),\n        handleResponse\n      );\n    } else {\n      this._request = https.request(\n        createRequestOptions(this._url, stream.httpHeaders),\n        handleResponse\n      );\n    }\n\n    this._request.on(\"error\", reason => {\n      this._storedError = reason;\n      this._headersCapability.reject(reason);\n    });\n    // Note: `request.end(data)` is used to write `data` to request body\n    // and notify end of request. But one should always call `request.end()`\n    // even if there is no data to write -- (to notify the end of request).\n    this._request.end();\n  }\n}\n\nclass PDFNodeStreamRangeReader extends BaseRangeReader {\n  constructor(stream, start, end) {\n    super(stream);\n\n    this._httpHeaders = {};\n    for (const property in stream.httpHeaders) {\n      const value = stream.httpHeaders[property];\n      if (typeof value === \"undefined\") {\n        continue;\n      }\n      this._httpHeaders[property] = value;\n    }\n    this._httpHeaders.Range = `bytes=${start}-${end - 1}`;\n\n    const handleResponse = response => {\n      if (response.statusCode === 404) {\n        const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        this._storedError = error;\n        return;\n      }\n      this._setReadableStream(response);\n    };\n\n    this._request = null;\n    if (this._url.protocol === \"http:\") {\n      this._request = http.request(\n        createRequestOptions(this._url, this._httpHeaders),\n        handleResponse\n      );\n    } else {\n      this._request = https.request(\n        createRequestOptions(this._url, this._httpHeaders),\n        handleResponse\n      );\n    }\n\n    this._request.on(\"error\", reason => {\n      this._storedError = reason;\n    });\n    this._request.end();\n  }\n}\n\nclass PDFNodeStreamFsFullReader extends BaseFullReader {\n  constructor(stream) {\n    super(stream);\n\n    let path = decodeURIComponent(this._url.path);\n\n    // Remove the extra slash to get right path from url like `file:///C:/`\n    if (fileUriRegex.test(this._url.href)) {\n      path = path.replace(/^\\//, \"\");\n    }\n\n    fs.lstat(path, (error, stat) => {\n      if (error) {\n        if (error.code === \"ENOENT\") {\n          error = new MissingPDFException(`Missing PDF \"${path}\".`);\n        }\n        this._storedError = error;\n        this._headersCapability.reject(error);\n        return;\n      }\n      // Setting right content length.\n      this._contentLength = stat.size;\n\n      this._setReadableStream(fs.createReadStream(path));\n      this._headersCapability.resolve();\n    });\n  }\n}\n\nclass PDFNodeStreamFsRangeReader extends BaseRangeReader {\n  constructor(stream, start, end) {\n    super(stream);\n\n    let path = decodeURIComponent(this._url.path);\n\n    // Remove the extra slash to get right path from url like `file:///C:/`\n    if (fileUriRegex.test(this._url.href)) {\n      path = path.replace(/^\\//, \"\");\n    }\n\n    this._setReadableStream(fs.createReadStream(path, { start, end: end - 1 }));\n  }\n}\n\nexport { PDFNodeStream };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  MissingPDFException,\n  UnexpectedResponseException,\n} from \"../shared/util.js\";\nimport { getFilenameFromContentDispositionHeader } from \"./content_disposition.js\";\nimport { isPdfFile } from \"./display_utils.js\";\n\nfunction validateRangeRequestCapabilities({\n  getResponseHeader,\n  isHttp,\n  rangeChunkSize,\n  disableRange,\n}) {\n  assert(rangeChunkSize > 0, \"Range chunk size must be larger than zero\");\n  const returnValues = {\n    allowRangeRequests: false,\n    suggestedLength: undefined,\n  };\n\n  const length = parseInt(getResponseHeader(\"Content-Length\"), 10);\n  if (!Number.isInteger(length)) {\n    return returnValues;\n  }\n\n  returnValues.suggestedLength = length;\n\n  if (length <= 2 * rangeChunkSize) {\n    // The file size is smaller than the size of two chunks, so it does not\n    // make any sense to abort the request and retry with a range request.\n    return returnValues;\n  }\n\n  if (disableRange || !isHttp) {\n    return returnValues;\n  }\n  if (getResponseHeader(\"Accept-Ranges\") !== \"bytes\") {\n    return returnValues;\n  }\n\n  const contentEncoding = getResponseHeader(\"Content-Encoding\") || \"identity\";\n  if (contentEncoding !== \"identity\") {\n    return returnValues;\n  }\n\n  returnValues.allowRangeRequests = true;\n  return returnValues;\n}\n\nfunction extractFilenameFromHeader(getResponseHeader) {\n  const contentDisposition = getResponseHeader(\"Content-Disposition\");\n  if (contentDisposition) {\n    let filename = getFilenameFromContentDispositionHeader(contentDisposition);\n    if (filename.includes(\"%\")) {\n      try {\n        filename = decodeURIComponent(filename);\n      } catch (ex) {}\n    }\n    if (isPdfFile(filename)) {\n      return filename;\n    }\n  }\n  return null;\n}\n\nfunction createResponseStatusError(status, url) {\n  if (status === 404 || (status === 0 && url.startsWith(\"file:\"))) {\n    return new MissingPDFException('Missing PDF \"' + url + '\".');\n  }\n  return new UnexpectedResponseException(\n    `Unexpected server response (${status}) while retrieving PDF \"${url}\".`,\n    status\n  );\n}\n\nfunction validateResponseStatus(status) {\n  return status === 200 || status === 206;\n}\n\nexport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n  validateResponseStatus,\n};\n","/* Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringToBytes } from \"../shared/util.js\";\n\n// This getFilenameFromContentDispositionHeader function is adapted from\n// https://github.com/Rob--W/open-in-browser/blob/7e2e35a38b8b4e981b11da7b2f01df0149049e92/extension/content-disposition.js\n// with the following changes:\n// - Modified to conform to PDF.js's coding style.\n// - Support UTF-8 decoding when TextDecoder is unsupported.\n// - Move return to the end of the function to prevent Babel from dropping the\n//   function declarations.\n\n/**\n * Extract file name from the Content-Disposition HTTP response header.\n *\n * @param {string} contentDisposition\n * @returns {string} Filename, if found in the Content-Disposition header.\n */\nfunction getFilenameFromContentDispositionHeader(contentDisposition) {\n  let needsEncodingFixup = true;\n\n  // filename*=ext-value (\"ext-value\" from RFC 5987, referenced by RFC 6266).\n  let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n  if (tmp) {\n    tmp = tmp[1];\n    let filename = rfc2616unquote(tmp);\n    filename = unescape(filename);\n    filename = rfc5987decode(filename);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n\n  // Continuations (RFC 2231 section 3, referenced by RFC 5987 section 3.1).\n  // filename*n*=part\n  // filename*n=part\n  tmp = rfc2231getparam(contentDisposition);\n  if (tmp) {\n    // RFC 2047, section\n    const filename = rfc2047decode(tmp);\n    return fixupEncoding(filename);\n  }\n\n  // filename=value (RFC 5987, section 4.1).\n  tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n  if (tmp) {\n    tmp = tmp[1];\n    let filename = rfc2616unquote(tmp);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n\n  // After this line there are only function declarations. We cannot put\n  // \"return\" here for readability because babel would then drop the function\n  // declarations...\n  function toParamRegExp(attributePattern, flags) {\n    return new RegExp(\n      \"(?:^|;)\\\\s*\" +\n        attributePattern +\n        \"\\\\s*=\\\\s*\" +\n        // Captures: value = token | quoted-string\n        // (RFC 2616, section 3.6 and referenced by RFC 6266 4.1)\n        \"(\" +\n        '[^\";\\\\s][^;\\\\s]*' +\n        \"|\" +\n        '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' +\n        \")\",\n      flags\n    );\n  }\n  function textdecode(encoding, value) {\n    if (encoding) {\n      if (!/^[\\x00-\\xFF]+$/.test(value)) {\n        return value;\n      }\n      try {\n        const decoder = new TextDecoder(encoding, { fatal: true });\n        const buffer = stringToBytes(value);\n        value = decoder.decode(buffer);\n        needsEncodingFixup = false;\n      } catch (e) {\n        // TextDecoder constructor threw - unrecognized encoding.\n        // Or TextDecoder API is not available (in IE / Edge).\n        if (/^utf-?8$/i.test(encoding)) {\n          // UTF-8 is commonly used, try to support it in another way:\n          try {\n            value = decodeURIComponent(escape(value));\n            needsEncodingFixup = false;\n          } catch (err) {}\n        }\n      }\n    }\n    return value;\n  }\n  function fixupEncoding(value) {\n    if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n      // Maybe multi-byte UTF-8.\n      value = textdecode(\"utf-8\", value);\n      if (needsEncodingFixup) {\n        // Try iso-8859-1 encoding.\n        value = textdecode(\"iso-8859-1\", value);\n      }\n    }\n    return value;\n  }\n  function rfc2231getparam(contentDispositionStr) {\n    const matches = [];\n    let match;\n    // Iterate over all filename*n= and filename*n*= with n being an integer\n    // of at least zero. Any non-zero number must not start with '0'.\n    const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n    while ((match = iter.exec(contentDispositionStr)) !== null) {\n      let [, n, quot, part] = match; // eslint-disable-line prefer-const\n      n = parseInt(n, 10);\n      if (n in matches) {\n        // Ignore anything after the invalid second filename*0.\n        if (n === 0) {\n          break;\n        }\n        continue;\n      }\n      matches[n] = [quot, part];\n    }\n    const parts = [];\n    for (let n = 0; n < matches.length; ++n) {\n      if (!(n in matches)) {\n        // Numbers must be consecutive. Truncate when there is a hole.\n        break;\n      }\n      let [quot, part] = matches[n]; // eslint-disable-line prefer-const\n      part = rfc2616unquote(part);\n      if (quot) {\n        part = unescape(part);\n        if (n === 0) {\n          part = rfc5987decode(part);\n        }\n      }\n      parts.push(part);\n    }\n    return parts.join(\"\");\n  }\n  function rfc2616unquote(value) {\n    if (value.startsWith('\"')) {\n      const parts = value.slice(1).split('\\\\\"');\n      // Find the first unescaped \" and terminate there.\n      for (let i = 0; i < parts.length; ++i) {\n        const quotindex = parts[i].indexOf('\"');\n        if (quotindex !== -1) {\n          parts[i] = parts[i].slice(0, quotindex);\n          parts.length = i + 1; // Truncates and stop the iteration.\n        }\n        parts[i] = parts[i].replace(/\\\\(.)/g, \"$1\");\n      }\n      value = parts.join('\"');\n    }\n    return value;\n  }\n  function rfc5987decode(extvalue) {\n    // Decodes \"ext-value\" from RFC 5987.\n    const encodingend = extvalue.indexOf(\"'\");\n    if (encodingend === -1) {\n      // Some servers send \"filename*=\" without encoding 'language' prefix,\n      // e.g. in https://github.com/Rob--W/open-in-browser/issues/26\n      // Let's accept the value like Firefox (57) (Chrome 62 rejects it).\n      return extvalue;\n    }\n    const encoding = extvalue.slice(0, encodingend);\n    const langvalue = extvalue.slice(encodingend + 1);\n    // Ignore language (RFC 5987 section 3.2.1, and RFC 6266 section 4.1 ).\n    const value = langvalue.replace(/^[^']*'/, \"\");\n    return textdecode(encoding, value);\n  }\n  function rfc2047decode(value) {\n    // RFC 2047-decode the result. Firefox tried to drop support for it, but\n    // backed out because some servers use it - https://bugzil.la/875615\n    // Firefox's condition for decoding is here: https://searchfox.org/mozilla-central/rev/4a590a5a15e35d88a3b23dd6ac3c471cf85b04a8/netwerk/mime/nsMIMEHeaderParamImpl.cpp#742-748\n\n    // We are more strict and only recognize RFC 2047-encoding if the value\n    // starts with \"=?\", since then it is likely that the full value is\n    // RFC 2047-encoded.\n\n    // Firefox also decodes words even where RFC 2047 section 5 states:\n    // \"An 'encoded-word' MUST NOT appear within a 'quoted-string'.\"\n    if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n      return value;\n    }\n    // RFC 2047, section 2.4\n    // encoded-word = \"=?\" charset \"?\" encoding \"?\" encoded-text \"?=\"\n    // charset = token (but let's restrict to characters that denote a\n    //       possibly valid encoding).\n    // encoding = q or b\n    // encoded-text = any printable ASCII character other than ? or space.\n    //        ... but Firefox permits ? and space.\n    return value.replace(\n      /=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g,\n      function (matches, charset, encoding, text) {\n        if (encoding === \"q\" || encoding === \"Q\") {\n          // RFC 2047 section 4.2.\n          text = text.replace(/_/g, \" \");\n          text = text.replace(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n            return String.fromCharCode(parseInt(hex, 16));\n          });\n          return textdecode(charset, text);\n        } // else encoding is b or B - base64 (RFC 2047 section 4.1)\n        try {\n          text = atob(text);\n        } catch (e) {}\n        return textdecode(charset, text);\n      }\n    );\n  }\n\n  return \"\";\n}\n\nexport { getFilenameFromContentDispositionHeader };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  createPromiseCapability,\n  stringToBytes,\n} from \"../shared/util.js\";\nimport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./network.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nconst OK_RESPONSE = 200;\nconst PARTIAL_CONTENT_RESPONSE = 206;\n\nfunction getArrayBuffer(xhr) {\n  const data = xhr.response;\n  if (typeof data !== \"string\") {\n    return data;\n  }\n  const array = stringToBytes(data);\n  return array.buffer;\n}\n\nclass NetworkManager {\n  constructor(url, args) {\n    this.url = url;\n    args = args || {};\n    this.isHttp = /^https?:/i.test(url);\n    this.httpHeaders = (this.isHttp && args.httpHeaders) || {};\n    this.withCredentials = args.withCredentials || false;\n    this.getXhr =\n      args.getXhr ||\n      function NetworkManager_getXhr() {\n        return new XMLHttpRequest();\n      };\n\n    this.currXhrId = 0;\n    this.pendingRequests = Object.create(null);\n  }\n\n  requestRange(begin, end, listeners) {\n    const args = {\n      begin,\n      end,\n    };\n    for (const prop in listeners) {\n      args[prop] = listeners[prop];\n    }\n    return this.request(args);\n  }\n\n  requestFull(listeners) {\n    return this.request(listeners);\n  }\n\n  request(args) {\n    const xhr = this.getXhr();\n    const xhrId = this.currXhrId++;\n    const pendingRequest = (this.pendingRequests[xhrId] = {\n      xhr,\n    });\n\n    xhr.open(\"GET\", this.url);\n    xhr.withCredentials = this.withCredentials;\n    for (const property in this.httpHeaders) {\n      const value = this.httpHeaders[property];\n      if (typeof value === \"undefined\") {\n        continue;\n      }\n      xhr.setRequestHeader(property, value);\n    }\n    if (this.isHttp && \"begin\" in args && \"end\" in args) {\n      xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\n      pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n    } else {\n      pendingRequest.expectedStatus = OK_RESPONSE;\n    }\n    xhr.responseType = \"arraybuffer\";\n\n    if (args.onError) {\n      xhr.onerror = function (evt) {\n        args.onError(xhr.status);\n      };\n    }\n    xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n    xhr.onprogress = this.onProgress.bind(this, xhrId);\n\n    pendingRequest.onHeadersReceived = args.onHeadersReceived;\n    pendingRequest.onDone = args.onDone;\n    pendingRequest.onError = args.onError;\n    pendingRequest.onProgress = args.onProgress;\n\n    xhr.send(null);\n\n    return xhrId;\n  }\n\n  onProgress(xhrId, evt) {\n    const pendingRequest = this.pendingRequests[xhrId];\n    if (!pendingRequest) {\n      // Maybe abortRequest was called...\n      return;\n    }\n\n    if (pendingRequest.onProgress) {\n      pendingRequest.onProgress(evt);\n    }\n  }\n\n  onStateChange(xhrId, evt) {\n    const pendingRequest = this.pendingRequests[xhrId];\n    if (!pendingRequest) {\n      // Maybe abortRequest was called...\n      return;\n    }\n\n    const xhr = pendingRequest.xhr;\n    if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n      pendingRequest.onHeadersReceived();\n      delete pendingRequest.onHeadersReceived;\n    }\n\n    if (xhr.readyState !== 4) {\n      return;\n    }\n\n    if (!(xhrId in this.pendingRequests)) {\n      // The XHR request might have been aborted in onHeadersReceived()\n      // callback, in which case we should abort request.\n      return;\n    }\n\n    delete this.pendingRequests[xhrId];\n\n    // Success status == 0 can be on ftp, file and other protocols.\n    if (xhr.status === 0 && this.isHttp) {\n      if (pendingRequest.onError) {\n        pendingRequest.onError(xhr.status);\n      }\n      return;\n    }\n    const xhrStatus = xhr.status || OK_RESPONSE;\n\n    // From http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.2:\n    // \"A server MAY ignore the Range header\". This means it's possible to\n    // get a 200 rather than a 206 response from a range request.\n    const ok_response_on_range_request =\n      xhrStatus === OK_RESPONSE &&\n      pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n\n    if (\n      !ok_response_on_range_request &&\n      xhrStatus !== pendingRequest.expectedStatus\n    ) {\n      if (pendingRequest.onError) {\n        pendingRequest.onError(xhr.status);\n      }\n      return;\n    }\n\n    const chunk = getArrayBuffer(xhr);\n    if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n      const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n      const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n      pendingRequest.onDone({\n        begin: parseInt(matches[1], 10),\n        chunk,\n      });\n    } else if (chunk) {\n      pendingRequest.onDone({\n        begin: 0,\n        chunk,\n      });\n    } else if (pendingRequest.onError) {\n      pendingRequest.onError(xhr.status);\n    }\n  }\n\n  getRequestXhr(xhrId) {\n    return this.pendingRequests[xhrId].xhr;\n  }\n\n  isPendingRequest(xhrId) {\n    return xhrId in this.pendingRequests;\n  }\n\n  abortRequest(xhrId) {\n    const xhr = this.pendingRequests[xhrId].xhr;\n    delete this.pendingRequests[xhrId];\n    xhr.abort();\n  }\n}\n\n/** @implements {IPDFStream} */\nclass PDFNetworkStream {\n  constructor(source) {\n    this._source = source;\n    this._manager = new NetworkManager(source.url, {\n      httpHeaders: source.httpHeaders,\n      withCredentials: source.withCredentials,\n    });\n    this._rangeChunkSize = source.rangeChunkSize;\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  _onRangeRequestReaderClosed(reader) {\n    const i = this._rangeRequestReaders.indexOf(reader);\n    if (i >= 0) {\n      this._rangeRequestReaders.splice(i, 1);\n    }\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFNetworkStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = new PDFNetworkStreamFullRequestReader(\n      this._manager,\n      this._source\n    );\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    const reader = new PDFNetworkStreamRangeRequestReader(\n      this._manager,\n      begin,\n      end\n    );\n    reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFNetworkStreamFullRequestReader {\n  constructor(manager, source) {\n    this._manager = manager;\n\n    const args = {\n      onHeadersReceived: this._onHeadersReceived.bind(this),\n      onDone: this._onDone.bind(this),\n      onError: this._onError.bind(this),\n      onProgress: this._onProgress.bind(this),\n    };\n    this._url = source.url;\n    this._fullRequestId = manager.requestFull(args);\n    this._headersReceivedCapability = createPromiseCapability();\n    this._disableRange = source.disableRange || false;\n    this._contentLength = source.length; // Optional\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._isStreamingSupported = false;\n    this._isRangeSupported = false;\n\n    this._cachedChunks = [];\n    this._requests = [];\n    this._done = false;\n    this._storedError = undefined;\n    this._filename = null;\n\n    this.onProgress = null;\n  }\n\n  _onHeadersReceived() {\n    const fullRequestXhrId = this._fullRequestId;\n    const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n\n    const getResponseHeader = name => {\n      return fullRequestXhr.getResponseHeader(name);\n    };\n    const { allowRangeRequests, suggestedLength } =\n      validateRangeRequestCapabilities({\n        getResponseHeader,\n        isHttp: this._manager.isHttp,\n        rangeChunkSize: this._rangeChunkSize,\n        disableRange: this._disableRange,\n      });\n\n    if (allowRangeRequests) {\n      this._isRangeSupported = true;\n    }\n    // Setting right content length.\n    this._contentLength = suggestedLength || this._contentLength;\n\n    this._filename = extractFilenameFromHeader(getResponseHeader);\n\n    if (this._isRangeSupported) {\n      // NOTE: by cancelling the full request, and then issuing range\n      // requests, there will be an issue for sites where you can only\n      // request the pdf once. However, if this is the case, then the\n      // server should not be returning that it can support range requests.\n      this._manager.abortRequest(fullRequestXhrId);\n    }\n\n    this._headersReceivedCapability.resolve();\n  }\n\n  _onDone(args) {\n    if (args) {\n      if (this._requests.length > 0) {\n        const requestCapability = this._requests.shift();\n        requestCapability.resolve({ value: args.chunk, done: false });\n      } else {\n        this._cachedChunks.push(args.chunk);\n      }\n    }\n    this._done = true;\n    if (this._cachedChunks.length > 0) {\n      return;\n    }\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n  }\n\n  _onError(status) {\n    const url = this._url;\n    const exception = createResponseStatusError(status, url);\n    this._storedError = exception;\n    this._headersReceivedCapability.reject(exception);\n    for (const requestCapability of this._requests) {\n      requestCapability.reject(exception);\n    }\n    this._requests.length = 0;\n    this._cachedChunks.length = 0;\n  }\n\n  _onProgress(data) {\n    if (this.onProgress) {\n      this.onProgress({\n        loaded: data.loaded,\n        total: data.lengthComputable ? data.total : this._contentLength,\n      });\n    }\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get headersReady() {\n    return this._headersReceivedCapability.promise;\n  }\n\n  async read() {\n    if (this._storedError) {\n      throw this._storedError;\n    }\n    if (this._cachedChunks.length > 0) {\n      const chunk = this._cachedChunks.shift();\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    this._headersReceivedCapability.reject(reason);\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    if (this._manager.isPendingRequest(this._fullRequestId)) {\n      this._manager.abortRequest(this._fullRequestId);\n    }\n    this._fullRequestReader = null;\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFNetworkStreamRangeRequestReader {\n  constructor(manager, begin, end) {\n    this._manager = manager;\n    const args = {\n      onDone: this._onDone.bind(this),\n      onProgress: this._onProgress.bind(this),\n    };\n    this._requestId = manager.requestRange(begin, end, args);\n    this._requests = [];\n    this._queuedChunk = null;\n    this._done = false;\n\n    this.onProgress = null;\n    this.onClosed = null;\n  }\n\n  _close() {\n    if (this.onClosed) {\n      this.onClosed(this);\n    }\n  }\n\n  _onDone(data) {\n    const chunk = data.chunk;\n    if (this._requests.length > 0) {\n      const requestCapability = this._requests.shift();\n      requestCapability.resolve({ value: chunk, done: false });\n    } else {\n      this._queuedChunk = chunk;\n    }\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    this._close();\n  }\n\n  _onProgress(evt) {\n    if (!this.isStreamingSupported && this.onProgress) {\n      this.onProgress({\n        loaded: evt.loaded,\n      });\n    }\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    if (this._queuedChunk !== null) {\n      const chunk = this._queuedChunk;\n      this._queuedChunk = null;\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = createPromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    if (this._manager.isPendingRequest(this._requestId)) {\n      this._manager.abortRequest(this._requestId);\n    }\n    this._close();\n  }\n}\n\nexport { PDFNetworkStream };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  assert,\n  createPromiseCapability,\n} from \"../shared/util.js\";\nimport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n  validateResponseStatus,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./fetch_stream.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nfunction createFetchOptions(headers, withCredentials, abortController) {\n  return {\n    method: \"GET\",\n    headers,\n    signal: abortController?.signal,\n    mode: \"cors\",\n    credentials: withCredentials ? \"include\" : \"same-origin\",\n    redirect: \"follow\",\n  };\n}\n\nfunction createHeaders(httpHeaders) {\n  const headers = new Headers();\n  for (const property in httpHeaders) {\n    const value = httpHeaders[property];\n    if (typeof value === \"undefined\") {\n      continue;\n    }\n    headers.append(property, value);\n  }\n  return headers;\n}\n\n/** @implements {IPDFStream} */\nclass PDFFetchStream {\n  constructor(source) {\n    this.source = source;\n    this.isHttp = /^https?:/i.test(source.url);\n    this.httpHeaders = (this.isHttp && source.httpHeaders) || {};\n\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFFetchStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = new PDFFetchStreamReader(this);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const reader = new PDFFetchStreamRangeReader(this, begin, end);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    if (this._fullRequestReader) {\n      this._fullRequestReader.cancel(reason);\n    }\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFFetchStreamReader {\n  constructor(stream) {\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    this._filename = null;\n    const source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._contentLength = source.length;\n    this._headersCapability = createPromiseCapability();\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    if (typeof AbortController !== \"undefined\") {\n      this._abortController = new AbortController();\n    }\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n\n    this._headers = createHeaders(this._stream.httpHeaders);\n\n    const url = source.url;\n    fetch(\n      url,\n      createFetchOptions(\n        this._headers,\n        this._withCredentials,\n        this._abortController\n      )\n    )\n      .then(response => {\n        if (!validateResponseStatus(response.status)) {\n          throw createResponseStatusError(response.status, url);\n        }\n        this._reader = response.body.getReader();\n        this._headersCapability.resolve();\n\n        const getResponseHeader = name => {\n          return response.headers.get(name);\n        };\n        const { allowRangeRequests, suggestedLength } =\n          validateRangeRequestCapabilities({\n            getResponseHeader,\n            isHttp: this._stream.isHttp,\n            rangeChunkSize: this._rangeChunkSize,\n            disableRange: this._disableRange,\n          });\n\n        this._isRangeSupported = allowRangeRequests;\n        // Setting right content length.\n        this._contentLength = suggestedLength || this._contentLength;\n\n        this._filename = extractFilenameFromHeader(getResponseHeader);\n\n        // We need to stop reading when range is supported and streaming is\n        // disabled.\n        if (!this._isStreamingSupported && this._isRangeSupported) {\n          this.cancel(new AbortException(\"Streaming is disabled.\"));\n        }\n      })\n      .catch(this._headersCapability.reject);\n\n    this.onProgress = null;\n  }\n\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._headersCapability.promise;\n    const { value, done } = await this._reader.read();\n    if (done) {\n      return { value, done };\n    }\n    this._loaded += value.byteLength;\n    if (this.onProgress) {\n      this.onProgress({\n        loaded: this._loaded,\n        total: this._contentLength,\n      });\n    }\n    const buffer = new Uint8Array(value).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    if (this._reader) {\n      this._reader.cancel(reason);\n    }\n    if (this._abortController) {\n      this._abortController.abort();\n    }\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFFetchStreamRangeReader {\n  constructor(stream, begin, end) {\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    const source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._readCapability = createPromiseCapability();\n    this._isStreamingSupported = !source.disableStream;\n\n    if (typeof AbortController !== \"undefined\") {\n      this._abortController = new AbortController();\n    }\n\n    this._headers = createHeaders(this._stream.httpHeaders);\n    this._headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\n\n    const url = source.url;\n    fetch(\n      url,\n      createFetchOptions(\n        this._headers,\n        this._withCredentials,\n        this._abortController\n      )\n    )\n      .then(response => {\n        if (!validateResponseStatus(response.status)) {\n          throw createResponseStatusError(response.status, url);\n        }\n        this._readCapability.resolve();\n        this._reader = response.body.getReader();\n      })\n      .catch(reason => {\n        if (reason?.name === \"AbortError\") {\n          return;\n        }\n        throw reason;\n      });\n\n    this.onProgress = null;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    const { value, done } = await this._reader.read();\n    if (done) {\n      return { value, done };\n    }\n    this._loaded += value.byteLength;\n    if (this.onProgress) {\n      this.onProgress({ loaded: this._loaded });\n    }\n    const buffer = new Uint8Array(value).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    if (this._reader) {\n      this._reader.cancel(reason);\n    }\n    if (this._abortController) {\n      this._abortController.abort();\n    }\n  }\n}\n\nexport { PDFFetchStream };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __w_pdfjs_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable sort-exports/sort-exports */\n\nimport {\n  addLinkAttributes,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  getXfaPageViewport,\n  isPdfFile,\n  isValidFetchUrl,\n  LinkTarget,\n  loadScript,\n  PDFDateString,\n  RenderingCancelledException,\n} from \"./display/display_utils.js\";\nimport {\n  build,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFWorker,\n  setPDFNetworkStreamFactory,\n  version,\n} from \"./display/api.js\";\nimport {\n  CMapCompressionType,\n  createObjectURL,\n  createPromiseCapability,\n  createValidAbsoluteUrl,\n  InvalidPDFException,\n  MissingPDFException,\n  OPS,\n  PasswordResponses,\n  PermissionFlag,\n  removeNullCharacters,\n  shadow,\n  UnexpectedResponseException,\n  UNSUPPORTED_FEATURES,\n  Util,\n  VerbosityLevel,\n} from \"./shared/util.js\";\nimport { AnnotationLayer } from \"./display/annotation_layer.js\";\nimport { GlobalWorkerOptions } from \"./display/worker_options.js\";\nimport { isNodeJS } from \"./shared/is_node.js\";\nimport { renderTextLayer } from \"./display/text_layer.js\";\nimport { SVGGraphics } from \"./display/svg.js\";\nimport { XfaLayer } from \"./display/xfa_layer.js\";\n\n/* eslint-disable-next-line no-unused-vars */\nconst pdfjsVersion =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_VERSION\") : void 0;\n/* eslint-disable-next-line no-unused-vars */\nconst pdfjsBuild =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_BUILD\") : void 0;\n\nif (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"PRODUCTION\")) {\n  const streamsPromise = Promise.all([\n    import(\"pdfjs/display/network.js\"),\n    import(\"pdfjs/display/fetch_stream.js\"),\n  ]);\n\n  setPDFNetworkStreamFactory(async params => {\n    const [{ PDFNetworkStream }, { PDFFetchStream }] = await streamsPromise;\n    if (isValidFetchUrl(params.url)) {\n      return new PDFFetchStream(params);\n    }\n    return new PDFNetworkStream(params);\n  });\n} else if (PDFJSDev.test(\"GENERIC || CHROME\")) {\n  if (PDFJSDev.test(\"GENERIC\") && isNodeJS) {\n    const { PDFNodeStream } = require(\"./display/node_stream.js\");\n\n    setPDFNetworkStreamFactory(params => {\n      return new PDFNodeStream(params);\n    });\n  } else {\n    const { PDFNetworkStream } = require(\"./display/network.js\");\n    const { PDFFetchStream } = require(\"./display/fetch_stream.js\");\n\n    setPDFNetworkStreamFactory(params => {\n      if (isValidFetchUrl(params.url)) {\n        return new PDFFetchStream(params);\n      }\n      return new PDFNetworkStream(params);\n    });\n  }\n}\n\nexport {\n  // From \"./display/display_utils.js\":\n  addLinkAttributes,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  isPdfFile,\n  LinkTarget,\n  loadScript,\n  PDFDateString,\n  RenderingCancelledException,\n  getXfaPageViewport,\n  // From \"./display/api.js\":\n  build,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFWorker,\n  version,\n  // From \"./shared/util.js\":\n  CMapCompressionType,\n  createObjectURL,\n  createPromiseCapability,\n  createValidAbsoluteUrl,\n  InvalidPDFException,\n  MissingPDFException,\n  OPS,\n  PasswordResponses,\n  PermissionFlag,\n  removeNullCharacters,\n  shadow,\n  UnexpectedResponseException,\n  UNSUPPORTED_FEATURES,\n  Util,\n  VerbosityLevel,\n  // From \"./display/annotation_layer.js\":\n  AnnotationLayer,\n  // From \"./display/worker_options.js\":\n  GlobalWorkerOptions,\n  // From \"./display/text_layer.js\":\n  renderTextLayer,\n  // From \"./display/svg.js\":\n  SVGGraphics,\n  // From \"./display/xfa_layer.js\":\n  XfaLayer,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}